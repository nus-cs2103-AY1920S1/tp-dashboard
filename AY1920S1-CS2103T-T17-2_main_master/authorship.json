[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d TravEzy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T17-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-T17-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Hey you! Yes you! Do you like travelling around the world but find it hard to manage your expenses while travelling abroad?"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Well then we just have the solution for you. Introducing Travezy, with Travezy, we help NUS students who love travelling plan their"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "travel plans while keeping a lookout of their expenditure throughout the time. Travezy is your one stop trusty desktop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "application to organize your plans and financial needs. But wait, there\u0027s more, Travezy is optimized for those who prefer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "type fast this is definitely the app for you! So what are you waiting for? Get your copy of Travezy today!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* The original source code is obtained from AddressBook-Level3 project by https://se-education.org[SE-EDU]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "* Travezy would like to acknowledge the following awesome source code and guidance in creating this application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "* UI is designed with the use of Flaticons"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 2,
      "tishyakhanna97": 1,
      "-": 27,
      "ngzhaoming": 9
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        \u0027site-name\u0027: \u0027TravEzy\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://ay1920s1-cs2103t-t17-2.github.io/main/\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "tishyakhanna97": 2,
      "-": 152,
      "ngzhaoming": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "TravEzy was developed by the https://ay1920s1-cs2103t-t17-2.github.io/main/ team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d\u003d\u003d Ong Bing Jue"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "image::bjhoohaha.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "{empty}[https://github.com/bjhoohaha[github]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Role: Chief Operations Officer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Responsibilities: Developer - Address Book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d\u003d\u003d Hon Hao Chen"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "image::honhaochen.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "{empty}[http://github.com/honhaochen[github]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Role: Chief Financial Officer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Responsibilities: Developer - Financial Tracker"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d\u003d\u003d Ng Zhao Ming"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "image::ngzhaoming.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "{empty}[http://github.com/ngzhaoming[github]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Role: Chief Technology Officer +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Responsibilities: Developer - Itinerary"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d\u003d\u003d Poh Lin Wei"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "image::pohlinwei.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "{empty}[http://github.com/pohlinwei[github]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Role: Chief Strategy Officer +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Responsibilities: Developer - Calendar"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d\u003d\u003d Tishya Khanna"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "image::tishyakhanna97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "{empty}[http://github.com/tishyakhanna97[github]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Role: Chief Information Officer +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Responsibilities: Developer - Travel Diary"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 32,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level3/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "* *Email us* : You can also reach us at `travEzy@gmail.com`"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d TravEzy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ":repoURL: https://ay1920s1-cs2103t-t17-2.github.io/main/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "By: `Team T17-2`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003d\u003d\u003d TravEzy Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ".Travezy Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "image::TravezyArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "TravEzy is mainly a Common Line Interface (CLI) desktop application. Hence, users will just need to interact with the text UI to trigger responses from Travezy."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The `UI` component extends out to many different pages in TravEzy which represents the features that it has. This includes:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* Calendar"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* Itinerary"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* Financial Tracker"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* Travel Diary"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* Address Book"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* Achievements"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The Calendar and Itinerary window work in tandem with each other. Due to their dependency, modification to one of the feeature might result in the the other feature breaking."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* Facilitate the changing of scenes between different user interface for the different features"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* Gets the requested page"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* Changes the scene on the primary stage upon request"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "image::BetterLogicClassDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ".  `Logic` gets the `AddressBookLogic`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ".  `AddressBookLogic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ".  This results in a `Command` object which is executed by the `AddressLogicManager`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "image::BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* stores the different model used for different packages inside Travezy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* stores a `UserPrefModel` object used to get and set user preferences"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* stores a `AddressBookModel` object used to get data from the address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* supply a `StatisticsModel` which is only evaluated upon request"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "image:BetterAddressBookModelClassDiagram.png[]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "[[Features-Calendar]]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "TravEzy has several features which are listed below."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Each of these features have their own design and implementation logic."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003d\u003d\u003d Calendar"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The calendar feature in TravEzy allows users to easily find a free period of time to travel."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "*Calendar Class Diagram:*+"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "image::CalendarClassDiagram.png[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The above diagram shows that ``Calendar`` stores information about the state of the user\u0027s calendar, including information about the user\u0027s current view as indicated by ``currentMonth``."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "image::ShowSequenceDiagram.png[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The above sequence diagram shows the sequence of events that take place when a user calls ``show`` command. Do note that the above sequence of events are very similar to those for the other commands which extend ``Command`` class."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "image::SmartSuggestActivityDiagram.png[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The above activity diagram shows how ``smartSuggest`` command works."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003d\u003d\u003d Itinerary"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The itinerary feature in TravEzy allows users to organize their events by giving a certain time they planned to"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "finish each event."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Current, the itinerary feature supports the basic commands of add, delete, edit and marking your events as done."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "It also includes other more advanced commands such as search, sort and wish(TM)."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Not sure what you should do during a certain period of time?"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Use the wish function in the itinerary and TravEzy will grant you three event suggestions based on your past entries."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "These suggestions are"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "personalized for each user!"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The itinerary feature implements the aforementioned feature based on the use cases below:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ".Use Case Diagram of the Itinerary feature"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "image::ItineraryUseCaseDiagram.png[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Due to the numerous features supported by the itinerary, it requires a complex structure to ensure that each input"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "by the user are cautiously parsed before giving the appropriate command result."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ".Architecture Diagram of the Itinerary feature"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "image::ItineraryDiagram.png[]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the itinerary feature."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Inputs given by the user are channeled from the text UI and parsed in the logic package before different commands"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "are formed which generates the model and updates the itinerary object which contains the event list."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The Calendar and Itinerary window work in tandem with each other. Due to their dependency,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "modification to one of the feature might result in the the other feature breaking."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The `text UI`, `logic` and `storage` all stem from the common package of the main TravEzy application."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "However, in the `parser` package of itinerary, it contains various parser objects for the different command."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "This is to ensure that each command in the itinerary have only one parser validating the command."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003d\u003d\u003d Model Component"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The implementation of the model class in TravEzy is to be a generic. Hence, the model object being instantiated"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "could be any of the following 5 features, `Calendar`, `Itinerary`, `Financial Tracker`, `Travel Diary`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "and `Achievements`. Below is the model class diagram for the itinerary feature:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ".Model Diagram of the Itinerary feature"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "image::ItineraryModelDiagram.png[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The Model,"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "stores the Itinerary data which includes the event list which keeps track of all the events that are"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "included by the user and stores it into the storage in a JSON file."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "exposes an unmodifiable ObservableList\u003cEvent\u003e that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "does not depend on any of the other three components, UI, logic and storage which are common through all the features"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "throughout TravEzy."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "A plausible extension to the itinerary model is give users the ability to *tag* each of their events based"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "on different priority."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Alternative implementation to the proposed extension:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* Use javaFX drop down menu to only users to tag based on priority: +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "PROS: Can use tagging as a search condition and easier for storage / maintenance purposes. +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "CONS: Limiting the users to only a certain set of taggings."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* Allow user to type in tagging during the add command template: +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    add title/[title] date/[date] time/[time] l/[location] d/[description]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "PROS: Allows the user to put in any tag they want to allow for more variety. Search function is still"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "applicable for tags but users would need to know the specific tag they used for that particular event. +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "CONS: Harder to maintain the individual tags in the storage since there could be a lot of tags that"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "are being defined by the user."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003d\u003d\u003d\u003d Itinerary search command"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The search command for specified events in the event list is facilitated by the `Itinerary` class which contains"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "an event list and keep track of the events that the user has inputted into TravEzy. There are several search conditions"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "available for the users to search from based on the different class attributes that form the `Event` class:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* search title/[title]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* search date/[date]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* search time/[time]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* search l/[location]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* search d/[description]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Given below is the _sequence diagram_ of how the Itinerary feature interacts with TravEzy when the search command is"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "being called."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ".Sequence Diagram of the Search Command"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "image::ItinerarySearchCommand.png[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The lifeline for SearchCommandParser and SearchEventDescriptor should end at the destroy marker (X) but due to a"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The search command is implement as follows, upon giving the command by the user in the text UI, the command"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "will be channeled to the `Logic` class where it identifies it as a itinerary command and passes it to the `ItineraryParser`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "class."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The `Itinerary Parser` passes through the command into a switch case block and identifies this as a `SearchCommand`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "This will create a new `SearchCommandParser` which will then accept the arguments from the user\u0027s input and parse the"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "arguments of the command."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Once the arguments are parsed and considered as valid, the `SearchCommandParser` will generate a new `SearchCommand`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The `SearchCommand` will in turn create a \"pseudo-event\" known as the `SearchEventDescriptor` which is an event"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "which only contains attributes with the search condition while the rest of it\u0027s attribute will be placed as null."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "This `SearchEventDescriptor` will in turn be returned and used in the `Predicate` field as the event in comparison."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The `filterEvents(e)` method will be called with `e` being the `SearchEventDescriptor` that is being generated. Events"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "that are currently in the event list will be filtered accordingly based on whether it matches the attributes in the"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "`SearchEventDescriptor`. Finally, the `filteredList` will be generated and returned."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The aforementioned steps could be easily summarized using an activity diagram when the user executes a"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "search command in the itinerary:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ".Activity Diagram of the Search Command"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "image::ItinerarySearchActivityDiagram.png[]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The following search command is implemented in the series of steps as described in the activity diagram as shown above"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "is to ensure that validation of the arguments given in the user command first before the SearchCommand is generated."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Once the arguments from the user input has been verified, the \"pseudo-event\" created can help to proof-read whether"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "users have given any conditions for the search. It will return false if all the attributes in the `SearchEventDescriptor`."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Running through all the events in the event list will ensure that all the events are being considered in the filtering process."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "This sequential approach in implementing the `SearchCommand` will ensure that all the current events are being looked through"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "based on the specific search condition and only the filtered list will be given as a result."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003d\u003d\u003d Financial Tracker"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The financial tracker feature in TravEzy allows users to keep track of their financial expenses with appropriate categorized expenditure and country."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Current, the itinerary feature supports the basic commands of add, delete and summary."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ".Architecture Diagram of the Financial Tracker feature"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "image::FinancialTrackerDiagram.png[]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The Architecture Diagram given above explains the high-level design of the financial tracker feature."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Inputs given by the user are channeled from the text UI and parsed by Command Parser before different commands are formed which generates"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "the model and updates the FinancialTracker object which contains the expense list."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The text UI, log centre and storage all stem from the common package of the main TravEzy application."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "However, in the parser package of itinerary, it contains various parser objects for the different command."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "This is to ensure that each command in financial tracker have only one parser validating the command."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "The GUI also collaborate with Model Class directly, which will be changed to only communicate with Logic class in later time."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".Class Diagram of the Financial Tracker feature"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "image::FinancialTrackerClassDiagram.png[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "The Model,"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "stores the `FinancialTracker` data which includes the `ExpenseList` which keeps track of all the expenses"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "that are included by the user and stores it into the storage in a JSON file."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "It exposes an unmodifiable `ObservableList\u003cExpense\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Each time a new `Country` is selected from the javafx drop down menu, an expense list will be generated for that specific country, this"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "implementation is to ease categorising and sorting."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003d\u003d\u003d Diary"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003d\u003d\u003d Address Book"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ".Model Diagram of the AddressBook feature"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "image::AddressModelClassDiagram.png[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ".Logic Diagram of the AddressBook feature"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "image::AddressLogicClassDiagram.png[]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ".Sequence Diagram for the `Delete 1` Command"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003d\u003d\u003d Achievements"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ".Model Diagram of the Achievements feature"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "image::AchievementsModelClassDiagram.png[]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ".Logic Diagram of the Achievements feature"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "image::AchievementsLogicClassDiagram.png[]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ".Sequence Diagram of the Statistics Model"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "image::AchievementsPage.png[]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* loves to travel frequently"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* travels to many different countries"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* has a need to manage a significant number of contacts from different countries"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* has a need to keep track of travelling expenses"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* lends and pay money to different contacts regularly"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* loves to plan in advance"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* has a need to keep track of different commitments in school"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* love to record his travel itinerary"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* achievements driven"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* has a need to know his/her current progress in completing the achievement"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* motivated to finish his/her accomplishments"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* loves to keep a memory of his/her travels"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* has a need to write down a diary of his/her travel experiences"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* track statistics on inputs (Finances / event and diary entries)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* hates cluttering phone with multiple apps"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "*Value proposition*: All-in-one travel manager for planning, scheduling, tracking for a user that loves typing commands."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* * *` | traveller | record down all my travelling stories. |  my sweet memories stored"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* * *` | student who likes travelling | record all my spendings on my trip | keep track of my budgets"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* * *` | NUS student with unusually high workload | have a calendar planner | plan ahead"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* * *` | student who needs friends and likes to travel desperately |manage my travel itineraries |keep track of my travel schedule during travels"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* * *` | undisciplined individual | keep track of my expenses | limit the accumulation of credit card debts"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* * *` | competitive individual|keep track of my own progress towards different achievements | challenge myself"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* *` | student with many friends abroad |have an Address Book | contact my friends who are living in that area"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* *` | student who needs friends and likes to travel desperately | have an Address Book | keep my friends’ contact categorized with different countries"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* *` | NUS student with unusually high workload | detect conflicts in my calendar schedule | know when I\u0027m free to travel around the world"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* *` | undisciplined individual | keep track of my expenses | limit the accumulation of credit card debts"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` | user | hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "|`*` |monolingual individual|have a language translator|communicate with others easily"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "|`*` |user|change my application into different themes|make my application interface look better"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "(For all use cases below, the *System* is `TravEzy` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Use case:  Itinerary"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Software System : TravEzy Travelling Diary"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Use Case: UC01 - Add an event into itinerary page"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    . A new event will be added to the itinerary page upon successful command"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    1. User requests to list events"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2. TravEzy shows a list of events in the itinerary page"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3. User type in the event to be added to the itinerary"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    4. TravEzy add the event in sequential order"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2a. The list is empty."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3a. No event name is given."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        3a1. TravEzy shows an error message."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Software System : TravEzy Travelling Diary"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Use Case: UC02 - Delete an event into itinerary page"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    . Specified event will be deleted in the itinerary page upon successful command"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    . Event will not be delete if an invalid index is given"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    1. User requests to list events"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2. TravEzy shows a list of events in the itinerary page"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3. User type in the event to be added to the itinerary"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    4. TravEzy add the event in sequential order"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2a. The list is empty."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3a. The given index is invalid"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        3a1. TravEzy shows an error message."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Software System : TravEzy Travelling Diary"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Use Case: UC03 - Accessing an event"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Precondition: Specified event is contain in the list"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    . Highlights the specific event to be edited"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    1. User requests to list events"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2. TravEzy shows a list of events in the itinerary page"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3. User type in the event to be accessed"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    4. TravEzy highlights the specified event to be edited"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2a. The list is empty."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3a. The given index is invalid"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        3a1. TravEzy shows an error message."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Software System : TravEzy Travelling Diary"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Use Case: UC04 - Add details to event"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Precondition: User must access to an event (UC03)"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    . Update highlighted event with the details"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    1. User requests to edit location / time / description for highlighted event"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2. TravEzy prompt for the location / timing / description to be added"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3. User inserts the necessary description"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    4. TravEzy display the changes for that event"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3a. The given location / timing / description is invalid"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        3a1. TravEzy shows an error message."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    *a. At any time, User chooses to cancel adding details to the event and exit"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        *a1. TravEzy requests to confirm the exit of event"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        *a2. User confirms the exit"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        *a3. TravEzy un-highlights the event selected"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "----"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Software System : TravEzy Travelling Diary"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Use Case: UC05 - Searching for an event"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Precondition: User must add some event into the itinerary (UC01). So that these events can be searched based on the condition given."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    . A new event list with the events that met the search conditions."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    1. User requests to search for event."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    2. TravEzy display the events which matchese the search description."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    1a. The given search command did not indicate any condition (Title / Date / Time / Location / Description)."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        1a1. TravEzy shows an error message prompting with the correct format."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "----"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "\u003d\u003d\u003d Use case: Financial Tracker"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "----"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Software System : TravEzy Travelling Financial Tracker"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Use Case: UCFT01 - Add an expense into financial tracker page"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    . A new expense will be added to the financial tracker page upon successful command"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    1. User type in the expense to be added to the financial tracker"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    2. TravEzy add the expense in order by date and time"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    1a. Command format is incorrect."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        1a1. TravEzy shows an error message, prompt user with proper command format."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "----"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Use case: Calendar"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Use case: Diary"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "honhaochen": 11,
      "pohlinwei": 248,
      "tishyakhanna97": 1,
      "bjhoohaha": 72,
      "-": 404,
      "ngzhaoming": 113
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d TravEzy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ":repoURL: https://ay1920s1-cs2103t-t17-2.github.io/main/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "By: `Team SE-EDU`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Team: *T17-2*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "*Content*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Welcome and thank you for choosing The Traveller Diary (TTD) to store precious memories of your overseas trips. This travelling diary is well suited for *NUS students who are passionate about travelling across the globe* and *prefer to use a desktop app for managing their trips abroad*. If you can type fast, TTD can help you *store, customize and manage your posts effectively*. Not only that, TTD can *access your contacts with their details* done faster than traditional GUI apps. But wait, there’s more! TTD also has a built in *financial tracker to track your expenses during each trip* to ensure you spend wisely. What are you waiting for? Hop on to this user guide and we will travel to +++\u003cu\u003e+++Section 2, “Quick Start”+++\u003c/u\u003e+++ to get a copy of your TTD and get started with it. Enjoy! 😊"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d Quickstart"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". Ensure that you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ". Download the latest TravellerDiary.jar"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for your Traveller Diary."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ". Type the command in the command box and press *\u003cEnter\u003e *to execute it."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "E.g. typing *help* and pressing *\u003cEnter\u003e* will open the help window."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ". Examples commands you may try:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ".. *listContact* : List all contacts that are in your address book"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ".. *openCalendar* : Navigate and opens up the calendar page"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ".. *deleteEvent 3* : deletes the 3rd event shown in the itinerary"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ".. *exit*: exits the app"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Refer to Section 3, “Features” for details of each command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Financial Tracker"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Keep track of your travelling expenses."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addFin``    : add a new expense  +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``updateFin`` : update an existing expense +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showFin``   : show all your expenses +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteFin`` : delete an expense +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``calFin``    : calculate your total expense"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The Financial Tracker also provide extra extensions.  +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *Check which friend in your contact list owes you money* +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "You can update on which friend has previously borrowed money for you. Your personal traveller diary will then keep track of it in case you forget."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *Reminder notification when you exceed your budget* +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Afraid of over-budget? Your personal traveller diary prevents you from doing that by prompting you that you have over spent."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Friend Contact List"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Helps you to keep track of your friends’ contact information."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addCont``    : add a new friend to the contact information +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``updateCont`` : update friend information in the contact list +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showCont``   : show all friends in the contact list +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteCont`` : delete friends in the contact list +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``listCont``   : list all friends in the contact list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The friend contact list feature also provide certain extra extensions.  +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *duplicateContacts* +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The program does not allow duplicate contacts. Contacts with the same information cannot be added to the contact list. The program may display a possible warning alert when user tries to add duplicate contact information."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *tag / label* +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The program supports tagging / labelling of contacts. The user can tag a contact as ‘ close friends’ for example. This allows the user to identify different contact with similar contact information by tag / label. These tags / label can be color-coded or display icons."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *categories* +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can also categorize a particular contact into categories. This may be useful to differentiate between friends from _‘school’_ category or _‘work’ _category."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *profilePicture* +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "A user profile picture can be added into the contact list. This allow the user to customize a profile picture for a particular contact."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *stickersPack* +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "A way for the user to beautify the appearance for the contact list. _e.g. Putting a crown / tiara / emoticons / sticker pack to beautify the standard contact layout in the contact list._"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Calendar"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Gives you an overview of when you will be free to travel and recommends when will be a suitable time to travel."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "*Adding a commitment: ``addCommitment``* +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Adds commitment to indicate that you won’t be able to travel on a day or over a period of time due to commitments during the public holidays/school vacation. +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``addCommitment [date] [name] \u003cdetails of commitment\u003e``"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*Adding a public holiday: ``addHoliday``* +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a public holiday to your calendar so that you can view any upcoming public holidays easily. +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``addHoliday [date] [name of holiday]``"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "*Adding a school break: ``addSchoolBreak``* +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a school break to your calendar so that you can view when your school breaks are easily. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``addSchoolBreak [date] [name of break]`` or ``addSchoolBreak [start date] [end date] [name of break]``"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "*Adding a trip: ``addTrip``* +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Adds your trip to the calendar. Now, you can keep track of your trip with ease. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``addTrip [date] [name of trip]`` or ``addSchoolBreak [start date] [end date] [name of trip]``"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "*Checking your availability for a trip: ``check``* +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether you would be able to travel on a specified date/for a specified period of time. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``check [date]`` or ``check [start date] [end date]``"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "*Clearing all commitments for a particular date: ``clearAll``* +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all of your commitments for a particular date. +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``clearAll [date]``"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "*Editing your school break: ``editSchoolBreak``* +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Edits either the start or end date of your school break. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``editSchoolBreak [original start date] [name] [original end date] [new start date] [new end date]``"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "*Editing your commitment: ``editCommitment``* +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Edits your commitment. You may change the date and/or details of your commitment. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``editCommitment [original date] [name] \u003cnew date\u003e \u003cnew details\u003e``"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "*Removing a commitment: ``removeCommitment``* +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Removes your commitment, as specified by the name and date of your commitment. +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``removeCommitment [date] [name]``"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "*Removing a school break: ``deleteSchoolBreak``* +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Removes a school break from your calendar. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``removeSchoolBreak [date] [name]`` or ``removeSchoolBreak [start date] [end date] [name]``"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "*Removing a public holiday: ``deleteHoliday``* +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Removes a school break from your calendar. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``removeHoliday [date] [name]``"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "*Showing a monthly view of your calendar: ``show``* +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a monthly view of your calendar. If year is not specified, the current year will be used. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``show [month] \u003cyear\u003e``"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "*Suggesting a period of time to travel: ``suggest``* +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Suggests when you can travel for a specified number of days within a time frame (as determined by the start and end dates). +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Format: ``suggest [start date] [end date] [number of days]``"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The event planner feature also provides  certain extra extensions.  +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *advice* +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "This command suggests whether travelling at the stated period of time is a good idea. For instance, when exams or external commitments are around the corner, the user will be reminded of his/her responsibilities and will be asked whether he/she is sure that he/she wants to go ahead with the travelling plans."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *automaticHolidayDetector* +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Informs user of public holidays and adds them to the calendar without requiring the user to specify it."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Event Itinerary"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Helps you to plan how exactly you want to spend each hour of your trip. Each event will be numbered numerically in increasing order."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addEvent [title]``   : add a new event to your day, title no more than 50 chars +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``listEvent``          : show all the events for that day +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showEvent [index]``  : show all the events for that day +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``updateEvent [index]``: update an event in your day based on the index +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``sort [type]``        : sort events based on the type (time, tag) +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``checkTimeslot``      : checks current itinerary and shows empty time slots +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``repeatEvent [index]``: repeat the event in your day based on the index +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``doneEvent [index]``  : mark the event as done for the day +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteEvent [index]``: delete an event in your day based on the index +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``exitEvent   [index]``: exit the current event being chosen"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Customize within each event selected:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addTime``        : add the time for the event +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addDescription`` : add a description for the event +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addLocation``    : add the location of the event +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addNotes``       : add additional notes / details for the event +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addTag``         : add a tag to the event for categorization purposes +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``delete [field]`` : delete the specified field for that particular event"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The event itinerary feature also provides  certain extra extensions.  +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *repeatEvent* +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The program allows the user to repeat events such as tours or planned activities"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *tag* +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The program allows the user to tag and highlight events based on type, such as fun, educational, commute etc. This feature will also colour code the events so that the different types of events can be seen clearly on the calendar."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *archive* +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can archive events that he/she is unsure of and wants to review later."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *recommend* +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can get recommended activities to fill in gaps in the itinerary. The database for these recommended activities will be derived from the archive function."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Travel Diary with pictures"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addImage``         : add new images to the specified entry conveniently +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``appendToEntry``    : appends text to the specified entry"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``createEntry``      : creates a new entry in your diary +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteEntry``      : deletes the specified entry of your diary +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``editEntry``        : edit the specified entry of your diary +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``filterEntries``    : filters the entries by looking out for the specified expression +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``filterByTag``      : filters the entries by the specified tag +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``sortEntries``      : sorts your entries in chronological order +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``sortEntriesByTag`` : sorts your entries by tags +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``tagEntry``         : tags your entry with the specified tag(s)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The Travel Diary feature also provides  certain extra extensions.  +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *memories* +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Reminds the user of entries s/he made a year ago."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *milestones* +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Congratulates the user when s/he met certain milestones (travelling to a continent that s/he has not previously visited, visiting one of the seven wonders of the world, etc.)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d Additional Features (Coming in V2.0)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d TRIVAGO, Price comparison"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Helps to compare the prices between two particular goods or services. Can be used to compare prices of lodging,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addData``     : add a new data to be used for price comparison +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showData``    : show the prices for a selected data +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteData``  : delete data used for price comparison +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``compareData`` : compare prices between two data +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``reviewData``  : review the previous few comparisons that user did +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``listData``    : list out all the data that user has inputted into TTD"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The friend contact list feature also provide certain extra extensions.  +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *setConversionRates* +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Compare prices based on different countries’ currency and exchange rates. Allow user to also calculate the prices of goods using their home currency."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *tag* +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The program allows users to classify each data into different categories, such as AirBnB, hotels, restaurants, shopping centre goods."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *undo* +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Allow the user to undo their previous comparison or action should they delete the wrong data using function deleteData."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *sort* +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Based on the different taggings given by the user, it will help to sort the data based on the total price of each data."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Travel Recommendations"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Gives travel suggestions to the user."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``setDates``    : set the dates for your proposed trip +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``setPrice``    : set your price range +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``setType``     : set the type of trip (Fun, educational etc) +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``generate``    : generate recommendations from stored diaries"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The travel recommendations feature also provides  certain extra extensions. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *downloadTrips* +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can download pre planned trips and locations from online sources such as AirB\u0026B Top 10 travel locations."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *saveSources* +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can store preferred sources for trips, such as travel websites or personal blogs."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d NUS trips"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Helps you get recommendations from NUS societies."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``loadTrips``   : download trips from NUS societies +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteTrips`` : delete certain NUS trips +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showTrip``    : show your whole trip in a calendar view +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``getSoc``      : get societies from NUS which organise trips +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteSoc``   : delete certain societies +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``selectSoc``   : select a certain society to load trips"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The NUS trips feature also provides  certain extra extensions.  +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *favourite* +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can choose preferred societies (NUS mountaineers, CIP clubs)  to favourite."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *filter* +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can filter societies based on preferences such as cost, duration and type."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Engaging Notifications"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "New notifications will be used to alert the user. Notifications can be used to alert the user in the following circumstances:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "* User set a manual reminder"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "* Incomplete form _perhaps in the itinerary_"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "* Upcoming trip"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "* Upcoming event in the calendar"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *reminders* +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can set a reminder on the calendar. When the reminder is due, there will be a new notification from the program."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *colourCode* +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The notification can have different color and design to differentiate between different types of notification. _Red _used to indicate danger while _Yellow _used to indicate warning, _Blue _for general notifications etc."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *growAndShrink* +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Grow and shrink animation for notifications."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *music* +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "A music will be played when the notification appears. Different music can be used for different notification."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *sendEmailNotification* +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "An email notification will be sent to the user when the notification appears. _Similar to LumiNUS sending user confirmation email when the post lecture survey is completed_"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *customizeNotification* +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can create their own custom notification. Add colours, emoticons and use different notification styling for different alerts."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *popupAlerts* +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Reminders and notifications can be displayed in the form of popup alert to alert the user if something went wrong."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *snooze* +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "After setting the notification, the user can snooze the notification or reminder for the user to be reminded again."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*Q:* How do I backup my data onto cloud storage? +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*A:* Locate The Traveller Diary folder in your local drive and compact it into a zip file before uploading it onto a cloud storage online."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*Q:* How do I transfer my data onto another computer? +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*A:* Install The Traveller Diary in the other computer and overwrite the empty data file it creates with during start up with the file that contains the data of your previous TTD. Alternatively, you can store it in a cloud storage it first before retrieving it and transferring it into your new computer."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "*Q:* Can I change the theme of the application? I prefer to work with a night theme interface. +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "*A:* You can go to ``settings → themes → night mode`` to toggle between day and night mode."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*Q:* Who can view my travel posts in my TTD? +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "*A:* As TTD is a single user application, it is not opened to the public, and unable to be viewed by others. Hence, it is called “diary” for a reason, which stores discrete entries reporting events that happened throughout the day. Users can however, showcase their application in front of their friends to show off their overseas trips. +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*Q:* Is it possible to connect to social media such as Facebook, Snapchat, Instagram? +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*A:* Currently, it is not possible to connect to social media using TTD. However, we will consider implementing this feature in the future! Stay tuned for that! 😉"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "*Q:* Is there any in-app purchase for this application? +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "*A:* NO there isn’t. TTD is created from a non-profit organization and we are not here to milk any of your gold coins! It is absolutely free! It cost nothing, zilch, nada, 零, nil, kosong. So what are you waiting for get TTD today!"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*Q:* I’m having difficulties uploading the pictures onto the travel diary. +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*A:* The Traveller Diary only allow uploads of pictures that are in jpg or png. Unfortunately, we do not support gif. Do ensure that your pictures are below 25MB with the dimensions no bigger than 1920px x 1080px."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*Q:* Who can I contact should there be a bug or feedback that I would like to share? +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*A:* Feel free to send an email to the developer team: mailto:thetravellerdiary@gmail.com[thetravellerdiary@gmail.com] and we will access to your queries within three working days. We also value your feedback and will use it to improve TTD. Thank you and looking forward to serving you better!"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Here is a summary for the list of features available:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Financial Tracker: +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addFin``    : add a new expense +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``updateFin`` : update an existing expense +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showFin``   : show all your expenses +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteFin`` : delete an expense +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``calFin``    : calculate your total expense"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Friend Contact List: +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addCont``    : add a new friend to the contact information +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``updateCont`` : update friend information in the contact list +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showCont``   : show all friends in the contact list +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteCont`` : delete friends in the contact list +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``listCont``   : list all friends in the contact list"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Calendar (Event Planner): +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addCommitment``      : adds commitment to indicate that you won’t be able to travel on a day or over a period of time due to commitments during the public holidays/school vacation +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addCommitments``     : similar to the above, but we can add multiple commitments at once +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addPublicHoliday``   : adds a public holiday from your calendar +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addSchoolBreak``     : adds the start and end date of your school vacation +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addTrip``             :  adds your trip to the calendar +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``checkAvailability``   :  checks whether you are available for the stated period of time +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``clearCommitments``    :  clears all commitments for the stated period of time +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteCommitment``    :  deletes commitment from your calendar +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteSchoolBreak``   :  deletes school break from your calendar +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deletePublicHoliday`` :  deletes public holiday from your calendar +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``editBreak``           : edits the start and/or end date of your school vacation  +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``editCommitment``      : edits the duration of your commitment +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showAvailability``    : shows you when you have 3 or more “free” days in the given period of time which you have specified +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``suggestDate``         : suggests when you can travel for numDays"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Event Itinerary: +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addEvent``    : add a new event to your day +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``updateEvent`` : update an event in your day +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showEvent``   : show more information about your day +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteEvent`` : delete an event from your day +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``compareEvent``: place multiple events in the same time slot for ease of comparison +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showTrip``    : show your whole trip in a calendar view"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "TRIVAGO, price comparison: +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addData``     : add a new data to be used for price comparison +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showData``    : show the prices for a selected data +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteData``  : delete data used for price comparison +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``compareData`` : compare prices between two data +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``reviewData``  : review the previous few comparisons that user did +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``listData``    : list out all the data that user has inputted into TTD"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Travel Recommendations: +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``setDates``    : set the dates for your proposed trip +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``setPrice``    : set your price range +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``setType``     : set the type of trip (Fun, educational etc) +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``generate``    : generate recommendations from stored diaries"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "NUS trips: +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``loadTrips``   : download trips from NUS societies +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteTrips`` : delete certain NUS trips +"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showTrip``    : show your whole trip in a calendar view +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``getSoc``      : get societies from NUS which organise trips +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteSoc``   : delete certain societies +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``selectSoc``   : select a certain society to load trips"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Travel Diary with pictures: +"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addImage``         : add new images to the specified entry conveniently +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``appendToEntry``    : appends text to the specified entry +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``createEntry``      : creates a new entry in your diary +"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteEntry``      : deletes the specified entry of your diary +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``editEntry``        : edit the specified entry of your diary +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``filterEntries``    : filters the entries by looking out for the specified expression +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``filterByTag``      : filters the entries by the specified tag +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``sortEntries``      : sorts your entries in chronological order +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``sortEntriesByTag`` : sorts your entries by tags +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``tagEntry``         : tags your entry with the specified tag(s)"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 181,
      "-": 90,
      "ngzhaoming": 270
    }
  },
  {
    "path": "docs/diagrams/AchievementsLogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Achievements {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Logic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "interface AchievementsLogic \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AchievementsLogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Commands {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AchievementsParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface Supplier \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LOGIC\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic ..\u003e AchievementsLogic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ACHIEVEMENTS\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AchievementsLogic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogic .up.\u003e Logic"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AchievementsLogicManager"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogicManager .up.|\u003e Achievements.Logic.AchievementsLogic"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogicManager .left.\u003e Supplier"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogicManager .up.\u003e Logic"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogicManager *-down-\u003e \"1\" Achievements.Logic.Parser.AchievementsParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogicManager o-right-\u003e \"1\" Achievements.Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AchievementsParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.Parser.AchievementsParser .up.\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.Parser.AchievementsParser .down.\u003e Achievements.Logic.Parser.XYZCommandParser :creates \u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027XYZCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.Commands.XYZCommand -up-|\u003e Logic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027XYZCommandParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.Parser.XYZCommandParser .up.|\u003e Logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.Parser.XYZCommandParser .left.\u003e Achievements.Logic.Commands.XYZCommand :creates \u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LAYOUT\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027Logic.LogicManager .[hidden]left.\u003e Storage"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027Logic.LogicManager .[hidden]down.\u003e Achievements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027Logic.LogicManager .[hidden]down.\u003e Logic.Commands"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027Logic.Commands.Command .[hidden]down.\u003e Achievements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027Logic.Commands .[hidden]left.\u003e Logic.Parser"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027Achievements .left.\u003e Address"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 72
    }
  },
  {
    "path": "docs/diagrams/AchievementsModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Address {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Person {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Achievements {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface StatisticsModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class StatisticsModelManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface Supplier \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "HiddenOutside ..\u003e Achievements.Model.StatisticsModel :supplies\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ACHIEVEMENTS\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027StatisticsModel Interface"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Model.StatisticsModelManager .up.|\u003e Achievements.Model.StatisticsModel"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027StatisticsModel Manager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Model.StatisticsModelManager o--\u003e ObservableList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Model.StatisticsModelManager --\u003e \"*\" Address.Model.Person.Person"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 38
    }
  },
  {
    "path": "docs/diagrams/AchievementsPage.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "participant \":AchievementsLogicManager\" as AchievementsLogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "participant \":Supplier\" as Supplier LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "participant \":StatisticsModelManager\" as StatisticsModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "participant \":AddressBookModelManager\" as AddressBookModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "[-\u003e AchievementsLogicManager : getTotalPersons()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "activate AchievementsLogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "AchievementsLogicManager -\u003e Supplier : get()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "activate Supplier"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "create StatisticsModelManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Supplier -\u003e StatisticsModelManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "activate StatisticsModelManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "create AddressBookModelManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "StatisticsModelManager -\u003e AddressBookModelManager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "activate AddressBookModelManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "AddressBookModelManager -\u003e AddressBookModelManager : getFiltered()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "activate AddressBookModelManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "return FilteredPersonList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "return FilteredPersonList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "StatisticsModelManager -\u003e StatisticsModelManager : getTotalPersons()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "activate StatisticsModelManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "return totalPersons"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "return totalPersons"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "return totalPersons"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "[\u003c- AchievementsLogicManager"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "deactivate AchievementsLogicManager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 41
    }
  },
  {
    "path": "docs/diagrams/AddressLogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Address {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface AddressBookLogic \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AddressBookLogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Commands {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AddressBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LOGIC\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic..\u003e Address.Logic.AddressBookLogic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ADDRESS\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AddressBookLogic"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogic .down.\u003e Storage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogic .left.\u003e ObservableList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogic .right.\u003e Address.Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AddressBookLogicManager"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogicManager .up.|\u003e Address.Logic.AddressBookLogic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogicManager .up.\u003e Logic"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogicManager o--\u003e \"1\" Storage"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogicManager o--\u003e \"1\" Address.Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogicManager *-down-\u003e \"1\" Address.Logic.Parser.AddressBookParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027XYZCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Commands.XYZCommand -up-|\u003e Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Parser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.AddressBookParser .down.\u003e Logic"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.AddressBookParser .down.\u003e Address.Logic.Parser.XYZCommandParser :creates \u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027XYZCommandParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.XYZCommandParser .left.\u003e Address.Logic.Commands.XYZCommand :creates \u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.XYZCommandParser .up.\u003e Logic"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.XYZCommandParser ..\u003e Address.Logic.Parser.CliSyntax"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027CliSyntax"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.CliSyntax .up.\u003e Logic"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LAYOUT\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "HiddenOutside .[hidden]down.\u003e Storage"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "HiddenOutside .[hidden]down.\u003e Logic"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic .[hidden]left.\u003e Storage"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic .[hidden]down.\u003e Address"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027Logic .[hidden]down.\u003e Logic"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027Logic.Commands.Command .[hidden]down.\u003e Address"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027Logic.Commands .[hidden]left.\u003e Address"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 83
    }
  },
  {
    "path": "docs/diagrams/AddressModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Address {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Tag {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Country {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class Country"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface AddressBookModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AddressBookModelManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "HiddenOutside ..\u003e Model.Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LAYOUT\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager .[hidden]down.\u003e Address"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027MODEL\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager .up.|\u003e Model.Model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Model Interface"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.Model .down.\u003e Address.Model.AddressBookModel :gets \u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ModelManager Constructor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027 composition or aggregation?"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager o--\u003e \"1\" Address.Model.AddressBookModel"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027UserPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefs .up.|\u003e Model.ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ADDRESS\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AddressBookModel Interface"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBookModel .right.\u003e ObservableList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBookModelManager .up.|\u003e Address.Model.AddressBookModel"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AddressBookModelManager Constructor"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBookModelManager ..\u003e Address.Model.ReadOnlyAddressBook"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBookModelManager ..\u003e  Model.ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBookModelManager --\u003e\"1\" Address.Model.Person.Person : filtered list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ReadOnlyAddressBook"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.ReadOnlyAddressBook ..\u003e Address.Model.AddressBook"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AddressBook"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBook *-- \"1\" Address.Model.Person.UniquePersonList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Person"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.UniquePersonList o--\u003e \"*\" Address.Model.Person.Person"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e Address.Model.Person.Name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e Address.Model.Person.Phone"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e Address.Model.Person.Email"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e Address.Model.Person.Address"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e Address.Model.Person.Remark"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e Address.Model.Country.Country"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e \"*\" Address.Model.Tag.Tag"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 86
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Participant \":Logic\" as addressBookLogic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Participant \":Model\" as addressBookModel MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "ui -[UI_COLOR]\u003e addressBookLogic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "activate addressBookLogic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "addressBookLogic -[LOGIC_COLOR]\u003e addressBookModel : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "activate addressBookModel MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "addressBookModel -[MODEL_COLOR]-\u003e addressBookLogic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "deactivate addressBookModel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "addressBookLogic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "storage --[STORAGE_COLOR]\u003e addressBookLogic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "addressBookLogic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "deactivate addressBookLogic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 12,
      "-": 25
    }
  },
  {
    "path": "docs/diagrams/BetterAddressBookModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Person o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Person *--\u003e Remark"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Person *--\u003e Country"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 23
    }
  },
  {
    "path": "docs/diagrams/BetterLogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Commands {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Achievements {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Logic {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "interface AchievementsLogic \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Address {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Logic {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface AddressBookLogic \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Calendar {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Parser {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryFeature {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryParser {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace FinancialTracker {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Parser {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Itinerary {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Parser {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LOGIC\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "HiddenOutside ..\u003e Logic.Logic"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Logic"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Logic .left.\u003e Storage"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Logic .down.\u003e Address.Logic.AddressBookLogic :gets \u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Logic .down.\u003e Achievements.Logic.AchievementsLogic :gets \u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LogicManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager .up.|\u003e Logic.Logic"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager ..\u003e Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager o-right-\u003e \"1\" Storage"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager o-right-\u003e \"1\" Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager *-down-\u003e \"1\" Address.Logic.AddressBookLogic"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager *-down-\u003e \"1\" Achievements.Logic.AchievementsLogic"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.Command .up.\u003e Logic.Commands.CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027XYZ Command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand -up-|\u003e Logic.Commands.Command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Parser"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Parser.XYZCommandParser .up.|\u003e Logic.Parser.Parser"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ParserUtil"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Parser.ParserUtil .down.\u003eLogic.Parser.Prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ArgumentTokenizer"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Parser.ArgumentTokenizer .left.\u003e Logic.Parser.ArgumentMultimap"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Parser.ArgumentTokenizer .down.\u003e Logic.Parser.Prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ACHIEVEMENTS\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AchievementsLogic"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogic .up.\u003e Logic.Commands.CommandResult"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AchievementsLogicManager"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogicManager .up.|\u003e Achievements.Logic.AchievementsLogic"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ADDRESS\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AddressBookLogic"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogic .up.\u003e Storage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogic .up.\u003e Logic.Commands.CommandResult"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogic .right.\u003e ObservableList"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogic .right.\u003e Address.Model"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AddressBookLogicManager"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogicManager .up.|\u003e Address.Logic.AddressBookLogic"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LAYOUT\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager .[hidden]left.\u003e Storage"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager .[hidden]down.\u003e Achievements"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager .[hidden]down.\u003e Address"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager .[hidden]down.\u003e Logic.Commands"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand .[hidden]down.\u003e Achievements"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand .[hidden]down.\u003e Address"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand .[hidden]down.\u003e Calendar"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand .[hidden]down.\u003e diaryFeature"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand .[hidden]down.\u003e FinancialTracker"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand .[hidden]down.\u003e Itinerary"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands .[hidden]left.\u003e Logic.Parser"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 139
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface UserPrefsModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class UserPrefsModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Achievements {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface StatisticsModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Address {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface AddressBookModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Calendar {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryFeature {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryModel {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace FinancialTracker {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Itinerary {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "HiddenOutside ..\u003e Model.Model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface Supplier \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LAYOUT\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager .[hidden]down.|\u003e Achievements"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager .[hidden]down.|\u003e Address"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027MODEL\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager .up.|\u003e Model.Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Model Interface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.Model .down.\u003e Address.Model.AddressBookModel :gets \u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.Model .down.\u003e Achievements.Model.StatisticsModel :supplies \u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.Model .down.\u003e Model.UserPrefsModel :gets \u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.Model .right.\u003eSupplier"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ModelManager Constructor"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027 composition or aggregation?"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager o--\u003e \"1\" Address.Model.AddressBookModel"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager o--\u003e \"1\" Model.UserPrefsModel"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager ..\u003e \"1\" Achievements.Model.StatisticsModel"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027UserPrefsModelManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager .up.|\u003e Model.UserPrefsModel"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027UserPrefs"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefs .up.|\u003e Model.ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ADDRESS\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBookModel .right.\u003e ObservableList"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027STATISTICS\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Model.StatisticsModel .right.\u003e ObservableList"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LAYOUT\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager -[hidden]down-\u003e Model.UserPrefsModel"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eAddress"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eAchievements"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eCalendar"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003ediaryFeature"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eFinancialTracker"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eItinerary"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address -down[hidden]-\u003e Achievements"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 94,
      "-": 10
    }
  },
  {
    "path": "docs/diagrams/FinancialTrackerClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Class Storage"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Model --\u003e \"1\" FinancialTracker"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "namespace Expense {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Class Expense"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Expense *-up-\u003e Amount"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Expense *-up-\u003e Description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Expense *-up-\u003e Type"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "FinancialTracker -left-\u003e \"*\" ExpenseList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "FinancialTracker .left.\u003e ObservableList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "ExpenseList -down---\u003e \"*\" Model.Expense.Expense"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "ExpenseList -left-\u003e \"1\" Model.ObservableList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "ExpenseList *-up--\u003e \"1\" Country"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Model.Model --\u003e Storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 30
    }
  },
  {
    "path": "docs/diagrams/FinancialTrackerDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "!include \u003coffice/Concepts/globe_internet\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "!include \u003coffice/Concepts/documents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "!include \u003coffice/Users/user\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "!include \u003coffice/Users/administrator\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Package \" \"\u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    Class GUI UI_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    Class TextUI UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    Class \"Command Parser\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    Class Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    Class Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    Class FinancialTracker MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    Class Commons LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    Class \"Log Center\" as Logs UI_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    Class \"Test Driver\\nJunit Test\" as Test MODEL_COLOR_T4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Class \"\u003c$user\u003e\\nUser\" as User MODEL_COLOR_T2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Class \"\u003c$administrator\u003e\\nDeveloper\" as Developer MODEL_COLOR_T2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Class \"\u003c$documents\u003e\\nJson File\" as File UI_COLOR_T1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "GUI -\u003e Logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "GUI -right-\u003e Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Logic -down-\u003e Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "TextUI -up-\u003e GUI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "TextUI .up.\u003e Commons"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Logic .up.\u003e Commons"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Storage .up.\u003e Commons"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Logs -right- Commons"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Storage .right.\u003eFile"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "User -right-\u003e GUI"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "User \u003c--\u003e TextUI"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Test -up-\u003e TextUI"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Developer -up[hidden]-\u003e User"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Developer \u003c-right-\u003e Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Model -down-\u003e FinancialTracker"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Model -right-\u003e Storage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 45
    }
  },
  {
    "path": "docs/diagrams/ItineraryDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "!include \u003coffice/Concepts/globe_internet\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "!include \u003coffice/Concepts/documents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "!include \u003coffice/Users/user\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "!include \u003coffice/Users/administrator\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Package \" \"\u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class GUI UI_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class TextUI UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Calendar UI_COLOR_T2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class \"Logic\\n(Command Parser)\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Itinerary MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Commons LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class \"Log Center\" as Logs UI_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class \"Test Driver\\nJunit Test\" as Test MODEL_COLOR_T4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class \"\u003c$user\u003e\\nUser\" as User MODEL_COLOR_T2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class \"\u003c$administrator\u003e\\nDeveloper\" as Developer MODEL_COLOR_T2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class \"\u003c$documents\u003e\\nJson File\" as File UI_COLOR_T1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "GUI -\u003e Logic"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "GUI -right-\u003e Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "GUI -up-\u003e Calendar"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Logic -right-\u003e Storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Logic -down-\u003e Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "TextUI -up-\u003e GUI"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "TextUI .up.\u003e Commons"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Logic .up.\u003e Commons"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Storage .up.\u003e Commons"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Logs -right- Commons"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Storage .right.\u003eFile"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "User -right-\u003e GUI"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "User \u003c--\u003e TextUI"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Test -up-\u003e TextUI"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Developer -up[hidden]-\u003e User"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Developer \u003c-right-\u003e Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Model -down-\u003e Itinerary"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 47
    }
  },
  {
    "path": "docs/diagrams/ItineraryModelDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class Predicate"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class EventList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Package Event {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class Event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class Title"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class Time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class Location"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Model --\u003e \"1\" Event : filtered list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Model --\u003e \"1\" Predicate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Predicate --\u003e Event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Itinerary *--\u003e \"1\" EventList : Generates \u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "EventList o--\u003e \"*\" Event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Event *--\u003e\"1\" Title"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Event *--\u003e\"1\" Date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Event *--\u003e\"1\" Time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Event *--\u003e\"1\" Location"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Event *--\u003e\"1\" Description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 36
    }
  },
  {
    "path": "docs/diagrams/ItinerarySearchActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ":Search command creates new \\n      SearchEventDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ":Execute filterEvents method;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "repeat"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "if () then ([Event matches attribute in \\nSearchEventDescriptor])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    :Put Event into new filtered list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    :Save EventList to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    ItineraryeventList.txt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "repeat while () is (more event?)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ":Return newly filtered list as result;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "stop"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 24
    }
  },
  {
    "path": "docs/diagrams/ItinerarySearchCommand.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "participant \":ItineraryParser\" as ItineraryParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "participant \":SearchCommandParser\" as SearchCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "participant \":SearchCommand\" as SearchCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "participant \"e:SearchEventDescriptor\" as Event LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "[-\u003e LogicManager : execute(\\n\"search title/Hello\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "LogicManager -\u003e ItineraryParser : parseCommand(\\n\"search\\ntitle/Hello\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "activate ItineraryParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "create SearchCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "ItineraryParser -\u003e SearchCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "activate SearchCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "SearchCommandParser --\u003e ItineraryParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "deactivate SearchCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "ItineraryParser -\u003e SearchCommandParser : parse(\"title/Hello\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "activate SearchCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "create SearchCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "SearchCommandParser -\u003e SearchCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "activate SearchCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "create Event"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "SearchCommand -\u003e Event"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "activate Event"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Event --\u003e SearchCommand : e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "deactivate Event"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "SearchCommand -[hidden]-\u003e Event"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "destroy Event"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "SearchCommand --\u003e SearchCommandParser : e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "deactivate SearchCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "SearchCommandParser --\u003e ItineraryParser : e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "deactivate SearchCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "SearchCommandParser -[hidden]-\u003e ItineraryParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "ItineraryParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "destroy SearchCommandParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "deactivate ItineraryParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "LogicManager -\u003e SearchCommand : execute()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "activate SearchCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "SearchCommand -\u003e Model : filterEvents(e)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Model --\u003e SearchCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "SearchCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "CommandResult --\u003e SearchCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "SearchCommand --\u003e LogicManager : filteredList"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "deactivate SearchCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 80
    }
  },
  {
    "path": "docs/diagrams/ItineraryUseCaseDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u0027!include ../../plantuml-styles/plantuml-ae.iuml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "skinparam ArrowFontStyle normal"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "skinparam ArrowFontName Courier"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "skinparam ArrowFontSize 10"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "title Use Case diagram for itinerary\\n"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "actor User"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "actor :Summary\\nSystem: as Summary"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "actor Calendar"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "note top of Calendar #white"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\"The calendar and itinerary work in tandem,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "with the calendar giving a visual representation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "of the events in the itinerary event list.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "end note"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "rectangle \"Event List in itinerary\" {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  Calendar -left- (Update visually upon inputting event)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  User -right- (Add event)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  User -right- (Delete event)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  User -right- (Edit event)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  User -right- (Search event)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  Summary -right- (Calculate stats)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  (Itinerary events in event list\\nstatistics to user) \u003c. (Calculate stats): include"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  (Add event) -left- (Update visually upon inputting event)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  (Delete event) -left- (Update visually upon inputting event)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  (Edit event) -left- (Update visually upon inputting event)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  (Calculate stats) -[hidden]up- (Search event)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  (Delete event) -[hidden]up- (Add event)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  (Edit event) -[hidden]up- (Delete event)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  (Search event) -[hidden]up- (Edit event)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Calendar -[hidden]down-\u003e User"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Summary -[hidden]up-\u003e User"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u0027!include ../../plantuml-styles/ae-copyright-footer.txt"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 48
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Commands {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Achievements {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Logic {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "interface AchievementsLogic \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AchievementsLogicManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Commands {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Parser {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AchievementsParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Address {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Logic {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface AddressBookLogic \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AddressBookLogicManager"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Commands {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Parser {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AddressBookParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Calendar {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Parser {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryFeature {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryParser {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace FinancialTracker {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Parser {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Itinerary {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Parser {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface Supplier \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LOGIC\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "HiddenOutside ..\u003e Logic.Logic"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Logic"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Logic .left.\u003e Storage"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Logic .down.\u003e Address.Logic.AddressBookLogic :gets \u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Logic .down.\u003e Achievements.Logic.AchievementsLogic :gets \u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LogicManager"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager .up.|\u003e Logic.Logic"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager ..\u003e Model"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager o-right-\u003e \"1\" Storage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager o-right-\u003e \"1\" Model"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager *-down-\u003e \"1\" Address.Logic.AddressBookLogic"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager *-down-\u003e \"1\" Achievements.Logic.AchievementsLogic"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.Command .up.\u003e Logic.Commands.CommandResult"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027XYZ Command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand -up-|\u003e Logic.Commands.Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Parser"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Parser.XYZCommandParser .up.|\u003e Logic.Parser.Parser"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ParserUtil"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Parser.ParserUtil .down.\u003eLogic.Parser.Prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ArgumentTokenizer"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Parser.ArgumentTokenizer .left.\u003e Logic.Parser.ArgumentMultimap"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Parser.ArgumentTokenizer .down.\u003e Logic.Parser.Prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ADDRESS\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AddressBookLogic"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogic .up.\u003e Storage"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogic .up.\u003e Logic.Commands.CommandResult"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogic .right.\u003e ObservableList"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogic .right.\u003e Address.Model"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AddressBookLogicManager"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogicManager .up.|\u003e Address.Logic.AddressBookLogic"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogicManager .up.\u003e Logic.Commands.CommandResult"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogicManager .up.\u003e Logic.Commands.Command :executes \u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogicManager o--\u003e \"1\" Storage"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogicManager o--\u003e \"1\" Address.Model"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.AddressBookLogicManager *-down-\u003e \"1\" Address.Logic.Parser.AddressBookParser"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027XYZCommand"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Commands.XYZCommand -up-|\u003e Logic.Commands.Command"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Parser"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.AddressBookParser .down.\u003e Logic.Commands.Command :creates \u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.AddressBookParser .down.\u003e Address.Logic.Parser.XYZCommandParser"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027XYZCommandParser"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.XYZCommandParser .left.\u003e Address.Logic.Commands.XYZCommand :creates \u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.XYZCommandParser .up.|\u003e Logic.Parser.Parser"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.XYZCommandParser .up.\u003e Logic.Parser.ArgumentMultimap"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.XYZCommandParser .up.\u003e Logic.Parser.ArgumentTokenizer"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.XYZCommandParser .up.\u003e Logic.Parser.ParserUtil"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.XYZCommandParser .up.\u003e Logic.Parser.Prefix"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.XYZCommandParser ..\u003e Address.Logic.Parser.CliSyntax"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027CliSyntax"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Logic.Parser.CliSyntax .up.\u003e Logic.Parser.Prefix"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ACHIEVEMENTS\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AchievementsLogic"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogic .up.\u003e Logic.Commands.CommandResult"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AchievementsLogicManager"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogicManager .up.|\u003e Achievements.Logic.AchievementsLogic"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogicManager .left.\u003e Supplier"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogicManager .up.\u003e Logic.Commands.CommandResult"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogicManager .up.\u003e Logic.Commands.Command :executes \u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogicManager *-down-\u003e \"1\" Achievements.Logic.Parser.AchievementsParser"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.AchievementsLogicManager o-right-\u003e \"1\" Achievements.Model"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027XYZCommand"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.Commands.XYZCommand -up-|\u003e Logic.Commands.Command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AchievementsParser"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.Parser.AchievementsParser .up.\u003e Logic.Commands.Command"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.Parser.AchievementsParser .down.\u003e Achievements.Logic.Parser.XYZCommandParser :creates \u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027XYZCommandParser"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.Parser.XYZCommandParser .up.|\u003e Logic.Parser.Parser"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Logic.Parser.XYZCommandParser .left.\u003e Achievements.Logic.Commands.XYZCommand :creates \u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LAYOUT\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager .[hidden]left.\u003e Storage"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager .[hidden]down.\u003e Achievements"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager .[hidden]down.\u003e Address"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.LogicManager .[hidden]down.\u003e Logic.Commands"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand .[hidden]down.\u003e Achievements"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand .[hidden]down.\u003e Address"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand .[hidden]down.\u003e Calendar"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand .[hidden]down.\u003e diaryFeature"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand .[hidden]down.\u003e FinancialTracker"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands.XYZCommand .[hidden]down.\u003e Itinerary"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Logic.Commands .[hidden]left.\u003e Logic.Parser"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 177,
      "-": 27
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface UserPrefsModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class UserPrefsModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Achievements {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface StatisticsModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class StatisticsModelManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Address {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Person {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Tag {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Country {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class Country"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface AddressBookModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AddressBookModelManager"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Calendar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryFeature {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryModel {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace FinancialTracker {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Itinerary {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface Supplier \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "HiddenOutside ..\u003e Model.Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027MODEL\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager .up.|\u003e Model.Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.Model .left.\u003eSupplier"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Model Interface"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.Model .down.\u003e Address.Model.AddressBookModel :gets \u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.Model .down.\u003e Achievements.Model.StatisticsModel :suppliers \u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.Model .down.\u003e Model.UserPrefsModel :gets \u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ModelManager Constructor"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027 composition or aggregation?"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager o--\u003e \"1\" Address.Model.AddressBookModel"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager o--\u003e \"1\" Model.UserPrefsModel"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager ..\u003e Achievements.Model.StatisticsModel"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027UserPrefsModelManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager .up.|\u003e Model.UserPrefsModel"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027UserPrefs"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefs .up.|\u003e Model.ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LAYOUT\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager -[hidden]down-\u003e Model.UserPrefsModel"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements -[hidden]right-\u003eCalendar"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements -[hidden]right-\u003ediaryFeature"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements -[hidden]right-\u003eFinancialTracker"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements -[hidden]right-\u003eItinerary"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eAddress"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eAchievements"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eCalendar"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003ediaryFeature"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eFinancialTracker"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eItinerary"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address -down[hidden]-\u003e Achievements"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ADDRESS\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AddressBookModel Interface"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBookModel .right.\u003e ObservableList"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBookModelManager .up.|\u003e Address.Model.AddressBookModel"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AddressBookModelManager Constructor"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBookModelManager ..\u003e Address.Model.ReadOnlyAddressBook"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBookModelManager .up.\u003e Model.ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBookModelManager --\u003e\"1\" Address.Model.Person.Person : filtered list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ReadOnlyAddressBook"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.ReadOnlyAddressBook ..\u003e Address.Model.AddressBook"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027AddressBook"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.AddressBook *-- \"1\" Address.Model.Person.UniquePersonList"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Person"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.UniquePersonList o--\u003e \"*\" Address.Model.Person.Person"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e Address.Model.Person.Name"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e Address.Model.Person.Phone"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e Address.Model.Person.Email"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e Address.Model.Person.Address"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e Address.Model.Person.Remark"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e Address.Model.Country.Country"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Model.Person.Person *--\u003e \"*\" Address.Model.Tag.Tag"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ACHIEVEMENTS\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027StatisticsModel Interface"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Model.StatisticsModelManager .up.|\u003e Achievements.Model.StatisticsModel"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027StatisticsModel Manager"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Model.StatisticsModelManager ..\u003e ObservableList"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.Model.StatisticsModelManager --\u003e \"*\" Address.Model.Person.Person"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 120,
      "-": 29
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Storage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Address {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Storage{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonAddressBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class JsonAdaptedTag"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class JsonSerializableAddressBookStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class JsonSerializablePerson"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Storage.StorageManager .left.|\u003e Storage.Storage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Storage.StorageManager o-right-\u003e Storage.UserPrefsStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Storage.StorageManager o--\u003e Address.Storage.AddressBookStorage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Storage.JsonUserPrefsStorage .left.|\u003e Storage.UserPrefsStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Storage.JsonAddressBookStorage .left.|\u003e Address.Storage.AddressBookStorage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Storage.JsonAddressBookStorage .down.\u003e Address.Storage.JsonSerializableAddressBookStorage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Storage.JsonSerializableAddressBookStorage .right.\u003e Address.Storage.JsonSerializablePerson"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.Storage.JsonSerializablePerson .right.\u003e Address.Storage.JsonAdaptedTag"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 19,
      "-": 14
    }
  },
  {
    "path": "docs/diagrams/TravezyArchitectureDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "!include \u003coffice/Concepts/globe_internet\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "!include \u003coffice/Concepts/documents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "!include \u003coffice/Users/user\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "!include \u003coffice/Users/administrator\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Package \" \"\u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class GUI UI_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class TextUI UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class \"Main Window\" as MainWin UI_COLOR_T2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Calendar UI_COLOR_T2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Itinerary UI_COLOR_T2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class \"Financial Tracker\" as Tracker UI_COLOR_T2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class \"Travel Diary\" as Diary UI_COLOR_T2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Achievements UI_COLOR_T2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Model MODEL_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Main MODEL_COLOR_T1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class Commons LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class \"Log Center\" as Logs UI_COLOR_T1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Class \"Test Driver\\nJunit Test\" as Test MODEL_COLOR_T4"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class \"\u003c$user\u003e\\nUser\" as User MODEL_COLOR_T2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class \"\u003c$administrator\u003e\\nDeveloper\" as Developer MODEL_COLOR_T2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Class \"\u003c$documents\u003e\\nJson Files\" as File UI_COLOR_T1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "GUI -\u003e Logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "GUI -right-\u003e Model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "GUI -up-\u003e Calendar"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "GUI -up-\u003e Itinerary"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "GUI -up-\u003e Diary"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "GUI -up-\u003e Tracker"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "GUI -up-\u003e Achievements"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "GUI -up-\u003e MainWin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Calendar -up-\u003e Main"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Itinerary -up-\u003e Main"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Diary -up-\u003e Main"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Tracker -up-\u003e Main"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Achievements -up-\u003e Main"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "MainWin -up-\u003e Main"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Itinerary -right-\u003e Calendar"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Logic -right-\u003e Storage"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Logic -down-\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "TextUI -up-\u003e GUI"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "TextUI .up.\u003e Commons"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Logic .up.\u003e Commons"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Storage .up.\u003e Commons"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Logs -right- Commons"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Storage .right.\u003eFile"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "User -right-\u003e GUI"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "User \u003c--\u003e TextUI"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Test -up-\u003e TextUI"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Developer -up[hidden]-\u003e User"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Developer \u003c-right-\u003e Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 64
    }
  },
  {
    "path": "docs/diagrams/TravezyModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface UserPrefsModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class UserPrefsModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Address {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface AddressBookModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Achievements {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface StatisticsModel \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Calendar {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryFeature {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryModel {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace FinancialTracker {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Itinerary {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "HiddenOutside ..\u003e Model.Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027MODEL\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager .up.|\u003e Model.Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027Model Interface"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.Model .down.\u003e Address.Model.AddressBookModel"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.Model .down.\u003e Achievements.Model.StatisticsModel"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027ModelManager Constructor"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027 composition or aggregation?"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager ..\u003e \"1\" Address.Model.AddressBookModel :gets \u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager ..\u003e \"1\" Model.UserPrefsModel :gets \u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager --\u003e \"1\" Achievements.Model.StatisticsModel :supplies \u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027UserPrefsModel Interface"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.Model .down.\u003e Model.UserPrefsModel"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027UserPrefsModelManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager .up.|\u003e Model.UserPrefsModel"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027LAYOUT\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.ModelManager -[hidden]down-\u003e Model.UserPrefsModel"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address -[hidden]right-\u003eCalendar"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address -[hidden]right-\u003ediaryFeature"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address -[hidden]right-\u003eFinancialTracker"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address -[hidden]right-\u003eItinerary"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eAddress"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eAchievements"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eCalendar"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003ediaryFeature"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eFinancialTracker"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Model.UserPrefsModelManager -[hidden]down-\u003eItinerary"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address -down[hidden]-\u003e Achievements"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 89
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class PageManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class PageType \u003c\u003cenumeration\u003e\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "class Page"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Achievements {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace UI {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AchievementsPage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Address{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace UI {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class AddressBookPage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Calendar{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace UI {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class CalendarPage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryFeature{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryModel {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace diaryUI {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class DiaryPage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace FinancialTracker {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace UI {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class FinancialTrackerPage"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Itinerary {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace Model {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "namespace UI {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Class ItineraryPage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Interface List \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "HiddenOutside ..\u003e UI.Ui"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.UiManager .left.|\u003e UI.Ui"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.UiManager -down-\u003e UI.MainWindow"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.MainWindow --\u003e UI.HelpWindow"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.MainWindow *-down-\u003e UI.CommandBox"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.MainWindow *-down-\u003e UI.ResultDisplay"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.MainWindow *-down-\u003e UI.PersonListPanel"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.MainWindow *-down-\u003e UI.StatusBarFooter"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.MainWindow *-down-\u003e UI.PageManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.PageManager .left.\u003e List"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.PageManager o-right-\u003e \"*\" UI.Page"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.Page .\u003e UI.PageType"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.UI.AchievementsPage .up.|\u003e UI.Page"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Achievements.UI.AchievementsPage -left-\u003e Logic :getLogic \u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.UI.AddressBookPage .up.|\u003e UI.Page"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address.UI.AddressBookPage -left-\u003e Logic :getLogic \u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Calendar.UI.CalendarPage .up.|\u003e UI.Page"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Calendar.UI.CalendarPage .left.|\u003e Calendar.Model"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "diaryFeature.diaryUI.DiaryPage .up.|\u003e UI.Page"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "diaryFeature.diaryUI.DiaryPage .left.|\u003e diaryFeature.Model"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "FinancialTracker.UI.FinancialTrackerPage .up.|\u003e UI.Page"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "FinancialTracker.UI.FinancialTrackerPage .left.|\u003e FinancialTracker.Model"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Itinerary.UI.ItineraryPage .up.|\u003e UI.Page"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Itinerary.UI.ItineraryPage .left.|\u003e Itinerary.Model"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.PersonListPanel -down-\u003e UI.PersonCard"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.MainWindow -left-|\u003e UI.UiPart"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.ResultDisplay --|\u003e UI.UiPart"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.CommandBox --|\u003e UI.UiPart"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.PersonListPanel --|\u003e UI.UiPart"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.PersonCard --|\u003e UI.UiPart"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.StatusBarFooter --|\u003e UI.UiPart"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.HelpWindow -down-|\u003e UI.UiPart"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.PersonCard ..\u003e Model"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.PersonListPanel -[hidden]left- UI.HelpWindow"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.HelpWindow -[hidden]left- UI.CommandBox"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.CommandBox -[hidden]left- UI.ResultDisplay"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.ResultDisplay -[hidden]left- UI.StatusBarFooter"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.MainWindow -[hidden]-|\u003e UI.UiPart"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.UiPart -[hidden]down-\u003e UI.Page"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address -[hidden]left-\u003e Achievements"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address -[hidden]right-\u003e Calendar"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address -[hidden]right-\u003e diaryFeature"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address -[hidden]right-\u003e FinancialTracker"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Address -[hidden]right-\u003e Itinerary"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "UI.PageManager -[hidden]down-\u003e UI.PageType"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 102,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "Participant \":LogicManager\" as addressBookLogic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "[-\u003e addressBookLogic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "activate addressBookLogic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "addressBookLogic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "ecp -\u003e ec ++: index, editPersonDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "abp --\u003e addressBookLogic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefsModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    //Sets up all the components (shared)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //add more storage here"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //overload storage manager"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //model should now include all relevant models"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //use of a model manager to get different models from different pages"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //contain different logic: mainLogic + addressBookLogic"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns a {@code AddressBookModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * .\u003cbr\u003e The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private ModelManager initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new ModelManager(new UserPrefsModelManager(userPrefs), new AddressBookModelManager(initialData, userPrefs));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefsModel().getUserPrefs());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 2,
      "bjhoohaha": 17,
      "-": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/achievements/logic/AchievementsLogic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.achievements.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public interface AchievementsLogic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    int getTotalPersons();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/achievements/logic/AchievementsLogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.achievements.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.model.StatisticsModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.logic.parser.AchievementsParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AchievementsLogicManager implements AchievementsLogic {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final AchievementsParser achievementsParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AchievementsLogicManager.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final Supplier\u003cStatisticsModel\u003e statisticsModelSupplier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AchievementsLogicManager(Supplier\u003cStatisticsModel\u003e statisticsModelSupplier) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.achievementsParser \u003d new AchievementsParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.statisticsModelSupplier \u003d statisticsModelSupplier;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Command\u003cStatisticsModel\u003e command \u003d achievementsParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        commandResult \u003d command.execute(statisticsModelSupplier.get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public int getTotalPersons() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return statisticsModelSupplier.get().getTotalPersons();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/achievements/logic/commands/GoToCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.achievements.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.model.StatisticsModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.PageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * GoTo a specific page with user input entered by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class GoToCommand extends Command\u003cStatisticsModel\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String MESSAGE_CHANGE_SUCCESS \u003d \"Switching to %s page\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            + \": Goes to the page specified.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            + \"Parameters: \u0027address_book\u0027, \u0027calendar\u0027, \u0027diary\u0027, \u0027financial_tracker\u0027, \u0027itinerary\u0027, \u0027main\u0027\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" address_book\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private PageType pageType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public GoToCommand(PageType pageType) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.pageType \u003d pageType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(StatisticsModel statisticsModel) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        PageManager.getPage(pageType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String respondMessage \u003d String.format(MESSAGE_CHANGE_SUCCESS, pageType.toString().toLowerCase());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new CommandResult(respondMessage, false, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/achievements/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.achievements.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.model.StatisticsModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class HelpCommand extends Command\u003cStatisticsModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(StatisticsModel statisticsModel) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/achievements/logic/parser/AchievementsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.achievements.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.model.StatisticsModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AchievementsParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Command\u003cStatisticsModel\u003e parseCommand(String userInput) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return new GoToParser().parse(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 44,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/achievements/logic/parser/GoToParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.achievements.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * A parser to parse user input and create a GoToCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class GoToParser implements Parser\u003cGoToCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoToCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * and returns an GoToCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public GoToCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            PageType pageType \u003d ParserUtil.parsePageType(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new GoToCommand(pageType);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 14,
      "ngzhaoming": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/achievements/model/StatisticsModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.achievements.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public interface StatisticsModel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    int getTotalPersons();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/achievements/model/StatisticsModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.achievements.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.beans.binding.IntegerBinding;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class StatisticsModelManager implements StatisticsModel {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final ObservableList\u003cPerson\u003e filteredPersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public StatisticsModelManager(ObservableList\u003cPerson\u003e filteredPersonList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.filteredPersonList \u003d filteredPersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        IntegerBinding sizeProperty \u003d Bindings.size(filteredPersonList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public int getTotalPersons() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return filteredPersonList.size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/achievements/ui/AchievementsPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.achievements.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.logic.AchievementsLogic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.CodeWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.HelpWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.Page;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.ResultDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Page for showing the user achievements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AchievementsPage extends UiPart\u003cRegion\u003e implements Page {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final PageType pagetype \u003d PageType.ACHIEVEMENTS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final String FXML \u003d \"Achievements.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Scene achievementsScene;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private ImageView title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private BorderPane achievementsPane;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AchievementsLogic achievementsLogic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private CodeWindow codeWindow;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Label test;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AchievementsPage AchievementsPage(AchievementsPage achievementsPage) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new AchievementsPage(achievementsPage.primaryStage, achievementsPage.achievementsLogic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AchievementsPage(Stage primaryStage, AchievementsLogic achievementsLogic) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(FXML, new BorderPane());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.achievementsLogic \u003d achievementsLogic;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.achievementsScene \u003d new Scene(achievementsPane);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666 is fixed in later version of"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         * SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will not"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         * work when the focus is in them because the key event is consumed by the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         * TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         * help window purposely so to support accelerators even when focus is in"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         * CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        achievementsScene.addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            CommandResult commandResult \u003d achievementsLogic.execute(commandText);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Opens the code window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void handleCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (!codeWindow.isShowing()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            codeWindow.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            codeWindow.focus();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "//        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "//                primaryStage.getHeight(),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "//                (int) primaryStage.getX(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "//                (int) primaryStage.getY());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "//        addressBookLogic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        title.setImage(new Image(this.getClass().getResourceAsStream(\"/images/achievements.png\")));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.codeWindow \u003d new CodeWindow();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        test.setText(\"Total Number of Persons: \" + achievementsLogic.getTotalPersons());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return achievementsScene;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return pagetype;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 218
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/AddressBookLogic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * API of the AddressBookLogic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public interface AddressBookLogic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @see AddressBookModel#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 8,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/AddressBookLogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefsModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The main AddressBookLogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AddressBookLogicManager implements AddressBookLogic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AddressBookLogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final UserPrefsModel userPrefsModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final AddressBookModel addressBookModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddressBookLogicManager(UserPrefsModel userPrefsModel, AddressBookModel addressBookModel, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.userPrefsModel \u003d userPrefsModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.addressBookModel \u003d addressBookModel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        commandResult \u003d command.execute(addressBookModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            storage.saveAddressBook(addressBookModel.getAddressBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return addressBookModel.getAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return addressBookModel.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return addressBookModel.getAddressBookFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return userPrefsModel.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userPrefsModel.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 1,
      "bjhoohaha": 21,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class AddCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(AddressBookModel addressBookModel) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        requireNonNull(addressBookModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (addressBookModel.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "bjhoohaha": 13,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ClearCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(AddressBookModel addressBookModel) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        requireNonNull(addressBookModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "bjhoohaha": 7,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DeleteCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(AddressBookModel addressBookModel) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        requireNonNull(addressBookModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d addressBookModel.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "bjhoohaha": 8,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.model.AddressBookModel.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.country.Country;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class EditCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(AddressBookModel addressBookModel) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        requireNonNull(addressBookModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d addressBookModel.getFilteredPersonList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 addressBookModel.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Remark updatedRemark \u003d personToEdit.getRemark(); // edit command does not allow editing remarks"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Country updatedCountry \u003d editPersonDescriptor.getCountry().orElse(personToEdit.getCountry());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark, updatedTags,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                updatedCountry);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        private Country country;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            setCountry(toCopy.country);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, country);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        public void setCountry(Country country) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            this.country \u003d country;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        public Optional\u003cCountry\u003e getCountry () {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return Optional.ofNullable(country);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                    \u0026\u0026 getCountry().equals(e.getCountry());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "bjhoohaha": 39,
      "-": 202,
      "ngzhaoming": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class FindCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(AddressBookModel addressBookModel) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        requireNonNull(addressBookModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        addressBookModel.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "bjhoohaha": 9,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class HelpCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(AddressBookModel addressBookModel) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "bjhoohaha": 4,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.model.AddressBookModel.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ListCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(AddressBookModel addressBookModel) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        requireNonNull(addressBookModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "bjhoohaha": 7,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/commands/RemarkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.model.AddressBookModel.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class RemarkCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + PREFIX_REMARK + \"[REMARK]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + PREFIX_REMARK + \"Likes to swim.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public RemarkCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        CollectionUtil.requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(AddressBookModel addressBookModel) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d addressBookModel.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags(), personToEdit.getCountry());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "bjhoohaha": 12,
      "ngzhaoming": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.country.Country;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_PHONE, CliSyntax.PREFIX_EMAIL, CliSyntax.PREFIX_ADDRESS, CliSyntax.PREFIX_TAG,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        CliSyntax.PREFIX_COUNTRY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_ADDRESS, CliSyntax.PREFIX_PHONE, CliSyntax.PREFIX_EMAIL)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(CliSyntax.PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(CliSyntax.PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Remark remark \u003d new Remark(\"\"); // add command does not allow adding remarks straight away"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(CliSyntax.PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Country country \u003d ParserUtil.parseCountry(argMultimap.getValue(CliSyntax.PREFIX_COUNTRY).orElse(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, remark, tagList, country);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 15,
      "-": 1,
      "ngzhaoming": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.GoToParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new GoToParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 1,
      "bjhoohaha": 11,
      "-": 63,
      "ngzhaoming": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final Prefix PREFIX_COUNTRY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 4,
      "-": 14,
      "ngzhaoming": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 4,
      "-": 24,
      "ngzhaoming": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        PREFIX_COUNTRY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COUNTRY).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            editPersonDescriptor.setCountry(ParserUtil.parseCountry(argMultimap.getValue(PREFIX_COUNTRY).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 18,
      "-": 69,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 4,
      "-": 27,
      "ngzhaoming": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/address/logic/parser/RemarkCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Parses input arguments and creates a new {@code RemarkCommand} object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_REMARK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String remark \u003d argMultimap.getValue(CliSyntax.PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new RemarkCommand(index, new Remark(remark));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 7,
      "ngzhaoming": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 3,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/AddressBookModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The API of the AddressBookModel component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public interface AddressBookModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 4,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/AddressBookModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Represents the in-memory addressBookModel of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AddressBookModelManager implements AddressBookModel {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddressBookModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Initializes a AddressBookModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddressBookModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        CollectionUtil.requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddressBookModelManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (!(obj instanceof AddressBookModelManager)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModelManager other \u003d (AddressBookModelManager) obj;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 12,
      "-": 116,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/country/Country.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Represents a Person\u0027s country in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Country {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Country entered should be in the list below:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Afghanistan\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Åland Islands\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Albania\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Algeria\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"American Samoa\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Andorra\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Angola\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Anguilla\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Antarctica\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Antigua \u0026 Barbuda\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Argentina\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Armenia\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Aruba\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Australia\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Austria\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Azerbaijan\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bahamas\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bahrain\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bangladesh\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Barbados\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Belarus\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Belgium\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Belize\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Benin\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bermuda\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bhutan\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bolivia\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bosnia \u0026 Herzegovina\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Botswana\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bouvet Island\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Brazil\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"British Indian Ocean Territory\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"British Virgin Islands\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Brunei\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bulgaria\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Burkina Faso\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Burundi\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cambodia\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cameroon\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Canada\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cape Verde\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Caribbean Netherlands\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cayman Islands\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Central African Republic\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Chad\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Chile\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"China\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Christmas Island\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cocos (Keeling) Islands\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Colombia\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Comoros\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Congo - Brazzaville\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Congo - Kinshasa\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cook Islands\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Costa Rica\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Côte d’Ivoire\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Croatia\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cuba\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Curaçao\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cyprus\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Czechia\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Denmark\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Djibouti\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Dominica\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Dominican Republic\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Ecuador\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Egypt\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"El Salvador\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Equatorial Guinea\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Eritrea\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Estonia\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Ethiopia\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Falkland Islands\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Faroe Islands\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Fiji\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Finland\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"France\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"French Guiana\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"French Polynesia\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"French Southern Territories\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Gabon\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Gambia\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Georgia\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Germany\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Ghana\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Gibraltar\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Greece\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Greenland\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Grenada\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guadeloupe\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guam\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guatemala\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guernsey\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guinea\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guinea-Bissau\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guyana\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Haiti\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Heard \u0026 McDonald Islands\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Honduras\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Hong Kong SAR China\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Hungary\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Iceland\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"India\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Indonesia\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Iran\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Iraq\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Ireland\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Isle of Man\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Israel\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Italy\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Jamaica\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Japan\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Jersey\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Jordan\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Kazakhstan\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Kenya\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Kiribati\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Kuwait\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Kyrgyzstan\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Laos\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Latvia\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Lebanon\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Lesotho\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Liberia\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Libya\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Liechtenstein\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Lithuania\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Luxembourg\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Macau SAR China\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Macedonia\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Madagascar\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Malawi\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Malaysia\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Maldives\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mali\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Malta\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Marshall Islands\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Martinique\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mauritania\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mauritius\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mayotte\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mexico\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Micronesia\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Moldova\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Monaco\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mongolia\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Montenegro\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Montserrat\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Morocco\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mozambique\\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Myanmar (Burma)\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Namibia\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Nauru\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Nepal\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Netherlands\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"New Caledonia\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"New Zealand\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Nicaragua\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Niger\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Nigeria\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Niue\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Norfolk Island\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"North Korea\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Northern Mariana Islands\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Norway\\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Oman\\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Pakistan\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Palau\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Palestinian Territories\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Panama\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Papua New Guinea\\n\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Paraguay\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Peru\\n\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Philippines\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Pitcairn Islands\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Poland\\n\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Portugal\\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Puerto Rico\\n\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Qatar\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Réunion\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Romania\\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Russia\\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Rwanda\\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Samoa\\n\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"San Marino\\n\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"São Tomé \u0026 Príncipe\\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Saudi Arabia\\n\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Senegal\\n\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Serbia\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Seychelles\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Sierra Leone\\n\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Singapore\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Sint Maarten\\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Slovakia\\n\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Slovenia\\n\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Solomon Islands\\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Somalia\\n\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"South Africa\\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"South Georgia \u0026 South Sandwich Islands\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"South Korea\\n\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"South Sudan\\n\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Spain\\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Sri Lanka\\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Barthélemy\\n\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Helena\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Kitts \u0026 Nevis\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Lucia\\n\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Martin\\n\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Pierre \u0026 Miquelon\\n\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Vincent \u0026 Grenadines\\n\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Sudan\\n\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Suriname\\n\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Svalbard \u0026 Jan Mayen\\n\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Swaziland\\n\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Sweden\\n\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Switzerland\\n\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Syria\\n\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Taiwan\\n\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Tajikistan\\n\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Tanzania\\n\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Thailand\\n\""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Timor-Leste\\n\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Togo\\n\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Tokelau\\n\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Tonga\\n\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Trinidad \u0026 Tobago\\n\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Tunisia\\n\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Turkey\\n\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Turkmenistan\\n\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Turks \u0026 Caicos Islands\\n\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Tuvalu\\n\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"U.S. Outlying Islands\\n\""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"U.S. Virgin Islands\\n\""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Uganda\\n\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Ukraine\\n\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"United Arab Emirates\\n\""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"United Kingdom\\n\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"United States\\n\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Uruguay\\n\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Uzbekistan\\n\""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Vatican City\\n\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Venezuela\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Vietnam\\n\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Vanuatu\\n\""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Wallis \u0026 Futuna\\n\""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Western Sahara\\n\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Yemen\\n\""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Zambia\\n\""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Zimbabwe\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a {@code Country}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param country A valid country."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Country(String country) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        requireNonNull(country);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        AppUtil.checkArgument(isValidCountry(country));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        value \u003d country;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns if a given string is a valid country."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static boolean isValidCountry(String test) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return isEmpty(test) || Arrays.stream(Locale.getISOCountries())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                      .anyMatch(x -\u003e new Locale(\"\", x).getDisplayCountry().equals(test));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static boolean isEmpty(String test) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return test.equals(\"\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                || (other instanceof Country // instanceof handles nulls"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                \u0026\u0026 value.equals(((Country) other).value)); // state check"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 305,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        AppUtil.checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 55,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        AppUtil.checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 65,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 57,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.country.Country;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final Country country;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Remark remark, Set\u003cTag\u003e tags, Country country) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, phone, email, address, tags, country);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                \u0026\u0026 otherPerson.getCountry().equals(getCountry());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, country);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 13,
      "-": 114,
      "ngzhaoming": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        AppUtil.checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 51,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/person/Remark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Represents a Person\u0027s remark in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "ngzhaoming": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        CollectionUtil.requireAllNonNull(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 3,
      "-": 132,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 52,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.country.Country;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final Remark EMPTY_REMARK \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                getTagSet(\"friends\"), new Country(\"Singapore\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), new Country(\"United States\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                getTagSet(\"neighbours\"), new Country(\"\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                getTagSet(\"family\"), new Country(\"\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                getTagSet(\"classmates\"), new Country(\"\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                getTagSet(\"colleagues\"), new Country(\"\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 23,
      "-": 39,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/address/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Represents a storage for {@link AddressBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 42,
      "ngzhaoming": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.country.Country;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final String country;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            @JsonProperty(\"remark\") String remark, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            @JsonProperty(\"country\") String country) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        country \u003d source.getCountry().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the addressBookModel\u0027s {@code Person} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (country \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Country.class.getSimpleName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (!Country.isValidCountry(country)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new IllegalValueException(Country.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        final Country modelCountry \u003d new Country(country);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelRemark, modelTags, modelCountry);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 25,
      "-": 97,
      "ngzhaoming": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/address/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the addressBookModel\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 4,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Converts this address book into the addressBookModel\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 6,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/address/ui/AddressBookPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.AddressBookLogic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.CodeWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.HelpWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.Page;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.ResultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AddressBookPage extends UiPart\u003cRegion\u003e implements Page {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final String FXML \u003d \"AddressBookPage.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Scene addressBookScene;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private VBox addressBookBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookLogic addressBookLogic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private CodeWindow codeWindow;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddressBookPage(Stage primaryStage, AddressBookLogic addressBookLogic) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        super(FXML, new VBox());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.addressBookLogic \u003d addressBookLogic;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        codeWindow \u003d new CodeWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookScene \u003d new Scene(addressBookBox);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        logger.info(helpMenuItem.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666 is fixed in later version of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * SDK."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will not"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * work when the focus is in them because the key event is consumed by the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * TextInputControl(s)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * help window purposely so to support accelerators even when focus is in"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookScene.addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        personListPanel \u003d new PersonListPanel(addressBookLogic.getFilteredPersonList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(addressBookLogic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Opens the code window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void handleCode() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!codeWindow.isShowing()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            codeWindow.show();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            codeWindow.focus();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                primaryStage.getHeight(),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                (int) primaryStage.getX(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                (int) primaryStage.getY());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookLogic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @see AddressBookLogic#execute(String)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            CommandResult commandResult \u003d addressBookLogic.execute(commandText);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return addressBookScene;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return PageType.ADDRESS_BOOK;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 19,
      "bjhoohaha": 45,
      "-": 155,
      "ngzhaoming": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Label country;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        country.setText(person.getCountry().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 6,
      "-": 72,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/address/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 3,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/commands/CalendarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class CalendarCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows you your calendar.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_CALENDAR_MESSAGE \u003d \"calendar\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(AddressBookModel addressBookModel) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_CALENDAR_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "bjhoohaha": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.model.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public abstract CommandResult execute(Calendar calendar);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/commands/ShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.model.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.model.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.model.MonthOfYear;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.calendar.model.Year;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.calendar.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Page;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Shows user the his/her calendar for the specified month."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SHOWING_REQUESTED \u003d \"Showing month view for %s %s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a month view of the requested month\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_MONTH + \" MONTH \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_YEAR + \"YEAR]\" + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + CliSyntax.PREFIX_MONTH + \" Dec \" + CliSyntax.PREFIX_YEAR + \" 2019\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private MonthOfYear monthOfYear;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ShowCommand(MonthOfYear monthOfYear, Optional\u003cYear\u003e year) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (year.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            this.monthOfYear \u003d monthOfYear;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            // get current year"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            java.util.Calendar currentDate \u003d java.util.Calendar.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            int currentYear \u003d currentDate.get(java.util.Calendar.YEAR);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            this.year \u003d new Year(currentYear);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            this.year \u003d year.get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.monthOfYear \u003d monthOfYear;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Calendar calendar) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Month requestedMonth \u003d new Month(monthOfYear, year);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        calendar.updateMonthShown(requestedMonth);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String formattedFeedback \u003d String.format(MESSAGE_SHOWING_REQUESTED, monthOfYear.toString(), year.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(formattedFeedback);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "ngzhaoming": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/model/Calendar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.calendar.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Calendar {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Month monthShown;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private boolean hasVisibleUpdates;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Calendar() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        java.util.Calendar currentDate \u003d java.util.Calendar.getInstance();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Year currentYear \u003d new Year(currentDate.get(java.util.Calendar.YEAR));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int currentUnformattedMonth \u003d currentDate.get(java.util.Calendar.MONTH);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        MonthOfYear currentMonth \u003d MonthOfYear.convertJavaMonth(currentUnformattedMonth);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        monthShown \u003d new Month(currentMonth, currentYear);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        hasVisibleUpdates \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e(); // todo: update this such that it is linked to storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return Month.copy(monthShown);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void updateMonthShown(Month updatedMonth) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        monthShown \u003d updatedMonth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        hasVisibleUpdates \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Checks whether there are any visible update that has to be shown to user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return {@code true} if and only if there are visible updates that can be shown to user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasVisibleUpdates() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return hasVisibleUpdates;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Marks visible update as complete, i.e. latest visible update has been shown to user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void completeVisibleUpdates() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        hasVisibleUpdates \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds an event to the calendar"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // todo: extract the following and implement it using model manager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cEvent\u003e eventsCopy \u003d List.copyOf(events);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ReadOnlyCalendar(eventsCopy);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 1,
      "-": 26,
      "ngzhaoming": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/model/Day.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.calendar.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a day object which contains information about the day of month and day of week."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private int dayOfMonth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents day\u0027s day of week in one-based index."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayOfWeek day of the week (e.g. Sunday, Monday, ...)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayOfMonth day of the month (e.g. 1, 2, ..., 31)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public Day(DayOfWeek dayOfWeek, int dayOfMonth) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // todo add assertion to check validity of dayOfMonth"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dayOfMonth \u003d dayOfMonth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets a {@code Day} instance such that its day of week is in one-based index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayOfWeek day of the week (e.g. Sunday, Monday, ...)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayZeroBased day of the month (e.g. 0, 1, ..., 30)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    static Day getOneBased(DayOfWeek dayOfWeek, int dayZeroBased) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Day(dayOfWeek, dayZeroBased + 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getDayOfMonth() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return dayOfMonth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return dayOfWeek;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns day of week as a meaningful numerical value that is one-based."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return day of week as a meaningful numerical value that is one-based"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getDayOfWeekOneBased() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return dayOfWeek.getNumericalVal();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns day of week as a meaningful numerical value that is zero-based."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return day of week as a meaningful numerical value that is zero-based"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getDayOfWeekZeroIndex() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return dayOfWeek.getNumericalVal() - 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"%s, %d\", dayOfWeek, dayOfMonth);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (!(o instanceof Day)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Day dayToCompare \u003d (Day) o;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return dayToCompare.dayOfWeek.equals(this.dayOfWeek) \u0026\u0026 dayToCompare.dayOfMonth \u003d\u003d this.dayOfMonth;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/model/DayOfWeek.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.calendar.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "enum DayOfWeek {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    SUN(0),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    MON(1),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    TUE(2),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    WED(3),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    THU(4),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    FRI(5),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    SAT(6);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private int numericalVal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    DayOfWeek(int numericalVal) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.numericalVal \u003d numericalVal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    int getNumericalVal() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return numericalVal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    static DayOfWeek of(int numericalVal) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Optional\u003cDayOfWeek\u003e desiredDay \u003d Stream.of(DayOfWeek.values())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .filter(d -\u003e d.numericalVal \u003d\u003d numericalVal)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .findAny();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (desiredDay.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            assert true : \"All days should be represented by some value between 0 and 6 inclusive\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return desiredDay.get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        switch(this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        case SUN:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Sun\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        case MON:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Mon\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        case TUE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Tue\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        case WED:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Wed\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case THU:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Thu\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case FRI:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Fri\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case SAT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Sat\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            assert false : \"Only possible values are from Sun to Mon\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "ngzhaoming": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/model/Month.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.calendar.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Month {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static int FIRST_DAY_OF_MONTH \u003d 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    MonthOfYear monthOfYear;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    List\u003cDay\u003e days \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    Year year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    int daysInMonth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public Month(MonthOfYear monthOfYear, Year year) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.monthOfYear \u003d monthOfYear;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.daysInMonth \u003d monthOfYear.getNumDaysInMonth(year);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        generateDays();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void generateDays() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int firstDayOfWeekAsNum \u003d findFirstDayOfWeekAsNum();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        IntStream.range(0, daysInMonth)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .mapToObj(dayOfMonth -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    int dayOfWeekAsNum \u003d (firstDayOfWeekAsNum + dayOfMonth) % 7;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    DayOfWeek dayOfWeek \u003d DayOfWeek.of(dayOfWeekAsNum);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    return Day.getOneBased(dayOfWeek, dayOfMonth);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                })"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .forEach(day -\u003e days.add(day));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Stream\u003cDay\u003e getDaysInMonth() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return days.stream();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Day getFirstDayOfMonth() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return days.get(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Day getDay(int dayOfMonth) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        int dayOfMonthZeroBased \u003d dayOfMonth - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return days.get(dayOfMonthZeroBased);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public MonthOfYear getMonthOfYear() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return monthOfYear;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Month copy(Month month) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Month(month.getMonthOfYear(), month.getYear());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Computes which day (of week) {@code} month starts on"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return day (of week) {@code this} month starts on"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private int findFirstDayOfWeekAsNum() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int monthNumerical \u003d monthOfYear.getNumericalVal();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int zellerMonth \u003d findZellerMonth(monthNumerical);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int zellerYear \u003d findZellerYear(zellerMonth);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int zellerCentury \u003d zellerYear / 100;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int lastTwoDigitsOfYear \u003d zellerYear % 100;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // use Zeller\u0027s formula"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int day \u003d ((FIRST_DAY_OF_MONTH + (13 * zellerMonth - 1) / 5 + lastTwoDigitsOfYear + (lastTwoDigitsOfYear / 4)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                + (zellerCentury / 4) - 2 * zellerCentury)) % 7;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int positiveDay \u003d day \u003c 0 ? (day + 7) : day;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return positiveDay;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Computes the numerical value of {@code this} month such that it can be easily used with Zeller\u0027s rule."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param monthNumerical numerical representation of {@code this} month"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return numerical value of {@code this} month such that it can be easily used with Zeller\u0027s rule"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private int findZellerMonth(int monthNumerical) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int shiftedMonth \u003d ((monthNumerical - 2) + MonthOfYear.getNumMonthsInYear()) % MonthOfYear.getNumMonthsInYear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return shiftedMonth;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Computes the year such that it can be easily used with Zeller\u0027s rule."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param zellerMonth {@code this} month such that it can be easily used with Zeller\u0027s rule"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return year such that it can be easily used with Zeller\u0027s rule."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private int findZellerYear(int zellerMonth) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return zellerMonth \u003e 10 ? (year.getNumericalValue() - 1) : year.getNumericalValue();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "ngzhaoming": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/model/MonthOfYear.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.calendar.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public enum MonthOfYear {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    JANUARY(1, 31),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    FEBRUARY(2, 28),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    MARCH(3, 31),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    APRIL(4, 30),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    MAY(5, 31),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    JUNE(6, 30),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    JULY(7, 31),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    AUGUST(8, 31),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    SEPTEMBER(9, 30),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    OCTOBER(10, 31),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    NOVEMBER(11, 30),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    DECEMBER(12, 31);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static int NUM_MONTHS_IN_YEAR \u003d 12;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static int DAYS_IN_FEB_LEAP \u003d 29;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private int numericalVal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private int numDaysInMonth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    MonthOfYear(int numericalVal, int numDaysInMonth) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.numericalVal \u003d numericalVal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.numDaysInMonth \u003d numDaysInMonth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    int getNumericalVal() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return numericalVal;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumDaysInMonth(Year year) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (numericalVal \u003d\u003d 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            // if it is February"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return isLeapYear(year.getNumericalValue()) ? DAYS_IN_FEB_LEAP : numDaysInMonth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return numDaysInMonth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // mathematical approach to determine whether it is a leap year"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if ((year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 !\u003d 0)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (year % 400 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    static int getNumMonthsInYear() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return NUM_MONTHS_IN_YEAR;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static MonthOfYear convertJavaMonth(int javaMonth) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return MonthOfYear.values()[javaMonth];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static boolean isValidMonthNum(int monthNum) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return monthNum \u003c MonthOfYear.values().length;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static MonthOfYear convertNumToMonth(int monthNum) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return convertJavaMonth(monthNum);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static boolean isValidMonthStr(String monthStr) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return Stream.of(MonthOfYear.values())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .anyMatch(month -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    String monthLowerCase \u003d month.toString().toLowerCase();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    String monthStrLowerCase \u003d monthStr.toLowerCase();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    return monthLowerCase.contains(monthStrLowerCase);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static MonthOfYear convertStrToMonth(String monthStr) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Optional\u003cMonthOfYear\u003e monthOfYear \u003d Stream.of(MonthOfYear.values())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .filter(month -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    String monthLowerCase \u003d month.toString().toLowerCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    String monthStrLowerCase \u003d monthStr.toLowerCase();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    return monthLowerCase.contains(monthStrLowerCase);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (monthOfYear.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            assert false : \"monthStr should be a valid representation of a month\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return monthOfYear.get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        switch(this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case JANUARY:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"January\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case FEBRUARY:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"February\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case MARCH:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"March\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case APRIL:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"April\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case MAY:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"May\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        case JUNE:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"June\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        case JULY:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"July\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case AUGUST:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"August\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        case SEPTEMBER:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"September\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case OCTOBER:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"October\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        case NOVEMBER:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"November\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        case DECEMBER:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"December\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assert false : \"Month of year should be valid\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\"; // this should not be returned"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "ngzhaoming": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/parser/CalendarParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.calendar.commands.AddCommitmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.commands.ShowCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class CalendarParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new ShowParser().parse(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommitmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 4,
      "ngzhaoming": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/parser/MonthParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.model.MonthOfYear;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "class MonthParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String FORMAT_ERROR_MESSAGE \u003d \"Incorrect month format.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String MONTH_ERROR_MESSAGE \u003d \"No such month can be found.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String MONTH_STR_KEY \u003d \"monthStr\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String MONTH_STR_PATTERN \u003d \"(?\u003c\" + MONTH_STR_KEY + \"\u003e\\\\S{3,})\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String MONTH_NUM_KEY \u003d \"monthNum\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String MONTH_NUM_PATTERN \u003d \"(?\u003c\" + MONTH_NUM_KEY + \"\u003e\\\\d{1,2}?)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final Pattern MONTH_FORMAT \u003d Pattern.compile(MONTH_NUM_PATTERN + \"|\" + MONTH_STR_PATTERN);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cMonthOfYear\u003e parse(Optional\u003cString\u003e monthInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (monthInput.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d monthInput.get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d MONTH_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(FORMAT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        MonthOfYear month;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (matcher.group(MONTH_NUM_KEY) !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            String monthNum \u003d matcher.group(MONTH_NUM_PATTERN);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            month \u003d convertMonthNum(monthNum);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            String monthStr \u003d matcher.group(MONTH_STR_KEY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            month \u003d convertMonthStr(monthStr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(month);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private MonthOfYear convertMonthNum(String monthNum) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // assumes that user represents Jan with 1, Feb with 2, etc."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int zeroBasedMonth \u003d Integer.parseInt(monthNum) - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!MonthOfYear.isValidMonthNum(zeroBasedMonth)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(MONTH_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        MonthOfYear month \u003d MonthOfYear.convertNumToMonth(zeroBasedMonth);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private MonthOfYear convertMonthStr(String monthStr) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!MonthOfYear.isValidMonthStr(monthStr)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(MONTH_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        MonthOfYear month \u003d MonthOfYear.convertStrToMonth(monthStr);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "ngzhaoming": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/parser/ShowParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.commands.ShowCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.calendar.model.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.model.MonthOfYear;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.calendar.model.Year;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ShowParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Incorrect month/year format. %s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ShowCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_MONTH, CliSyntax.PREFIX_YEAR);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, CliSyntax.PREFIX_MONTH)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (ParserUtil.hasMultiplePrefixes(argMultimap, CliSyntax.PREFIX_MONTH, CliSyntax.PREFIX_YEAR)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ParserUtil.MESSAGE_DUPLICATED_ARG);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cMonthOfYear\u003e monthOfYear \u003d new MonthParser().parse(argMultimap.getValue(CliSyntax.PREFIX_MONTH));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assert monthOfYear.isEmpty() : \"Month of year cannot be empty for a show command\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        MonthOfYear monthOfYearVal \u003d monthOfYear.get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cYear\u003e year \u003d new YearParser().parse(argMultimap.getValue(CliSyntax.PREFIX_YEAR));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ShowCommand(monthOfYearVal, year);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "ngzhaoming": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/ui/CalendarPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.calendar.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.model.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.model.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.calendar.model.MonthOfYear;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.calendar.model.Year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.parser.CalendarParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.AddressBookLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Page;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CalendarPage extends UiPart\u003cScene\u003e implements Page {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CalendarPage.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final PageType pageType \u003d PageType.CALENDAR;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    StackPane monthHeaderPlaceholder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    StackPane yearHeaderPlaceholder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    StackPane monthViewPlaceholder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    VBox resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Calendar calendar;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CalendarPage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return pageType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Sets up calendar page by laying out nodes."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void fillInnerParts() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Month currentMonth \u003d calendar.getMonth();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        MonthOfYear monthOfYear \u003d currentMonth.getMonthOfYear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        MonthHeader monthHeader \u003d new MonthHeader(monthOfYear);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        monthHeaderPlaceholder.getChildren().add(monthHeader.getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Year year \u003d currentMonth.getYear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        YearHeader yearHeader \u003d new YearHeader(year);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        yearHeaderPlaceholder.getChildren().add(yearHeader.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        MonthView monthView \u003d new MonthView(currentMonth);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        monthViewPlaceholder.getChildren().add(monthView.generateMonthGrid());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateCalendarPage(Month updatedMonth) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Year year \u003d updatedMonth.getYear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        MonthOfYear monthOfYear \u003d updatedMonth.getMonthOfYear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        updateYearHeader(year);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        updateMonthHeader(monthOfYear);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        updateMonthView(updatedMonth);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateYearHeader(Year year) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        YearHeader yearHeader \u003d new YearHeader(year);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        yearHeaderPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        yearHeaderPlaceholder.getChildren().add(yearHeader.getRoot());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateMonthHeader(MonthOfYear monthOfYear) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        MonthHeader monthHeader \u003d new MonthHeader(monthOfYear);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        monthHeaderPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        monthHeaderPlaceholder.getChildren().add(monthHeader.getRoot());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateMonthView(Month month) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        MonthView monthView \u003d new MonthView(month);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        monthViewPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        monthViewPlaceholder.getChildren().add(monthView.generateMonthGrid());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @see AddressBookLogic#execute(String)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            Command command \u003d (new CalendarParser()).parseCommand(commandText);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d command.execute(calendar);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (calendar.hasVisibleUpdates()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                Month updatedMonth \u003d calendar.getMonth();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                updateCalendarPage(updatedMonth);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                calendar.completeVisibleUpdates();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setDisplayText(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setDisplayText(e.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 96,
      "ngzhaoming": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.calendar.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.ListElementPointer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final List\u003cString\u003e history \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            commandExecutor.execute(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                navigateToPreviousInput();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                navigateToNextInput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         * Executes the command."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "ngzhaoming": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/ui/DayView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.calendar.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DayView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CalendarDayView.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dayOfMonth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public DayView(int date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        dayOfMonth.setText(Integer.toString(date));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "ngzhaoming": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/ui/MonthView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.calendar.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.VPos;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.ColumnConstraints;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.layout.RowConstraints;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.model.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.model.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "class MonthView {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int NUM_ROWS \u003d 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int NUM_COLS \u003d 7;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    MonthView(Month month) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    GridPane generateMonthGrid() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Stream\u003cDay\u003e days \u003d month.getDaysInMonth();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Day firstDay \u003d month.getFirstDayOfMonth();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        GridPane monthView \u003d new GridPane();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        GridPane.setVgrow(monthView, Priority.ALWAYS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        GridPane.setHgrow(monthView, Priority.ALWAYS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        monthView.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        IntStream.range(0, NUM_ROWS)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .forEach(i -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    RowConstraints newRow \u003d new RowConstraints();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    newRow.setValignment(VPos.TOP);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    newRow.setVgrow(Priority.ALWAYS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    monthView.getRowConstraints().add(newRow);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        IntStream.range(0, NUM_COLS)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(i -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    ColumnConstraints col \u003d new ColumnConstraints();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    col.setHgrow(Priority.ALWAYS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    col.setHalignment(HPos.CENTER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    monthView.getColumnConstraints().add(col);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        monthView.setGridLinesVisible(false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        days.forEach(day -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            DayView dayView \u003d new DayView(day.getDayOfMonth());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            int firstDayOfWeekAsNum \u003d firstDay.getDayOfWeekZeroIndex();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            int rowIndex \u003d (firstDayOfWeekAsNum + day.getDayOfMonth()) / 7;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            int shiftedRowIndex \u003d rowIndex \u003c 5 ? rowIndex : 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            monthView.add(dayView.getRoot(), day.getDayOfWeekOneBased(), shiftedRowIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return monthView;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Label generateMonthLabel() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String unformattedMonthLabel \u003d month.getMonthOfYear().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String formattedMonthLabel \u003d unformattedMonthLabel.charAt(0)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                + unformattedMonthLabel.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new Label(formattedMonthLabel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "ngzhaoming": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryCommands/AddDiaryEntryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryModel.DiaryObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class AddDiaryEntryCommand extends DiaryCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    DiaryObject myAddedObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param a"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param b"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param c"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public AddDiaryEntryCommand(String a, String b, String c, String d, String e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        myAddedObject \u003d new DiaryObject(a,b,c,d,e);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public CommandResult executeCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        myReference.addEntry(myAddedObject);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        CommandResult addedResult \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                new CommandResult(\"ADDED \" + myAddedObject.toString(),false,false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return addedResult;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryCommands/ByeDiaryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class ByeDiaryCommand extends DiaryCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public CommandResult executeCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return new CommandResult(\"bye\",false,true);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryCommands/DeleteDiaryEntryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryModel.DiaryObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class DeleteDiaryEntryCommand extends DiaryCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        int deleted;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param x"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DeleteDiaryEntryCommand(int x) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        deleted \u003d x;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public CommandResult executeCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        DiaryObject deletedObject \u003d myReference.deleteEntry(deleted);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        CommandResult deletedResult \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                new CommandResult(\"DELETED \" + deletedObject.toString(),false,false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return deletedResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryCommands/DiaryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryModel.DiaryList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public abstract class DiaryCommand  {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    protected static DiaryList myReference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param myList is the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "   public void setReference(DiaryList myList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "       myReference \u003d myList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "   }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public abstract CommandResult executeCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryCommands/DiaryErrorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class DiaryErrorCommand extends DiaryCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    Exception issue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param x"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DiaryErrorCommand(Exception x) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        issue \u003d x;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public CommandResult executeCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        CommandResult deletedResult \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                new CommandResult(\"Error \" + issue,false,false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return deletedResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryCommands/ShowDiaryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryCommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class ShowDiaryCommand extends DiaryCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public CommandResult executeCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        String diaryEntries \u003d myReference.getEntriesAsString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        CommandResult showResult \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                new CommandResult(\"MY ENTRIES \\n\" + diaryEntries,false,false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return showResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryExceptions/CommandNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryExceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class CommandNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public CommandNotFoundException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryModel/DiaryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryModel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class DiaryList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private LinkedList\u003cDiaryObject\u003e myContainer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DiaryList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        myContainer \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        myContainer.add(new DiaryObject(\"Placemat\",\"12.12.2019\",\"NUS Comp 2\",\"CsPrayers\",\"Coding challenge\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param x"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @return diaryObject"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DiaryObject addEntry(DiaryObject x) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        myContainer.add(x);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return x;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param x"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DiaryObject deleteEntry(int x) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        DiaryObject deleted \u003d myContainer.remove(x-1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return deleted;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public String getEntriesAsString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        String diaryEntries \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        for(DiaryObject curr: myContainer) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            diaryEntries +\u003d (curr + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return diaryEntries;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryModel/DiaryObject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryModel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class DiaryObject {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    String title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    String date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    String place;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    String memory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    String people;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param pl"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param m"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param pe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DiaryObject(String t, String d, String pl, String pe, String m) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        title \u003d t;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        date \u003d d;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        place \u003d pl;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        memory \u003d m;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        people \u003d pe;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return \"Diary Entry: \" + title + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                + \"You did this on: \" + date + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                + \"You did this at: \" + place + \"\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                + \"You did this with: \" + people + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                + \"Your favourite memory: \" + memory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryParser/DiaryParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryParser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryCommands.AddDiaryEntryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryCommands.ByeDiaryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryCommands.DeleteDiaryEntryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryCommands.DiaryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryCommands.DiaryErrorCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryCommands.ShowDiaryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryExceptions.CommandNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class DiaryParser{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DiaryCommand parse(String userInput)  {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            String trimmed \u003d userInput.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            if (trimmed.startsWith(\"add entry\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                //Note that \"add entry\" counts as 9 characters, and hence the added task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                //only starts from pos 10"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                String entry \u003d trimmed.substring(10);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                String[] temp \u003d entry.split(\"/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                return new AddDiaryEntryCommand(temp[0],temp[1],temp[2],temp[3],temp[4]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            } else if (trimmed.startsWith(\"delete entry\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                //Note that \"delete Entry\" counts as 12 characters,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                //and hence, we start from pos 13"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                int deleteIndex \u003d Integer.parseInt(trimmed.substring(13));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                return new DeleteDiaryEntryCommand(deleteIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            } else if(trimmed.startsWith(\"show\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                return new ShowDiaryCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            } else if (trimmed.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                return new ByeDiaryCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                throw new CommandNotFoundException(\"No such command yet\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        catch (Exception x) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            return new DiaryErrorCommand(x);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryUI/DiaryPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryUI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryCommands.DiaryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryModel.DiaryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryParser.DiaryParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.AddressBookLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.ui.Page;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.ui.ResultDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class DiaryPage extends UiPart\u003cVBox\u003e implements Page {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private final static PageType pageType \u003d PageType.DIARY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private static final String FXML \u003d \"DiaryPage.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private DiaryList holder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "   @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "   private Scene diaryScene;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "   @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "   private VBox diaryPane;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DiaryPage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        super(FXML, new VBox());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        diaryScene \u003d new Scene(diaryPane);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        holder \u003d new DiaryList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private void fillInnerParts() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @see AddressBookLogic#execute(String)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private CommandResult executeCommand(String input)  {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            DiaryParser myParser \u003d new DiaryParser();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            DiaryCommand result \u003d myParser.parse(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            result.setReference(holder);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            CommandResult commandResult \u003d result.executeCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                //handleHelp();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            if (commandResult.isShowPage()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                handlePageChange(commandResult);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * Changes application page."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private void handlePageChange(CommandResult commandResult) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        this.diaryScene.getWindow().hide();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return diaryScene;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return pageType;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 121,
      "bjhoohaha": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/commands/AddFinCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Country;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.ui.CountriesDropdown;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * add financial expenses command for Financial Tracker."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class AddFinCommand extends Command\u003cModel\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the financial tracker.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            + \"e.g. add a/[amount] d/[description t/[type of expenditure] (Remember to select where you at currently!)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expense added\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final Expense expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Creates an AddFinCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public AddFinCommand(Expense expense) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        model.addExpense(expense);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/commands/DeleteFinCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * delete a financial expense, command for Financial Tracker."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DeleteFinCommand extends Command\u003cModel\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your expense has been deleted\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \": delete an expense.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            + \"e.g. delete [index]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DeleteFinCommand(Index index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        model.deleteExpense(index.getOneBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/commands/EditFinCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Country;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.parser.CliSyntax;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Edits the details of an existing expense in the itinerary."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "@SuppressWarnings(\"MalformedFormatString\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class EditFinCommand extends Command\u003cModel\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TYPE + \"TYPE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            + CliSyntax.PREFIX_AMOUNT + \"4\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            + CliSyntax.PREFIX_TYPE + \"dinner\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided. \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"The expense updated successfully!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String MESSAGE_DUPLICATE \u003d \"You have not changed anything compared to the expense!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param index of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public EditFinCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (expenseToEdit.equals(editedExpense)) { //can have duplicate"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        model.updateFilteredExpenseList(Model.PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Amount updatedAmount \u003d editExpenseDescriptor.getAmount().orElse(expenseToEdit.getAmount());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Description updatedDescription \u003d editExpenseDescriptor.getDescription().orElse(expenseToEdit.getDescription());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Type updatedType \u003d editExpenseDescriptor.getType().orElse(expenseToEdit.getType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Expense expense \u003d new Expense(updatedAmount, updatedDescription, updatedType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return expense;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!(other instanceof EditFinCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        EditFinCommand e \u003d (EditFinCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        private Type type;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        private boolean country \u003d false; //Note: this is just an indicator"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        public EditExpenseDescriptor() {}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            toCopy.country \u003d this.country;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return CollectionUtil.isAnyNonNull(amount, description, type) || country;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription () {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        public void setType(Type type) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        public Optional\u003cType\u003e getType() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        public void setCountry() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            this.country \u003d true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    \u0026\u0026 getType().equals(e.getType())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    \u0026\u0026 country \u003d\u003d e.country;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 193
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.ui.FinancialTrackerHelpWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Opens up a window with the commands available for financial tracker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class HelpCommand extends Command\u003cModel\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens up a window which showcase all\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            + \" the commands for financial tracker.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Currently viewing the financial tracker help window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/commands/SummaryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * List out a summary of your current expenses."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class SummaryCommand extends Command\u003cModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Unknown error\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new CommandResult(MESSAGE_FAIL, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/model/ExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * An expense list for financial expenses."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ExpenseList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            FXCollections.unmodifiableObservableList(expenses);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenses.add(expense);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void deleteExpense(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenses.remove(index - 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public boolean contains(Expense toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return expenses.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void setExpense(Expense expenseToEdit, Expense editedExpense) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        CollectionUtil.requireAllNonNull(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        int index \u003d expenses.indexOf(expenseToEdit);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new CommandException(\"The index that you gave is not valid.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenses.set(index, editedExpense);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 49,
      "ngzhaoming": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/model/FinancialTracker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class FinancialTracker {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final ExpenseList expenseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public FinancialTracker() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenseList.addExpense(expense);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void deleteExpense(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenseList.deleteExpense(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return expenseList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void setExpense(Expense expenseToEdit, Expense editedExpense) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenseList.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private FinancialTracker financialTracker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Model() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.financialTracker \u003d new FinancialTracker();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(this.financialTracker.getExpenseList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.financialTracker.addExpense(expense);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void deleteExpense(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.financialTracker.deleteExpense(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void setExpense(Expense expenseToEdit, Expense editedExpense) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        CollectionUtil.requireAllNonNull(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        financialTracker.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 40,
      "ngzhaoming": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/model/expense/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * A finance expense."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \"Amount should only contain numbers\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.value \u003d amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 31,
      "ngzhaoming": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/model/expense/Country.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Country {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \"Country name should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * The first character of the country must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Country(String country) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(country);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.value \u003d country;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static boolean isValidCountry(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/model/expense/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \"Description should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Description(String desc) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(desc);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.value \u003d desc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/model/expense/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.ui.CountriesDropdown;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Description desc;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Country country;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Expense(Amount amount, Description desc, Type type) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.country \u003d new Country(CountriesDropdown.getDropdownText());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void setCountry(Country country) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns true if both expense have the same data fields."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * This defines a stronger notion of equality between two expenses."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return otherExpense.amount.value.equals(this.amount.value)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                \u0026\u0026 otherExpense.desc.value.equals(this.desc.value)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                \u0026\u0026 otherExpense.type.value.equals(this.type.value)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                \u0026\u0026 otherExpense.country.value.equals(this.country.value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/model/expense/Type.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \"Type should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Type(String desc) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(desc);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.value \u003d desc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static boolean isValidType(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/AddFinCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.financialtracker.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.financialtracker.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.financialtracker.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.AddFinCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Parses input arguments and creates a new AddFinCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class AddFinCommandParser implements Parser\u003cAddFinCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * AddFinCommand and returns an AddFinCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public AddFinCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_TYPE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_TYPE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFinCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Expense expense \u003d new Expense(amount, description, type);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new AddFinCommand(expense);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix((\"t/\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final Prefix PREFIX_COUNTRY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/DeleteFinCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.DeleteFinCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Parses input arguments and creates a new DeleteFinCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DeleteFinCommandParser implements Parser\u003cDeleteFinCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteFinCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * and returns a DeleteFinCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DeleteFinCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new DeleteFinCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteFinCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 27,
      "ngzhaoming": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/EditFinCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.financialtracker.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.financialtracker.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.financialtracker.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.financialtracker.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.EditFinCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Parses input arguments and creates a new EditFinCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class EditFinCommandParser implements Parser\u003cEditFinCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditFinCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * and returns an EditFinCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public EditFinCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_TYPE, PREFIX_COUNTRY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditFinCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        EditFinCommand.EditExpenseDescriptor editExpenseDescriptor \u003d new EditFinCommand.EditExpenseDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            editExpenseDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            editExpenseDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            editExpenseDescriptor.setType(ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COUNTRY).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            editExpenseDescriptor.setCountry();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(EditFinCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new EditFinCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/FinancialTrackerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.AddFinCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.DeleteFinCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.EditFinCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.SummaryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.GoToParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class FinancialTrackerParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        case AddFinCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new AddFinCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        case DeleteFinCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new DeleteFinCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new SummaryCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        case EditFinCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new EditFinCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new GoToParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 67,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * classes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *                        unsigned integer)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}. Leading and trailing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static Amount parseAmount(String name) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String trimmedAmount \u003d name.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}. Leading and"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String trimmedPhone \u003d description.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!Description.isValidDescription(trimmedPhone)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new Description(trimmedPhone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses a {@code String type} into a {@code Type}. Leading and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static Type parseType(String description) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String trimmedPhone \u003d description.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!Type.isValidType(trimmedPhone)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new Type(trimmedPhone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static PageType parsePageType(String pageType) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(pageType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String trimmedPageType \u003d pageType.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            PageType requestedPage \u003d PageType.valueOf(trimmedPageType.toUpperCase());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return requestedPage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(PageType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/ui/CountriesDropdown.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.ComboBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class CountriesDropdown extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String FXML \u003d \"CountriesDropdown.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    ObservableList\u003cString\u003e options \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private ComboBox\u003cString\u003e countriesDropdown;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static String field \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CountriesDropdown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String[] locales \u003d Locale.getISOCountries();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        for (String countryCode : locales) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            Locale obj \u003d new Locale(\"\", countryCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            options.add(obj.getDisplayCountry());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            Collections.sort(options);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        countriesDropdown.setItems(options);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        countriesDropdown.getSelectionModel().select(189); // Select Singapore as default"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String updateDropdownText() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return field \u003d countriesDropdown.getValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static String getDropdownText() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return field;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/ui/ExpenseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String FXML \u003d \"ExpenseCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Label desc;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Label country;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        country.setText(expense.getCountry().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        amount.setText(\"Amount: \" + expense.getAmount().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        desc.setText(\"Details: \" + expense.getDescription().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        type.setText(\"Type of expenditure: \" + expense.getType().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/ui/ExpensePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ExpensePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String FXML \u003d \"ExpensePanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpensePanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ExpensePanel(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/ui/FinancialTrackerHelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "@SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class FinancialTrackerHelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String HELP_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String HELP_MESSAGE \u003d \"For more information check out our user guide here: \\n\" + HELP_URL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String SUMMARY_MESSAGE \u003d \"summary\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String GOTO_MESSAGE \u003d \"goto [page]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"exit\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String ADD_MESSAGE \u003d \"add a/[amount] d/[description] (and select drop down menu)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String DELETE_MESSAGE \u003d \"delete [index]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String EDIT_MESSAGE \u003d \"edit [index] [type]/[details] or c/[(Select from drop down menu)]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FinancialTrackerHelpWindow.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String FXML \u003d \"FinancialTrackerHelpWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Button summaryCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Button helpCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Button gotoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Button exitCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Button addCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Button deleteCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Button editCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private FinancialTrackerHelpWindow(Stage root) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public FinancialTrackerHelpWindow() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        url.putString(HELP_URL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Copies the summary command template to the clipboard."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void copySummary() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        url.putString(SUMMARY_MESSAGE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Copies the summary command template to the clipboard."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void copyHelp() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        url.putString(HELP);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Copies the goto command template to the clipboard."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void copyGoto() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        url.putString(GOTO_MESSAGE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Copies the exit command template to the clipboard."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void copyExit() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        url.putString(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Copies the add command template to the clipboard."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void copyAdd() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        url.putString(ADD_MESSAGE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Copies the delete command template to the clipboard."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void copyDelete() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        url.putString(DELETE_MESSAGE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Copies the delete command template to the clipboard."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void copyEdit() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        url.putString(EDIT_MESSAGE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 209
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/ui/FinancialTrackerPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.ComboBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.AddFinCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.parser.FinancialTrackerParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.AddressBookLogic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.Page;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.ResultDisplay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * The Financial Tracker Window"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class FinancialTrackerPage extends UiPart\u003cVBox\u003e implements Page {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final static PageType pageType \u003d PageType.FINANCIAL_TRACKER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String FXML \u003d \"FinancialTrackerWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private FinancialTrackerHelpWindow helpWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private ExpensePanel expensePanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private FinancialTrackerParser financialTrackerParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private CountriesDropdown countriesDropdown;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Scene financialTrackerScene;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private VBox financialTrackerPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private StackPane expensePlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public FinancialTrackerPage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.financialTrackerParser \u003d new FinancialTrackerParser();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.model \u003d new Model();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.helpWindow \u003d new FinancialTrackerHelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        financialTrackerScene \u003d new Scene(financialTrackerPane);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void fillInnerParts() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expensePanel \u003d new ExpensePanel(model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expensePlaceholder.getChildren().add(expensePanel.getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        countriesDropdown \u003d new CountriesDropdown();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(countriesDropdown.getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @see AddressBookLogic#execute(String)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            //update dropDown menu"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            countriesDropdown.updateDropdownText();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            Command command \u003d financialTrackerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.financialTrackerScene.getWindow().hide();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return financialTrackerScene;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return pageType;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 146,
      "bjhoohaha": 2,
      "ngzhaoming": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * add event command for itinerary."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the itinerary, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"based on the following format:\\nadd title/[title] date/ [date] time/[time] l/[location] d/[desc]\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"NOTE: Only title is compulsory the rest can be left as empty fields.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Processing...\\nDone!\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Your event has been successfully added! HAND, TravEzy! :D\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        model.addEvent(event);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Represents a command with hidden internal itinerary and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param model {@code AddressBookModel} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "ngzhaoming": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/DeleteEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * delete event command for itinerary."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Processing...\\nDone!\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Your event has been deleted successfully. Yay! :^)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the event based on the specified index.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Format: delete [index]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public DeleteEventCommand(Index index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        ObservableList\u003cEvent\u003e modelList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int numIndex \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (modelList.size() \u003e numIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            model.deleteEvent(index.getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new CommandException(\"Easy pal! You seemed to input an invalid index.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    + \"This event does not exist! o(╥﹏╥)o\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/DoneEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Check and mark as done for the specified event in the itinerary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class DoneEventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Processing...\\nDone!\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Your event has been marked done successfully. Yay! :^)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Mark the event of the specified event as done.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Format: done [index]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param index of the event in the filtered event list to check as done"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public DoneEventCommand(Index index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        ObservableList\u003cEvent\u003e modelList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int numIndex \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (modelList.size() \u003e numIndex \u0026\u0026 !modelList.get(numIndex).getIsDone()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            Event event \u003d modelList.get(numIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            event.markIsDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            model.doneEvent(event, event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            model.updateFilteredEventList(Model.PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new CommandException(\"Easy pal! You seemed to input an invalid index.\\nEither \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    + \"this event does not exist or has already been marked done! O_o\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.exceptions.ItineraryException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.parser.CliSyntax;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Edits the details of an existing event in the itinerary."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@SuppressWarnings(\"MalformedFormatString\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"by the index number used in the displayed event list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + CliSyntax.PREFIX_DATE + \"15032015 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + CliSyntax.PREFIX_LOCATION + \"Singapore\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided. ╚(•⌂•)╝\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Updated successfully! :D\\n\" + \"HAND, TrazEzy~\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event exists in the address book.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param index of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param editEventDescriptor details to edit the event with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public EditCommand(Index index, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(editEventDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Event eventToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            model.setEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (ItineraryException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        model.updateFilteredEventList(Model.PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Title updatedTitle \u003d editEventDescriptor.getTitle().orElse(eventToEdit.getTitle());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Date updatedDate \u003d editEventDescriptor.getDate().orElse(eventToEdit.getDate());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Time updatedTime \u003d editEventDescriptor.getTime().orElse(eventToEdit.getTime());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Location updatedLocation \u003d editEventDescriptor.getLocation().orElse(eventToEdit.getLocation());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Description updatedDescription \u003d editEventDescriptor.getDescription().orElse(eventToEdit.getDesc());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Event event \u003d new Event(updatedTitle, updatedDate, updatedLocation, updatedDescription, updatedTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (eventToEdit.getIsDone()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            event.markIsDone();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * corresponding field value of the event."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public EditEventDescriptor() {}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        EditEventDescriptor(EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, date, time, location, description);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription () {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            if (!(other instanceof EditEventDescriptor)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            EditEventDescriptor e \u003d (EditEventDescriptor) other;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 221
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting TravEzy as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/GoToCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.PageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Navigate through the TravEzy application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String MESSAGE_CHANGE_SUCCESS \u003d \"Switching to %s page\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \": Goes to the page specified.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Parameters: \u0027address_book\u0027, \u0027calendar\u0027, \u0027diary\u0027, \u0027financial_tracker\u0027, \u0027itinerary\u0027, \u0027main\u0027\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" address_book\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private PageType pageType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public GoToCommand(PageType pageType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.pageType \u003d pageType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        PageManager.getPage(pageType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String respondMessage \u003d String.format(MESSAGE_CHANGE_SUCCESS, pageType.toString().toLowerCase());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(respondMessage, false, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/GreetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Greet thee user by giving the current date and time. Events for the day are also filtered and shown."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class GreetCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"greet\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private String message \u003d \"Hello! Welcome to the itinerary page!\\nThe time now is \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + dateGenerate() + \"\\nHere are the events that you have for the day!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        model.updateFilteredEventList(this::filterCurrentDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(message, false, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Get the current time and date before formatting it."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return the date and time formatted in HH:mm:ss, dd/MM/yy."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private String dateGenerate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"HH:mm:ss, dd/MM/yy\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return df.format(calendar.getTime());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Check and filter out events that match current day."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param event in the itinerary list to be check."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return filtered list with the current event for the day."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private boolean filterCurrentDate(Event event) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return event.getDate().toString().equals(df.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.ui.HelpCommandWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Opens up a window with the commands available for itinerary."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens up a window which showcase all\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \" the commands for itinerary.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Currently viewing the itinerary help window. (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private HelpCommandWindow helpWindow \u003d new HelpCommandWindow();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Give a list of the current events in the itinerary."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows all the event that you \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"currently have in your itinerary.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Processing...\\nDone!\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Here are all the events that you currently have in your itinerary!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        model.updateFilteredEventList(Model.PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Give a history on the previous action being called in the itinerary."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Commands called for this session (Most recent → Earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String MESSAGE_NO_REDO \u003d \"You have not yet entered any commands yet for this session.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Let\u0027s start using TravEzy now! Use help for more information! ٩◔‿◔۶\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(model.getActionList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new CommandResult(MESSAGE_NO_REDO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/SearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Search and list events from the itinerary based on conditions."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": TravEzy helps you to search and give you a life.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Returns a new list which reflects all the events that matches.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Parameters: search \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + PREFIX_DATE + \"15032015 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + PREFIX_LOCATION + \"Singapore\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Processing...\\nDone!\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Here are the events that matches the details. ( ͡° ͜ʖ ͡°)\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final SearchEventDescriptor searchEventDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public SearchCommand(SearchEventDescriptor searchEventDescriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(searchEventDescriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.searchEventDescriptor \u003d new SearchEventDescriptor(searchEventDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        model.updateFilteredEventList(this::filterEvents);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Filter the event list in the itinerary based on the search condition."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param event traverse through each event in the event list in itinerary."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return filtered list with the event which matches the search condition."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private boolean filterEvents(Event event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (searchEventDescriptor.getTitle().filter(title -\u003e !title.equals(event.getTitle())).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (searchEventDescriptor.getDate().filter(date -\u003e !date.equals(event.getDate())).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (searchEventDescriptor.getTime().filter(time -\u003e !time.equals(event.getTime())).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (searchEventDescriptor.getLocation().filter(location -\u003e !location.equals(event.getLocation())).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return searchEventDescriptor.getDescription().filter(description -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                !description.equals(event.getDesc())).isEmpty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * corresponding field value of the event."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static class SearchEventDescriptor {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public SearchEventDescriptor() {}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        SearchEventDescriptor(SearchEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, date, time, location, description);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription () {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            if (!(other instanceof SearchEventDescriptor)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            SearchEventDescriptor e \u003d (SearchEventDescriptor) other;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * sort the event list in the itinerary based on the condition given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Sort based on the following format: sort by/[alphabetical | chronological | completion].\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Example: sort by/alphabetical\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Processing...\\nDone!\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"TravEzy has helped sorted out your life!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/SummaryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.ui.SummaryCommandWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Opens up a window with the summary statistic for itinerary."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Currently viewing the itinerary summary window.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private SummaryCommandWindow summaryCommandWindow \u003d new SummaryCommandWindow();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Opens the summary window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void handleSummary() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!summaryCommandWindow.isShowing()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            summaryCommandWindow.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            summaryCommandWindow.focus();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        handleSummary();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Revert to the previous change in the event list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/WishCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * TravEzy look through previous entries and suggest three events for the given time slot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class WishCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/model/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.exceptions.ItineraryException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * An event list for tracking events on itinerary."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            FXCollections.unmodifiableObservableList(events);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void deleteEvent(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        events.remove(index - 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return events.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Mark the specified event in the itinerary event list as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param target the specified event to be marked done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param doneEvent the event with the attribute mark done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void doneEvent(Event target, Event doneEvent) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, doneEvent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int index \u003d events.indexOf(target);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        events.set(index, doneEvent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean contains(Event editedEvent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return events.contains(editedEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void setEvent(Event eventToEdit, Event editedEvent) throws ItineraryException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        CollectionUtil.requireAllNonNull(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int index \u003d events.indexOf(eventToEdit);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ItineraryException(\"Easy Pal! The index that you gave is not valid. O_o\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ItineraryException(\"Woah! Do at least try to make a single character change to your event! ;)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        events.set(index, editedEvent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/model/Itinerary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.exceptions.ItineraryException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Wraps all data at the itinerary level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Itinerary {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * ArrayList which stores all the events in the itinerary."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final EventList eventList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final ArrayList\u003cEventList\u003e savedList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final ArrayList\u003cString\u003e actionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Itinerary() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.eventList \u003d new EventList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.savedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.actionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return eventList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public ArrayList\u003cEventList\u003e getSavedList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return savedList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    ArrayList\u003cString\u003e getActionList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return actionList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void addAction(String commandText) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        actionList.add(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void resetPointer() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void addEvent(Event event) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        eventList.addEvent(event);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void deleteEvent(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        eventList.deleteEvent(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void doneEvent(Event target, Event doneEvent) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        eventList.doneEvent(target, doneEvent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Check whether the event list in the itinerary contain the specified event."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param editedEvent the newly created event with the fields changed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return a boolean whether the event exists in the event list of the itinerary."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    boolean hasEvent(Event editedEvent) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return eventList.contains(editedEvent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void setEvent(Event eventToEdit, Event editedEvent) throws ItineraryException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        eventList.setEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.exceptions.ItineraryException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Access the filtered event list of the itinerary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Itinerary itinerary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Model() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.itinerary \u003d new Itinerary();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(this.itinerary.getEventList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.itinerary.addEvent(event);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void deleteEvent(int index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.itinerary.deleteEvent(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void setEvent(Event eventToEdit, Event editedEvent) throws ItineraryException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        CollectionUtil.requireAllNonNull(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        itinerary.setEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public ArrayList\u003cString\u003e getActionList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return itinerary.getActionList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Filter out the events in the event list base on the predicate."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param predicate the condition use to filter out the events."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void  updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Mark the specified event in the itinerary event list as done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param target the specified event to be marked done."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param doneEvent the event with the attribute mark done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void doneEvent(Event target, Event doneEvent) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, doneEvent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        itinerary.doneEvent(target, doneEvent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Check whether the event list in the itinerary contain the specified event."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param editedEvent the newly created event with the fields changed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return a boolean whether the event exists in the event list of the itinerary."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean hasEvent(Event editedEvent) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return itinerary.hasEvent(editedEvent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Add the current action call into the action list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param commandText the command input that is given by the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void addAction(String commandText) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(commandText);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        itinerary.addAction(commandText);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        itinerary.resetPointer();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/model/event/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Date of the event in the itinerary."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \"Date should only contain numerals and be written in the DDMMYYYY format.\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Valid formats: 13071997, 11092001, 10101010 ✓\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Invalid formats: 13-07-1997, 11/09/2001, 12312011 ✗\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(3[01]|[12][0-9]|0[1-9])(1[0-2]|0[1-9])[0-9]{4}$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.date \u003d formatDate(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Format the date in the event to dd/MM/yyyy."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param date attribute in the given event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return formatted date based on dd/MM/yyyy."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private String formatDate(String date) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String day \u003d date.substring(0, 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String month \u003d date.substring(2, 4);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String year \u003d date.substring(4);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return day + \"/\" + month + \"/\" + year;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/model/event/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * A short description complementing the event in the itinerary."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \"We all know that you love typing on the CLI but the description of an event \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"should not contain any special characters and should be less than 100 characters.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(.{0,100})\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public final String desc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Description(String desc) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \u0026\u0026 desc.equals(((Description) other).desc)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/model/event/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * The events which makes up the itinerary list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Description desc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Event(Title title, Date date, Location location, Description desc, Time time) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Description getDesc() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void markIsDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Check whether two events have similar attribute value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param otherEvent another event in comparison to the current event."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return boolean result whether the two event have the same attribute value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \u0026\u0026 (otherEvent.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                || otherEvent.getDate().equals(getDate())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                || otherEvent.getTime().equals(getTime()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/model/event/Location.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Location of the event in the itinerary."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \"We all know that you love typing on the CLI but the location of an event \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"should not contain any special characters and should be less than 100 characters.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(.{0,100})\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public final String location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static boolean isValidLocation(String location) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return location.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \u0026\u0026 location.equals(((Location) other).location)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/model/event/Time.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Time attribute for the event in the itinerary."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \"Time should only contain numerals and be written in the 24hrs format.\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Valid formats: 0000, 0900, 1700, 2359 ✓\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Invalid formats: 00:00, 900, 9999 ✗\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([01]?[0-9]|2[0-3])[0-5][0-9]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public final String time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.time \u003d formatTime(time);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static boolean isValidTime(String time) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return time.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param time current time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return format current time based on HH:MM a.m. / p.m.."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private String formatTime(String time) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String minutes \u003d time.substring(2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String zone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (hour \u003e 12) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            hour -\u003d 12;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            zone \u003d \"p.m.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } else if (hour \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            hour \u003d 12;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            zone \u003d \"a.m.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            zone \u003d \"a.m.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return hour + \":\" + minutes + \" \" + zone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \u0026\u0026 time.equals(((Time) other).time)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/model/event/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * The title indicating the event in the itinerary."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \"Title should only contain any special characters and exceed 100 characters.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"In addition, it should not be empty too.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(.{1,100})\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if a given string is a valid title for the event in the itinerary."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/model/exceptions/ItineraryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Represents an error which occurs during execution of an itinerary command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class ItineraryException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Constructor for the ItineraryException class. It contains the error message"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * which specifies the error that occurred."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param message Takes in the error message which indicates the error."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public ItineraryException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/AddEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.AddEventCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @SuppressWarnings(\"OptionalGetWithoutIsPresent\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE, PREFIX_TIME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        PREFIX_LOCATION, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DATE, PREFIX_TIME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                PREFIX_LOCATION, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Event event \u003d new Event(title, date, location, description, time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"title/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"time/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/DeleteEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new DeleteEventCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/DoneEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.DoneEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class DoneEventCommandParser implements Parser\u003cDoneEventCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public DoneEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new DoneEventCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        PREFIX_TIME, PREFIX_LOCATION, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        EditCommand.EditEventDescriptor editEventDescriptor \u003d new EditCommand.EditEventDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            editEventDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            editEventDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            editEventDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            editEventDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            editEventDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new EditCommand(index, editEventDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/GoToParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.GoToCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Navigation throughout the TravEzy application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class GoToParser implements Parser\u003cGoToCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoToCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * and returns an GoTo object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public GoToCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            PageType pageType \u003d ParserUtil.parsePageType(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new GoToCommand(pageType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/ItineraryParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.AddEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.DoneEventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.GoToCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.GreetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.SearchCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.SummaryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class ItineraryParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case GreetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new GreetCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new SummaryCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new GoToParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case DoneEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new DoneEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(\"I know you like travelling but the input command is out of this \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        + \"world! :3\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param pageType the specified page to navigate to in TravEzy."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return the specified page type and navigate to that page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the specified page is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static PageType parsePageType(String pageType) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(pageType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String trimmedPageType \u003d pageType.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            PageType requestedPage \u003d PageType.valueOf(trimmedPageType.toUpperCase());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return requestedPage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(PageType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static Title parseTitle(String name) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String trimmedTitle \u003d name.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static Description parseDescription(String name) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String trimmedDesc \u003d name.trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!Description.isValidDescription(trimmedDesc)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new Description(trimmedDesc);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static Location parseLocation(String name) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String trimmedLocation \u003d name.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses a {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static Time parseTime(String name) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String trimmedTime \u003d name.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new Time(trimmedTime);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param date the date that is being specified by the user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @return the formatted date in dd/MM/yy."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/SearchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.itinerary.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.SearchCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE, PREFIX_TIME,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        PREFIX_LOCATION, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        SearchCommand.SearchEventDescriptor searchEventDescriptor \u003d new SearchCommand.SearchEventDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            searchEventDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            searchEventDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            searchEventDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            searchEventDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            searchEventDescriptor.setDescription(ParserUtil.parseDescription(argMultimap"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    .getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!searchEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(SearchCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new SearchCommand(searchEventDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Parses input arguments and creates a new SortCommand object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class SortCommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/ui/EventCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String fxmlCard \u003d \"EventCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Label loc;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Label desc;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private ImageView checkBox;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        super(fxmlCard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        title.setText(event.getTitle().title);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        desc.setText(event.getDesc().desc);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        loc.setText(event.getLocation().location);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        date.setText(event.getDate().date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        time.setText(event.getTime().time);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Image image;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (event.getIsDone() \u003d\u003d true) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            image \u003d new Image(\"/images/tick.png\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            image \u003d new Image(\"/images/cross.png\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        checkBox.setImage(image);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/ui/EventPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class EventPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String fxmlPanel \u003d \"EventPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public EventPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        super(fxmlPanel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/ui/HelpCommandWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class HelpCommandWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String HELP_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String HELP_MESSAGE \u003d \"For more information check out our user guide here: \\n\" + HELP_URL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String GREET_MESSAGE \u003d \"greet\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String SUMMARY_MESSAGE \u003d \"summary\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String GOTO_MESSAGE \u003d \"goto [page]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"exit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String ADD_MESSAGE \u003d \"add title/[title] date/[date] time/[time] l/[location] d/[description]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String DELETE_MESSAGE \u003d \"delete [index]\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String EDIT_MESSAGE \u003d \"edit [index] [type]/[details]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String DONE_MESSAGE \u003d \"done [index]\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String LIST_MESSAGE \u003d \"list\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String SORT_MESSAGE \u003d \"sort by/[alphabetical | chronological | completion]\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String REDO_MESSAGE \u003d \"redo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String UNDO_MESSAGE \u003d \"undo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String SEARCH_MESSAGE \u003d \"search by/[title | date | time | location] [keyword]\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String WISH_MESSAGE \u003d \"wish by/[activity | time] [details]\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String INSTA_URL \u003d \"https://www.instagram.com/zhaoming_boiboi/\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String GITHUB_URL \u003d \"https://github.com/ngzhaoming\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String WEBSITE_URL \u003d \"https://ngzhaoming.github.io/\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpCommandWindow.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String FXML \u003d \"HelpCommandWindow.fxml\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button greetCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button summaryCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button helpCommand;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button gotoCommand;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button exitCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button addCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button deleteCommand;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button editCommand;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button doneCommand;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button listCommand;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button sortCommand;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button redoCommand;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button undoCommand;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button searchCommand;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button wishCommand;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button instagramCommand;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button githubCommand;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button websiteCommand;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private HelpCommandWindow(Stage root) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public HelpCommandWindow() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(HELP_URL);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the greet command template to the clipboard."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyGreet() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(GREET_MESSAGE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the summary command template to the clipboard."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copySummary() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(SUMMARY_MESSAGE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the summary command template to the clipboard."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyHelp() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(HELP);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the goto command template to the clipboard."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyGoto() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(GOTO_MESSAGE);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the exit command template to the clipboard."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyExit() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the add command template to the clipboard."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyAdd() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(ADD_MESSAGE);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the delete command template to the clipboard."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyDelete() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(DELETE_MESSAGE);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the edit command template to the clipboard."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyEdit() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(EDIT_MESSAGE);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the done command template to the clipboard."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyDone() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(DONE_MESSAGE);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the list command template to the clipboard."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyList() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(LIST_MESSAGE);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the sort command template to the clipboard."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copySort() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(SORT_MESSAGE);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the redo command template to the clipboard."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyRedo() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(REDO_MESSAGE);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the undo command template to the clipboard."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyUndo() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(UNDO_MESSAGE);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the search command template to the clipboard."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copySearch() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(SEARCH_MESSAGE);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the wish command template to the clipboard."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyWish() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(WISH_MESSAGE);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Opens up user default browser to the instagram URL"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void gotoInstagram() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            Desktop.getDesktop().browse(new URL(INSTA_URL).toURI());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (IOException | URISyntaxException e) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Opens up user default browser to the Github URL"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void gotoGithub() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            Desktop.getDesktop().browse(new URL(GITHUB_URL).toURI());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (IOException | URISyntaxException e) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Opens up user default browser to the Website URL"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void gotoWebsite() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            Desktop.getDesktop().browse(new URL(WEBSITE_URL).toURI());"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (IOException | URISyntaxException e) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 381
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/ui/ItineraryPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.parser.ItineraryParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.AddressBookLogic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.Page;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.ResultDisplay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "@SuppressWarnings({\"unused\", \"FieldCanBeLocal\"})"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class ItineraryPage extends UiPart\u003cVBox\u003e implements Page {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final PageType pageType \u003d PageType.ITINERARY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String fxmlWindow \u003d \"ItineraryWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private EventPanel eventPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private ItineraryParser itineraryParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Scene itineraryScene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private BorderPane itineraryPane;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private StackPane eventPlaceHolder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public ItineraryPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        super(fxmlWindow);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.itineraryScene \u003d new Scene(itineraryPane);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.itineraryParser \u003d new ItineraryParser();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.model \u003d new Model();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void fillInnerParts() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        eventPanel \u003d new EventPanel(model.getFilteredEventList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        eventPlaceHolder.getChildren().add(eventPanel.getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return pageType;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return itineraryScene;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Changes application page."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void handlePageChange(CommandResult commandResult) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.itineraryScene.getWindow().hide();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @see AddressBookLogic#execute(String)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            Command command \u003d itineraryParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            model.addAction(commandText);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            if (commandResult.isShowPage()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                handlePageChange(commandResult);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "ngzhaoming": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/ui/SummaryCommandWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.model.Itinerary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Opens up a window with a summary of the events in itinerary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class SummaryCommandWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SummaryCommandWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String FXML \u003d \"SummaryCommandWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Label summaryMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private SummaryCommandWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Itinerary itinerary \u003d new Itinerary();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String summary \u003d \"You current have \" + itinerary.getEventList().size()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                + \" events in your list.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        summaryMessage.setText(summary);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Creates a new Summary Window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public SummaryCommandWindow() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        logger.fine(\"Showing summary page about the application.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.logic.AchievementsLogic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.AddressBookLogic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * API of the AddressBookLogic component"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Storage getStorage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddressBookLogic getAddressBookLogic();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AchievementsLogic getAchievementsLogic();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.logic.AchievementsLogic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.logic.AchievementsLogicManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.AddressBookLogic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.AddressBookLogicManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefsModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The main AddressBookLogicManager of the app."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookLogic addressBookLogic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AchievementsLogic achievementsLogic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private UserPrefsModel userPrefsModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // overloaded AddressBook Logic Manager to pass main model in"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // main model is used to save gui settings"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.userPrefsModel \u003d model.getUserPrefsModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.addressBookLogic \u003d new AddressBookLogicManager(userPrefsModel, model.getAddressBookModel(), storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.achievementsLogic \u003d new AchievementsLogicManager(model.statisticsModelSupplier());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddressBookLogic getAddressBookLogic() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return addressBookLogic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AchievementsLogic getAchievementsLogic() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return achievementsLogic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return userPrefsModel.getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userPrefsModel.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 24,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Represents a command with hidden internal addressBookLogic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public abstract class Command\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param mainModel {@code mainModel} which the command should operate on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public abstract CommandResult execute(T mainModel) throws CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application page should change. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showPage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    // todo: remove this method if we are implementing goto command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showPage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showPage \u003d showPage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, showHelp, exit, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets feedback string for system uses."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback obtained after executing command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedback() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Checks whether user is requesting for a change in page."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return {@code true} only if user wants to calendar, diary, financial tracker, itinerary or address book to show"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowPage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return showPage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 97,
      "ngzhaoming": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ExitCommand\u003cT\u003e extends Command\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(T model) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GoToCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.PageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * GoTo a specific page with user input entered by the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class GoToCommand\u003cT\u003e extends Command\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_CHANGE_SUCCESS \u003d \"Switching to %s page\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \": Goes to the page specified.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Parameters: \u0027address_book\u0027, \u0027calendar\u0027, \u0027diary\u0027, \u0027financial_tracker\u0027, \u0027itinerary\u0027, \u0027main\u0027\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" address_book\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private PageType pageType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public GoToCommand(PageType pageType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.pageType \u003d pageType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(T model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        PageManager.getPage(pageType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String respondMessage \u003d String.format(MESSAGE_CHANGE_SUCCESS, pageType.toString().toLowerCase());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(respondMessage, false, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "bjhoohaha": 3,
      "ngzhaoming": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SampleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Just a sample command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "// todo: remove this class before v1.3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class SampleCommand extends Command\u003cAddressBookModel\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sample\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows you your calendar.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // todo-this-week: update value of showing_...__message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // value should be \"diary\", \"itinerary\", \"calendar\", \"financial_tracker\", or \"address_book\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_SAMPLE_MESSAGE \u003d \"sample\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public CommandResult execute(AddressBookModel addressBookModel) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_SAMPLE_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 1,
      "bjhoohaha": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GoToParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * A parser to parse user input and create a GoToCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class GoToParser implements Parser\u003cGoToCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoToCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * and returns an GoToCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public GoToCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            PageType pageType \u003d ParserUtil.parsePageType(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new GoToCommand(pageType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, GoToCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 8,
      "ngzhaoming": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.country.Country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses a {@code String country} into a {@code Country}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ParseException if the given {@code country} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static Country parseCountry(String country) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        requireNonNull(country);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String trimmedCountry \u003d country.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (!Country.isValidCountry(trimmedCountry)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new ParseException(Country.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new Country(trimmedCountry);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses {@code String pageType} into a {@code PageType}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param pageType"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @return a {@code PageType} object."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ParseException if the given {@code pageType} is invalid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static PageType parsePageType(String pageType) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(pageType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String trimmedPageType \u003d pageType.trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            PageType requestedPage \u003d PageType.valueOf(trimmedPageType.toUpperCase());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return requestedPage;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(PageType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 27,
      "-": 119,
      "ngzhaoming": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.model.StatisticsModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * The API of the AddressBookModel component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    AddressBookModel getAddressBookModel();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    UserPrefsModel getUserPrefsModel();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    Supplier\u003cStatisticsModel\u003e statisticsModelSupplier();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 7,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.model.StatisticsModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.model.StatisticsModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Represents the in-memory addressBookModel of the address book data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    //main model used to save GUI settings and get user preferences"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private UserPrefsModel userPrefsModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel addressBookModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public ModelManager(UserPrefsModel userPrefsModel, AddressBookModel addressBookModel) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.userPrefsModel \u003d userPrefsModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.addressBookModel \u003d addressBookModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public AddressBookModel getAddressBookModel() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return addressBookModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public UserPrefsModel getUserPrefsModel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return userPrefsModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Supplier\u003cStatisticsModel\u003e statisticsModelSupplier() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new Supplier\u003cStatisticsModel\u003e() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            public StatisticsModel get() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                return new StatisticsModelManager(addressBookModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 22,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefsModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Main Model to get and set {@Code UserPrefs} and {@Code GuiSettings}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public interface UserPrefsModel {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefsModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Represents the in-memory addressBookModel of the address book data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class UserPrefsModelManager implements UserPrefsModel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UserPrefsModelManager.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private UserPrefs userPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public UserPrefsModelManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public UserPrefsModelManager(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (!(obj instanceof UserPrefsModelManager)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        UserPrefsModelManager other \u003d (UserPrefsModelManager) obj;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CodeWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class CodeWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String GITHUB_URL \u003d \"https://github.com/AY1920S1-CS2103T-T17-2/main\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String SOURCECODE_MESSAGE \u003d \"Refer to the user guide: \" + GITHUB_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CodeWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CodeWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        helpMessage.setText(SOURCECODE_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CodeWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        url.putString(GITHUB_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "ngzhaoming": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "ngzhaoming": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ListElementPointer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw a {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw a {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw a {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.achievements.ui.AchievementsPage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.AddressBookLogic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.ui.AddressBookPage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.ui.PersonListPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.calendar.ui.CalendarPage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryUI.DiaryPage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.ui.FinancialTrackerPage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.ui.ItineraryPage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "//import seedu.address.address.ui.AddressBookPage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e implements Page {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Scene mainScene;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private CodeWindow codeWindow;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private FinancialTrackerPage financialTrackerPage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private CalendarPage calendarPage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private ItineraryPage itineraryPage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private DiaryPage diaryPage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AchievementsPage achievementsPage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookPage addressBookPage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Scene commonScene;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        codeWindow \u003d new CodeWindow();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        financialTrackerPage \u003d new FinancialTrackerPage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        calendarPage \u003d new CalendarPage();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        itineraryPage \u003d new ItineraryPage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        diaryPage \u003d new DiaryPage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        achievementsPage \u003d new AchievementsPage(primaryStage, logic.getAchievementsLogic());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookPage \u003d new AddressBookPage(primaryStage, logic.getAddressBookLogic());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        mainScene \u003d primaryStage.getScene();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // todo-this-week: call the PageScene constructor with your page scene instead,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // e.g. Pages(primaryScene, diaryScene)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // note that one of the PageScene\u0027s constructor is a vararg"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        PageManager.getInstance(primaryStage, mainScene, new SamplePage(), calendarPage, itineraryPage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                financialTrackerPage, diaryPage, achievementsPage, addressBookPage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666 is fixed in later version of"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * SDK."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will not"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * work when the focus is in them because the key event is consumed by the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * TextInputControl(s)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * help window purposely so to support accelerators even when focus is in"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getAddressBookLogic().getFilteredPersonList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookLogic().getAddressBookFilePath());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Opens the code window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void handleCode() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!codeWindow.isShowing()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            codeWindow.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            codeWindow.focus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @see AddressBookLogic#execute(String)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            CommandResult commandResult \u003d logic.getAddressBookLogic().execute(commandText);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return mainScene;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return PageType.MAIN;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 30,
      "tishyakhanna97": 4,
      "bjhoohaha": 14,
      "-": 186,
      "ngzhaoming": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Page.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Page for a specified feature / extension."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "// todo-this-week: get your page to implement this interface, refer to SamplePage for a concrete example"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Page {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the scene for {@code this} page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return scene for {@code this} page"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Scene getScene();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the page type of {@code this} page"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return page type of {@code this} page"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    PageType getPageType();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.animation.FadeTransition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * A singleton task that handles all UI for page navigation. It must be initialised using {@code getInstance} before"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * use."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class PageManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static Stage primaryStage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static List\u003cPage\u003e pages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static Scene mainPageScene;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static Optional\u003cPageManager\u003e pageManager \u003d Optional.empty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    // prevent multiple instances of pages"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private PageManager(Stage primaryStage, Scene mainPageScene, Page... pages) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.mainPageScene \u003d mainPageScene;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.pages \u003d Stream.of(pages)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static PageManager getInstance(Stage primaryStage, Scene mainPageScene, Page... pages) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        pageManager \u003d Optional.of(new PageManager(primaryStage, mainPageScene, pages));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return pageManager.get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static void getPage(PageType pageType) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (pageManager.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            assert false : \"Page manager has to be initialised before other pages can be retrieved\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Optional\u003cScene\u003e requestedPage \u003d pages.stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .filter(p -\u003e p.getPageType().equals(pageType))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .map(p -\u003e p.getScene())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (requestedPage.isEmpty() \u0026\u0026 pageType.equals(PageType.MAIN)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            requestedPage \u003d Optional.of(mainPageScene);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } else if (requestedPage.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            assert false : \"Every get page command should have a page class implemented for it\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author bjhoohaha-reused"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //Credits to : Asfal, Genuine Coder"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //https://www.genuinecoder.com/javafx-scene-switch-change-animation/"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Scene requestedScene \u003d requestedPage.get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //Fade out transition"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        FadeTransition fadeOutTransition \u003d new FadeTransition(Duration.millis(500), primaryStage.getScene().getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        fadeOutTransition.setFromValue(1.0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        fadeOutTransition.setToValue(0.0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        fadeOutTransition.play();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        primaryStage.setScene(requestedScene);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //Fade in transition"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        FadeTransition fadeInTransition \u003d new FadeTransition(Duration.millis(500), requestedPage.get().getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        fadeInTransition.setFromValue(0.0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        fadeInTransition.setToValue(1.0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        fadeInTransition.play();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 19,
      "-": 1,
      "ngzhaoming": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PageType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Enumerates possible page type for travezy application, for purpose of page navigation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public enum PageType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    ADDRESS_BOOK, CALENDAR, DIARY, FINANCIAL_TRACKER, ITINERARY, MAIN, ACHIEVEMENTS, SAMPLE; // todo remove SAMPLE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Only the following arguments are allowed: \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"address_book, calendar, diary,financial_tracker, itinerary, main\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static PageType of(String string) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return PageType.valueOf(string.toUpperCase());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 4,
      "-": 8,
      "ngzhaoming": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SamplePage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Sample page template to create a new place when required."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "// todo: remove this class when everyone has implemented their page"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class SamplePage implements Page {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final PageType pageType \u003d PageType.SAMPLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Scene sampleScene \u003d new Scene(new VBox());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return pageType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleScene;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/Achievements.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003cfx:root fx:id\u003d\"achievementsPane\" stylesheets\u003d\"@DarkTheme.css\" type\u003d\"BorderPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" styleClass\u003d\"achievement-pane\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003ctop\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003c/Menu\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Code\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003cMenuItem fx:id\u003d\"codeMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCode\" text\u003d\"Git Code\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003c/Menu\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003c/Menu\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cImageView preserveRatio\u003d\"true\" fitHeight\u003d\"150\" fx:id\u003d\"title\"\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003c/top\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003cleft\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cVBox prefWidth\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003c/left\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003ccenter \u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cHBox prefWidth\u003d\"340\" style\u003d\"-fx-background-color:#9E9E9E;-fx-opacity: 0.5;\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cLabel fx:id \u003d\"test\" wrapText\u003d\"true\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003c/center\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003cright\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cVBox prefWidth\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003c/right\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003cbottom\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "          \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "              \u003cInsets bottom\u003d\"5\" left\u003d\"50\" right\u003d\"50\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cHBox fillHeight\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "          \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "              \u003cInsets bottom\u003d\"5\" left\u003d\"50\" right\u003d\"50\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003c/bottom\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 67
    }
  },
  {
    "path": "src/main/resources/view/AddressBookPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"addressBookBox\" minHeight\u003d\"600\" minWidth\u003d\"450\" type\u003d\"VBox\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Code\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cMenuItem fx:id\u003d\"codeMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCode\" text\u003d\"Git Code\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "             styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 48
    }
  },
  {
    "path": "src/main/resources/view/CodeWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 39
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "ngzhaoming": 1
    }
  },
  {
    "path": "src/main/resources/view/CountriesDropdown.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.ComboBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003cComboBox fx:id\u003d\"countriesDropdown\" prefHeight\u003d\"25.0\" prefWidth\u003d\"197.0\" promptText\u003d\"Singapore\" style\u003d\"-fx-text-fill: white; -fx-font-size: 15; -fx-background-color: white;\" stylesheets\u003d\"@DarkTheme.css\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c/ComboBox\u003e"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 14
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".table-view .column-header,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".table-view .filler {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-size: 35;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-alignment: center-left;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-opacity: 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-radius: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-insets: 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #515658;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 16px;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 13px;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 4px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 1px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 2;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-radius: 0;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".button:pressed,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".button:default:hover:pressed {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: white, white;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".button:disabled,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".scroll-bar .increment-button,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".scroll-bar .increment-arrow,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-shape: \" \";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".scroll-bar:vertical .increment-arrow,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".scroll-bar:horizontal .increment-arrow,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 11px;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-text-fill: #f70d1a;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-insets: 0;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-insets: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-width: 1;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "#filterField,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "#personListPanel,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "#personWebpage {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-radius: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-hgap: 7;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-vgap: 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-border-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-font-size: 11;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "#country {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-color: transparent, #7b1fa2;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  -fx-label-padding: 5, 2, 5, 2;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  -fx-background-radius: 0, 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  -fx-background-insets: 2;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ".achievement-pane {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  -fx-background-color: #383838;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  -fx-background-size: cover;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".combo-box .list-cell {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background: white;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-text-fill: -fx-text-base-color;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-padding: 3 0 2 7;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-cell-size: 1.66667em;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".combo-box-popup .list-view {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-color: white, white;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-insets: 0, 1;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-effect: dropshadow(three-pass-box, rgba(0, 0, 0, 0.6), 8, 0, 0, 0);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".combo-box-popup .list-view .list-cell {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-padding: 4 0 4 5;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  /* No alternate highlighting */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".combo-box-popup .list-view .list-cell:filled:selected,"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".combo-box-popup .list-view .list-cell:filled:selected:hover {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background: -fx-accent;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-color: -fx-selection-bar;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-text-fill: -fx-selection-bar-text;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".combo-box-popup .list-view .list-cell:filled:hover {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-text-fill: -fx-text-inner-color;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".combo-box-base {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-skin: \"com.sun.javafx.scene.control.skin.ComboBoxBaseSkin\";"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-color: white, white, white, white;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-radius: 5, 5, 4, 3;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-insets: 0 0 -1 0, 0, 1, 2;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-padding: 0;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".combo-box-base:hover {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-color: -fx-hover-base;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".combo-box-base:showing {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-color: -fx-pressed-base;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".combo-box-base:focused {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border,"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    -fx-body-color;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-radius: 6.4, 4, 5, 3;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-background-insets: -1.4, 0, 1, 2;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ".combo-box-base:disabled {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 80,
      "bjhoohaha": 15,
      "-": 338
    }
  },
  {
    "path": "src/main/resources/view/DiaryPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003cfx:root fx:id\u003d\"diaryPane\" stylesheets\u003d\"@DarkTheme.css\" type\u003d\"VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Diary Pane\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefHeight\u003d\"111.0\" prefWidth\u003d\"131.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" alignment\u003d\"BOTTOM_LEFT\" maxHeight\u003d\"300.0\" minHeight\u003d\"26.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"54.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 29
    }
  },
  {
    "path": "src/main/resources/view/EventCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefHeight\u003d\"105.0\" prefWidth\u003d\"194.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        \u003cImageView fx:id\u003d\"checkBox\" fitHeight\u003d\"17.0\" fitWidth\u003d\"16.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cRegion prefHeight\u003d\"17.0\" prefWidth\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" lineSpacing\u003d\"2.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\\\\\$title\" underline\u003d\"true\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cFont name\u003d\"Chalkboard\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003cVBox prefHeight\u003d\"0.0\" prefWidth\u003d\"130.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cHBox prefHeight\u003d\"14.0\" prefWidth\u003d\"128.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cLabel text\u003d\"📅DATE: \"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                           \u003cFont name\u003d\"Chalkboard\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\\\$date\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cHBox prefHeight\u003d\"14.0\" prefWidth\u003d\"128.0\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cLabel text\u003d\"⏰TIME: \"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                           \u003cFont name\u003d\"Chalkboard\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\\\$time\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cHBox prefHeight\u003d\"5.0\" prefWidth\u003d\"129.0\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cLabel text\u003d\"📍LOCATION: \"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                           \u003cFont name\u003d\"Chalkboard\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cLabel fx:id\u003d\"loc\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\\\$loc\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cHBox prefHeight\u003d\"10.0\" prefWidth\u003d\"134.0\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cLabel text\u003d\"📓DESCRIPTION: \"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                           \u003cFont name\u003d\"Chalkboard SE Light\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cLabel fx:id\u003d\"desc\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\\\$desc\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 88
    }
  },
  {
    "path": "src/main/resources/view/EventPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 8
    }
  },
  {
    "path": "src/main/resources/view/ExpenseCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                  \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                     \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                  \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003cLabel fx:id\u003d\"country\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$country\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$type\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$amount\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cLabel fx:id\u003d\"desc\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$desc\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 39
    }
  },
  {
    "path": "src/main/resources/view/ExpensePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003cListView fx:id\u003d\"expenseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 8
    }
  },
  {
    "path": "src/main/resources/view/FinancialTrackerHelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.ToolBar?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         \u003cVBox prefHeight\u003d\"322.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                     \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                           \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                     \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                           \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                     \u003c/Button\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                  \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                     \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                  \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                     \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003cTabPane prefHeight\u003d\"267.0\" prefWidth\u003d\"496.0\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                 \u003ctabs\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                     \u003cTab text\u003d\"Basic\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                           \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"233.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                 \u003cText layoutX\u003d\"11.0\" layoutY\u003d\"19.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Here are the basics to navigate through itinerary:\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                 \u003cHBox layoutY\u003d\"32.0\" prefHeight\u003d\"152.0\" prefWidth\u003d\"316.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                       \u003cVBox minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"196.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cLabel text\u003d\"summary: Give relevant statistics on financial tracker.\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"94.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"summaryCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copySummary\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"232.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cLabel text\u003d\"help: Help window with the commands to use financial tracker feature\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"helpCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyHelp\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"232.0\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cLabel text\u003d\"goto [page]: Navigate to the desired page\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"162.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"gotoCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyGoto\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"68.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cText fontSmoothingType\u003d\"LCD\" smooth\u003d\"false\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"exit: Quits TravEzy and closes the application\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                      \u003cfont\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                         \u003cFont name\u003d\"System Font\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                      \u003c/font\u003e\u003c/Text\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"141.0\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"exitCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyExit\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                          \u003c/children\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                       \u003c/VBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                 \u003c/HBox\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                           \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                     \u003c/Tab\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                   \u003cTab text\u003d\"Commands\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                       \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"233.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                 \u003cText layoutX\u003d\"11.0\" layoutY\u003d\"19.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Here are the commands which requires parameters in the financial tracker:\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                 \u003cHBox layoutY\u003d\"32.0\" prefHeight\u003d\"152.0\" prefWidth\u003d\"316.0\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                       \u003cVBox minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"194.0\" prefWidth\u003d\"497.0\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"29.0\" prefWidth\u003d\"493.0\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                               \u003citems\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cLabel text\u003d\"Add expense: add a/[amount] d/[description] (and select drop down menu)\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                 \u003cButton fx:id\u003d\"addCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyAdd\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                               \u003c/items\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                               \u003citems\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cLabel text\u003d\"Delete expense: delete [index]\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"249.0\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                 \u003cButton fx:id\u003d\"deleteCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyDelete\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                               \u003c/items\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cLabel text\u003d\"Edit expense: edit [index] a/[amount] d/[description] t/[type] c/[(select the dropdown menu)]\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"249.0\" /\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"editCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyEdit\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                          \u003c/children\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                       \u003c/VBox\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                 \u003c/HBox\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                              \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                   \u003c/Tab\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                 \u003c/tabs\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 140
    }
  },
  {
    "path": "src/main/resources/view/FinancialTrackerWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003cVBox fx:id\u003d\"financialTrackerPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Financial Tracker\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003cVBox fx:id\u003d\"expenseList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cStackPane fx:id\u003d\"expensePlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" alignment\u003d\"CENTER_RIGHT\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 36,
      "ngzhaoming": 6
    }
  },
  {
    "path": "src/main/resources/view/HelpCommandWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Accordion?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.ToolBar?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003cVBox prefHeight\u003d\"322.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                           \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                           \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/Button\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cTabPane prefHeight\u003d\"267.0\" prefWidth\u003d\"496.0\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                 \u003ctabs\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cTab text\u003d\"Basic\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                           \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"233.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003cText layoutX\u003d\"11.0\" layoutY\u003d\"19.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Here are the basics to navigate through itinerary:\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003cHBox layoutY\u003d\"32.0\" prefHeight\u003d\"152.0\" prefWidth\u003d\"316.0\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003cVBox minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"196.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"395.0\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"greet: Take a look at what events you have today!\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"114.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"greetCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyGreet\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"summary: Give relevant statistics on the itinerary list.\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"94.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"summaryCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copySummary\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"232.0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"help: Help window with the commands to use itinerary feature\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"helpCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyHelp\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"232.0\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"goto [page]: Navigate to the desired page\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"162.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"gotoCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyGoto\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"68.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cText fontSmoothingType\u003d\"LCD\" smooth\u003d\"false\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"exit: Quits TravEzy and closes the application\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                      \u003cfont\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                         \u003cFont name\u003d\"System Font\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                      \u003c/font\u003e\u003c/Text\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"141.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"exitCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyExit\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                          \u003c/children\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003c/VBox\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003c/HBox\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                           \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/Tab\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                   \u003cTab text\u003d\"Commands\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                       \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"233.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003cText layoutX\u003d\"11.0\" layoutY\u003d\"19.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Here are the commands which requires parameters in the itinerary:\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003cHBox layoutY\u003d\"32.0\" prefHeight\u003d\"152.0\" prefWidth\u003d\"316.0\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003cVBox minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"194.0\" prefWidth\u003d\"497.0\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"29.0\" prefWidth\u003d\"493.0\"\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                               \u003citems\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"Add event: add t/[title] date/[date] time/[time] l/[location] d/[desc]\" /\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                 \u003cButton fx:id\u003d\"addCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyAdd\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                               \u003c/items\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                               \u003citems\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"Delete event: delete [index]\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"249.0\" /\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                 \u003cButton fx:id\u003d\"deleteCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyDelete\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                               \u003c/items\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"232.0\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                               \u003citems\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"Edit event: edit [index] [type]/[details]\" /\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"184.0\" /\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                 \u003cButton fx:id\u003d\"editCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyEdit\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                               \u003c/items\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"232.0\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"Done event: done [index]\" /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"264.0\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"Command\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyDone\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"68.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"List event: list\" /\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"333.0\" /\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"listCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyList\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                          \u003c/children\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003c/VBox\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003c/HBox\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                              \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                   \u003c/Tab\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cTab text\u003d\"Advanced\"\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                           \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"233.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003cText layoutX\u003d\"11.0\" layoutY\u003d\"19.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Here are the command for advanced users ONLY! Strictly not for newbies!\" /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003cHBox layoutY\u003d\"32.0\" prefHeight\u003d\"152.0\" prefWidth\u003d\"316.0\"\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003cVBox minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"194.0\" prefWidth\u003d\"493.0\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"29.0\" prefWidth\u003d\"493.0\"\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"Sort: sort by/[alphabetical | chronological | completion]\" /\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"79.0\" /\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"sortCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copySort\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"Redo: Recall previous command using the \u0026quot;↑\u0026quot; or \u0026quot;↓\u0026quot; arrow key\" /\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"28.0\" /\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"redoCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyRedo\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"232.0\"\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"Undo: Undo the previous few commands from itinerary page\" /\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"48.0\" /\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"undoCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUndo\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"232.0\"\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"Search event: search by/[title | date | time | location] [keyword]\" /\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"29.0\" /\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"searchCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copySearch\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cToolBar prefHeight\u003d\"68.0\" prefWidth\u003d\"496.0\"\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003citems\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel text\u003d\"Wish: Wish for the perfect event. Based on various conditions given. \" /\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cButton fx:id\u003d\"wishCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyWish\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/items\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                          \u003c/children\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003c/VBox\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003c/HBox\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                           \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/Tab\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cTab text\u003d\"Contact Me\"\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                       \u003ccontent\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                         \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003cImageView fitHeight\u003d\"185.0\" fitWidth\u003d\"149.0\" layoutX\u003d\"333.0\" layoutY\u003d\"32.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003cImage url\u003d\"@../../../../docs/images/ngzhaoming.png\" /\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003cAccordion layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"216.0\" prefWidth\u003d\"305.0\"\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                   \u003cpanes\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                     \u003cTitledPane animated\u003d\"false\" prefHeight\u003d\"174.0\" prefWidth\u003d\"305.0\" text\u003d\"About itinerary\"\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003ccontent\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                         \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"34.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cTextArea layoutX\u003d\"2.0\" layoutY\u003d\"4.0\" prefHeight\u003d\"128.0\" prefWidth\u003d\"298.0\" text\u003d\"Thank you for using TravEzy itinerary. We \u0026#10;ensure that you are on schedule and keep\u0026#10;track of all your activities. Should there be \u0026#10;any issue, please do not hesitate to file an \u0026#10;issue report to my GitHub (provided below)!\" /\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003c/content\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                     \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                     \u003cTitledPane animated\u003d\"false\" prefHeight\u003d\"138.0\" prefWidth\u003d\"305.0\" text\u003d\"Social Media\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003ccontent\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                         \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"0.0\" prefWidth\u003d\"303.0\"\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel layoutX\u003d\"14.0\" layoutY\u003d\"6.0\" text\u003d\"Find me through social media! :3\" /\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cVBox layoutX\u003d\"14.0\" layoutY\u003d\"29.0\" prefHeight\u003d\"81.0\" prefWidth\u003d\"279.0\"\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                      \u003cchildren\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                         \u003cToolBar prefHeight\u003d\"31.0\" prefWidth\u003d\"279.0\"\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                           \u003citems\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                               \u003cLabel text\u003d\"Instagram\" /\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                               \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"112.0\" /\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                             \u003cButton fx:id\u003d\"instagramCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#gotoInstagram\" text\u003d\"Go to URL\" /\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                           \u003c/items\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                         \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                         \u003cToolBar prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                           \u003citems\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                               \u003cLabel text\u003d\"GitHub\" /\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                               \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"130.0\" /\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                             \u003cButton fx:id\u003d\"githubCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#gotoGithub\" text\u003d\"Go to URL\" /\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                           \u003c/items\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                         \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                      \u003c/children\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003c/content\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                     \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                     \u003cTitledPane animated\u003d\"false\" prefHeight\u003d\"153.0\" prefWidth\u003d\"305.0\" text\u003d\"Website\"\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003ccontent\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                         \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"72.0\" prefWidth\u003d\"303.0\"\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cLabel layoutX\u003d\"9.0\" layoutY\u003d\"14.0\" text\u003d\"FIND MORE ABOUT ME THROUGH MY WEBSITE\"\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                      \u003cfont\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                         \u003cFont name\u003d\"Chalkboard\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                      \u003c/font\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003c/Label\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003cToolBar layoutX\u003d\"52.0\" layoutY\u003d\"47.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                     \u003citems\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                         \u003cLabel text\u003d\"Website\" /\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                         \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"45.0\" /\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                       \u003cButton fx:id\u003d\"websiteCommand\" mnemonicParsing\u003d\"false\" onAction\u003d\"#gotoWebsite\" text\u003d\"Go to URL\" /\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                     \u003c/items\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                   \u003c/ToolBar\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003c/content\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                     \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                   \u003c/panes\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003c/Accordion\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003cLabel layoutX\u003d\"333.0\" layoutY\u003d\"212.0\" text\u003d\"Done By: Ng Zhao Ming\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                 \u003c/Label\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                           \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                       \u003c/content\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/Tab\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                 \u003c/tabs\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 293
    }
  },
  {
    "path": "src/main/resources/view/ItineraryListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 37
    }
  },
  {
    "path": "src/main/resources/view/ItineraryListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 8
    }
  },
  {
    "path": "src/main/resources/view/ItineraryWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003cBorderPane fx:id\u003d\"itineraryPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cMenuBar fx:id\u003d\"menuBar\" prefHeight\u003d\"17.0\" prefWidth\u003d\"440.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Itinerary\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003c/Menu\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "   "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cVBox BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                             \u003cVBox fx:id\u003d\"eventList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cStackPane fx:id\u003d\"eventPlaceHolder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                       \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                          \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefHeight\u003d\"32.0\" prefWidth\u003d\"339.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "   \u003cleft\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cVBox prefHeight\u003d\"650.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: darkslategrey; -fx-alignment: center;\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cImage url\u003d\"@../images/travezylogo.png\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cInsets bottom\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cButton mnemonicParsing\u003d\"false\" prefHeight\u003d\"50.0\" prefWidth\u003d\"175.0\" style\u003d\"-fx-border-radius: 10; -fx-background-radius: 10;\" text\u003d\"Address\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003cImage url\u003d\"@../images/phone.png\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/graphic\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cButton mnemonicParsing\u003d\"false\" prefHeight\u003d\"50.0\" prefWidth\u003d\"175.0\" style\u003d\"-fx-background-radius: 10; -fx-border-radius: 10;\" text\u003d\"Finances\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003cImage url\u003d\"@../images/finance.png\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/graphic\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cButton mnemonicParsing\u003d\"false\" prefHeight\u003d\"50.0\" prefWidth\u003d\"175.0\" style\u003d\"-fx-background-radius: 10; -fx-border-radius: 10;\" text\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003cImage url\u003d\"@../images/calendar_emoji.png\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/graphic\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cButton mnemonicParsing\u003d\"false\" prefHeight\u003d\"50.0\" prefWidth\u003d\"175.0\" style\u003d\"-fx-background-radius: 10; -fx-border-radius: 10;\" text\u003d\"Diary\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003cImage url\u003d\"@../images/diary.png\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/graphic\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cButton mnemonicParsing\u003d\"false\" prefHeight\u003d\"50.0\" prefWidth\u003d\"175.0\" style\u003d\"-fx-background-radius: 10; -fx-border-radius: 10;\" text\u003d\"Itinerary\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003cImage url\u003d\"@../images/itinerary.png\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/graphic\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cButton mnemonicParsing\u003d\"false\" prefHeight\u003d\"50.0\" prefWidth\u003d\"175.0\" style\u003d\"-fx-background-radius: 10; -fx-border-radius: 10;\" text\u003d\"Achievements\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cInsets bottom\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                        \u003cImage url\u003d\"@../images/achievement.png\" /\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/graphic\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "   \u003c/left\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 138
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"TravEzy\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003cScene fx:id\u003d\"commonScene\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cVBox fx:id\u003d\"commons\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Code\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"codeMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCode\" text\u003d\"Git Code\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 10,
      "-": 45,
      "ngzhaoming": 6
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cLabel fx:id\u003d\"country\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$country\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 36,
      "ngzhaoming": 1
    }
  },
  {
    "path": "src/main/resources/view/SummaryCommandWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.DatePicker?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Pagination?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.ScrollBar?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Slider?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.Spinner?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.SplitMenuButton?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.control.ToggleButton?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Summary\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cLabel fx:id\u003d\"summaryMessage\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cScrollBar orientation\u003d\"VERTICAL\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cProgressBar prefWidth\u003d\"200.0\" progress\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cSlider /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cSeparator prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cSpinner /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cSplitMenuButton mnemonicParsing\u003d\"false\" text\u003d\"SplitMenuButton\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                 \u003citems\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                   \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Action 1\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                   \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Action 2\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                 \u003c/items\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003c/SplitMenuButton\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cToggleButton mnemonicParsing\u003d\"false\" text\u003d\"ToggleButton\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cDatePicker /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "               \u003cPagination pageCount\u003d\"3\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/address/model/AddressBookModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.model.AddressBookModel.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefsModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AddressBookModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModelManager addressBookModelManager \u003d new AddressBookModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private UserPrefsModelManager mainModelManager \u003d new UserPrefsModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(addressBookModelManager.getAddressBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        mainModelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(userPrefs, mainModelManager.getUserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(oldUserPrefs, mainModelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBookModelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(path, addressBookModelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBookModelManager.hasPerson(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(addressBookModelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(addressBookModelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            -\u003e addressBookModelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModelManager \u003d new AddressBookModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModelManager modelManagerCopy \u003d new AddressBookModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(addressBookModelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(addressBookModelManager.equals(addressBookModelManager));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(addressBookModelManager.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(addressBookModelManager.equals(5));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(addressBookModelManager.equals(new AddressBookModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(addressBookModelManager.equals(new AddressBookModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(addressBookModelManager.equals(new AddressBookModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 32,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 3,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/address/model/person/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/address/model/person/CountryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.country.Country;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class CountryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Country(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void isValidCountry() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //null country"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Country.isValidCountry(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(Country.isValidCountry(\"Korea\")); //South Korea"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(Country.isValidCountry(\"singapore\")); //Singapore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(Country.isValidCountry(\"America\")); //United States"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(Country.isValidCountry(\"United States of America\")); //extra characters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // valid countries"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Afghanistan\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Åland Islands\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Albania\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Algeria\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"American Samoa\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Andorra\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Angola\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Anguilla\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Antarctica\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Antigua \u0026 Barbuda\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Argentina\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Armenia\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Aruba\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Australia\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Austria\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Azerbaijan\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bahamas\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bahrain\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bangladesh\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Barbados\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Belarus\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Belgium\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Belize\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Benin\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bermuda\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bhutan\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bolivia\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bosnia \u0026 Herzegovina\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Botswana\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bouvet Island\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Brazil\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"British Indian Ocean Territory\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"British Virgin Islands\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Brunei\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bulgaria\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Burkina Faso\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Burundi\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cambodia\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cameroon\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Canada\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cape Verde\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Caribbean Netherlands\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cayman Islands\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Central African Republic\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Chad\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Chile\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"China\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Christmas Island\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cocos (Keeling) Islands\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Colombia\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Comoros\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Congo - Brazzaville\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Congo - Kinshasa\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cook Islands\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Costa Rica\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Côte d’Ivoire\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Croatia\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cuba\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Curaçao\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cyprus\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Czechia\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Denmark\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Djibouti\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Dominica\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Dominican Republic\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Ecuador\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Egypt\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"El Salvador\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Equatorial Guinea\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Eritrea\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Estonia\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Ethiopia\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Falkland Islands\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Faroe Islands\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Fiji\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Finland\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"France\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"French Guiana\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"French Polynesia\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"French Southern Territories\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Gabon\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Gambia\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Georgia\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Germany\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Ghana\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Gibraltar\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Greece\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Greenland\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Grenada\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guadeloupe\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guam\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guatemala\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guernsey\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guinea\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guinea-Bissau\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guyana\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Haiti\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Heard \u0026 McDonald Islands\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Honduras\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Hong Kong SAR China\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Hungary\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Iceland\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"India\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Indonesia\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Iran\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Iraq\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Ireland\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Isle of Man\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Israel\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Italy\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Jamaica\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Japan\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Jersey\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Jordan\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Kazakhstan\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Kenya\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Kiribati\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Kuwait\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Kyrgyzstan\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Laos\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Latvia\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Lebanon\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Lesotho\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Liberia\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Libya\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Liechtenstein\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Lithuania\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Luxembourg\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Macau SAR China\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Macedonia\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Madagascar\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Malawi\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Malaysia\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Maldives\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mali\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Malta\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Marshall Islands\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Martinique\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mauritania\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mauritius\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mayotte\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mexico\"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Micronesia\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Moldova\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Monaco\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mongolia\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Montenegro\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Montserrat\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Morocco\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mozambique\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Myanmar (Burma)\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Namibia\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Nauru\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Nepal\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Netherlands\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"New Caledonia\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"New Zealand\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Nicaragua\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Niger\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Nigeria\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Niue\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Norfolk Island\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"North Korea\"));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Northern Mariana Islands\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Norway\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Oman\"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Pakistan\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Palau\"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Palestinian Territories\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Panama\"));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Papua New Guinea\"));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Paraguay\"));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Peru\"));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Philippines\"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Pitcairn Islands\"));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Poland\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Portugal\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Puerto Rico\"));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Qatar\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Réunion\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Romania\"));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Russia\"));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Rwanda\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Samoa\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"San Marino\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"São Tomé \u0026 Príncipe\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Saudi Arabia\"));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Senegal\"));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Serbia\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Seychelles\"));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Sierra Leone\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Singapore\"));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Sint Maarten\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Slovakia\"));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Slovenia\"));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Solomon Islands\"));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Somalia\"));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"South Africa\"));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"South Georgia \u0026 South Sandwich Islands\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"South Korea\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"South Sudan\"));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Spain\"));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Sri Lanka\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Barthélemy\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Helena\"));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Kitts \u0026 Nevis\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Lucia\"));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Martin\"));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Pierre \u0026 Miquelon\"));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Vincent \u0026 Grenadines\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Sudan\"));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Suriname\"));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Svalbard \u0026 Jan Mayen\"));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Swaziland\"));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Sweden\"));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Switzerland\"));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Syria\"));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Taiwan\"));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Tajikistan\"));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Tanzania\"));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Thailand\"));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Timor-Leste\"));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Togo\"));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Tokelau\"));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Tonga\"));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Trinidad \u0026 Tobago\"));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Tunisia\"));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Turkey\"));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Turkmenistan\"));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Turks \u0026 Caicos Islands\"));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Tuvalu\"));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"U.S. Outlying Islands\"));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"U.S. Virgin Islands\"));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Uganda\"));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Ukraine\"));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"United Arab Emirates\"));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"United Kingdom\"));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"United States\"));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Uruguay\"));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Uzbekistan\"));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Vatican City\"));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Venezuela\"));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Vietnam\"));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Vanuatu\"));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Wallis \u0026 Futuna\"));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Western Sahara\"));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Yemen\"));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Zambia\"));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Zimbabwe\"));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 281
    }
  },
  {
    "path": "src/test/java/seedu/address/address/model/person/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/address/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // different Country -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 6,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/address/model/person/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/address/model/person/RemarkTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Remark remark \u003d new Remark(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertTrue(remark.equals(remark));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Remark remarkCopy \u003d new Remark(remark.value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertTrue(remark.equals(remarkCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(remark.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(remark.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Remark differentRemark \u003d new Remark(\"Bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(remark.equals(differentRemark));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "ngzhaoming": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 3,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/address/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/AddressBookLogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.AddressBookLogic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.AddressBookLogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefsModel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefsModelManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class AddressBookLogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel addressBookModel \u003d new AddressBookModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private UserPrefsModel userPrefsModel \u003d new UserPrefsModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookLogic addressBookLogic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookLogic \u003d new AddressBookLogicManager(userPrefsModel, addressBookModel, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, addressBookModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // Setup AddressBookLogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookLogic \u003d new AddressBookLogicManager(userPrefsModel, addressBookModel, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + ADDRESS_DESC_AMY + COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModelManager expectedModel \u003d new AddressBookModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String expectedMessage \u003d AddressBookLogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBookLogic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * - the internal addressBookModel manager state is the same as that in {@code expectedAddressBookModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, AddressBookModel)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                      AddressBookModel expectedAddressBookModel)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        CommandResult result \u003d addressBookLogic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(expectedAddressBookModel, addressBookModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, AddressBookModel)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, AddressBookModel)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, AddressBookModel)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager(addressBookModel.getAddressBook(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedAddressBookModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * - the internal addressBookModel manager state is the same as that in {@code expectedAddressBookModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @see #assertCommandSuccess(String, String, AddressBookModel)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                      String expectedMessage, AddressBookModel expectedAddressBookModel) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e addressBookLogic.execute(inputCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(expectedAddressBookModel, addressBookModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 51,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Contains integration tests (interaction with the AddressBookModel) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel addressBookModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel \u003d new AddressBookModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager(addressBookModel.getAddressBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedAddressBookModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), addressBookModel,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedAddressBookModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person personInList \u003d addressBookModel.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), addressBookModel, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 15,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModelStubAcceptingPersonAdded modelStub \u003d new AddressBookModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModelStub modelStub \u003d new AddressBookModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * A default addressBookModel stub that have all of the methods failing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private class AddressBookModelStub implements AddressBookModel {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * A AddressBookModel stub that contains a single person."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private class AddressBookModelStubWithPerson extends AddressBookModelStub {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * A AddressBookModel stub that always accept the person being added."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private class AddressBookModelStubAcceptingPersonAdded extends AddressBookModelStub {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 16,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel addressBookModel \u003d new AddressBookModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), addressBookModel, ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                expectedAddressBookModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel addressBookModel \u003d new AddressBookModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedAddressBookModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), addressBookModel, ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                expectedAddressBookModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 14,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Like skiing.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Favourite pastime: Eating\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String VALID_COUNTRY_AMY \u003d \"Singapore\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String VALID_COUNTRY_BOB \u003d \"Malaysia\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String COUNTRY_DESC_AMY \u003d \" \" + PREFIX_COUNTRY + VALID_COUNTRY_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String COUNTRY_DESC_BOB \u003d \" \" + PREFIX_COUNTRY + VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String INVALID_COUNTRY_DESC \u003d \" \" + PREFIX_COUNTRY + \"Soviet Union\"; // soviet union is not in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    //the list of countries"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withCountry(VALID_COUNTRY_AMY).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * - the {@code actualAddressBookModel} matches {@code expectedAddressBookModel}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static void assertCommandSuccess(Command command, AddressBookModel actualAddressBookModel,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                            CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                            AddressBookModel expectedAddressBookModel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            CommandResult result \u003d command.execute(actualAddressBookModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            assertEquals(expectedAddressBookModel, actualAddressBookModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, AddressBookModel, CommandResult, AddressBookModel)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static void assertCommandSuccess(Command command, AddressBookModel actualAddressBookModel,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                            String expectedMessage, AddressBookModel expectedAddressBookModel) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(command, actualAddressBookModel, expectedCommandResult, expectedAddressBookModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualAddressBookModel} remain unchanged"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static void assertCommandFailure(Command command, AddressBookModel actualAddressBookModel,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // we are unable to defensively copy the addressBookModel for comparison later, so we can"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualAddressBookModel.getAddressBook());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualAddressBookModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualAddressBookModel));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(expectedAddressBook, actualAddressBookModel.getAddressBook());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(expectedFilteredList, actualAddressBookModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Updates {@code addressBookModel}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * {@code addressBookModel}\u0027s address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static void showPersonAtIndex(AddressBookModel addressBookModel, Index targetIndex) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c addressBookModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person person \u003d addressBookModel.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(1, addressBookModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 46,
      "-": 93,
      "ngzhaoming": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Contains integration tests (interaction with the AddressBookModel, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel addressBookModel \u003d new AddressBookModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person personToDelete \u003d addressBookModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModelManager expectedModel \u003d new AddressBookModelManager(addressBookModel.getAddressBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(deleteCommand, addressBookModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(addressBookModel.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandFailure(deleteCommand, addressBookModel, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        showPersonAtIndex(addressBookModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person personToDelete \u003d addressBookModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager(addressBookModel.getAddressBook(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedAddressBookModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        showNoPerson(expectedAddressBookModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(deleteCommand, addressBookModel, expectedMessage, expectedAddressBookModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        showPersonAtIndex(addressBookModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c addressBookModel.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandFailure(deleteCommand, addressBookModel, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Updates {@code addressBookModel}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private void showNoPerson(AddressBookModel addressBookModel) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(addressBookModel.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 26,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Contains integration tests (interaction with the AddressBookModel, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel addressBookModel \u003d new AddressBookModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager(new AddressBook("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                addressBookModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedAddressBookModel.setPerson(addressBookModel.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(editCommand, addressBookModel, expectedMessage, expectedAddressBookModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(addressBookModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person lastPerson \u003d addressBookModel.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager(new AddressBook("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                addressBookModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedAddressBookModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(editCommand, addressBookModel, expectedMessage, expectedAddressBookModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person editedPerson \u003d addressBookModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager(new AddressBook("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                addressBookModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(editCommand, addressBookModel, expectedMessage, expectedAddressBookModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        showPersonAtIndex(addressBookModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person personInFilteredList \u003d addressBookModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager(new AddressBook("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                addressBookModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedAddressBookModel.setPerson(addressBookModel.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(editCommand, addressBookModel, expectedMessage, expectedAddressBookModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person firstPerson \u003d addressBookModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandFailure(editCommand, addressBookModel, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        showPersonAtIndex(addressBookModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person personInList \u003d addressBookModel.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandFailure(editCommand, addressBookModel, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(addressBookModel.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandFailure(editCommand, addressBookModel, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        showPersonAtIndex(addressBookModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c addressBookModel.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandFailure(editCommand, addressBookModel, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 41,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // different country -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 6,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel addressBookModel \u003d new AddressBookModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), addressBookModel, expectedCommandResult, expectedAddressBookModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Contains integration tests (interaction with the AddressBookModel) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel addressBookModel \u003d new AddressBookModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedAddressBookModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(command, addressBookModel, expectedMessage, expectedAddressBookModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBookModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedAddressBookModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(command, addressBookModel, expectedMessage, expectedAddressBookModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), addressBookModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 14,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel addressBookModel \u003d new AddressBookModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), addressBookModel, expectedCommandResult, expectedAddressBookModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 7,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Contains integration tests (interaction with the AddressBookModel) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel addressBookModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel expectedAddressBookModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        addressBookModel \u003d new AddressBookModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedAddressBookModel \u003d new AddressBookModelManager(addressBookModel.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(new ListCommand(), addressBookModel, ListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                expectedAddressBookModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        showPersonAtIndex(addressBookModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(new ListCommand(), addressBookModel, ListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                expectedAddressBookModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 13,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Contains integration tests (interaction with the AddressBookModel) and unit tests for RemarkCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class RemarkCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Some remark\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel addressBookModel \u003d new AddressBookModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person firstPerson \u003d addressBookModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new AddressBook(addressBookModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedAddressBookModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(remarkCommand, addressBookModel, expectedMessage, expectedAddressBookModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void execute_deleteRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person firstPerson \u003d addressBookModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(\"\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                new Remark(editedPerson.getRemark().toString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new AddressBook(addressBookModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedAddressBookModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(remarkCommand, addressBookModel, expectedMessage, expectedAddressBookModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        showPersonAtIndex(addressBookModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person firstPerson \u003d addressBookModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                addressBookModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                                .withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel expectedAddressBookModel \u003d new AddressBookModelManager("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new AddressBook(addressBookModel.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedAddressBookModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandSuccess(remarkCommand, addressBookModel, expectedMessage, expectedAddressBookModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(addressBookModel.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandFailure(remarkCommand, addressBookModel, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        showPersonAtIndex(addressBookModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c addressBookModel.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertCommandFailure(remarkCommand, addressBookModel, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final RemarkCommand standardCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand commandWithSameValues \u003d new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                new Remark(VALID_REMARK_AMY))));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                new Remark(VALID_REMARK_BOB))));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 33,
      "ngzhaoming": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + COUNTRY_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + COUNTRY_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + COUNTRY_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + COUNTRY_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + COUNTRY_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + COUNTRY_DESC_BOB,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        + COUNTRY_DESC_AMY,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        //missing name prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        + COUNTRY_DESC_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        + COUNTRY_DESC_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        + COUNTRY_DESC_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        + COUNTRY_DESC_BOB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        + VALID_COUNTRY_BOB,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 30,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void parseCommand_remark() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Remark remark \u003d new Remark(\"Some remark.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark.value);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 14,
      "-": 91,
      "ngzhaoming": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static void assertParseSuccess(Parser\u003c? extends Command\u003e parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static void assertParseFailure(Parser\u003c? extends Command\u003e parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.parser.DeleteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COUNTRY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.parser.EditCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.country.Country;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COUNTRY_DESC, Country.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND + COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // country"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withCountry(VALID_COUNTRY_AMY).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + COUNTRY_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .withCountry(VALID_COUNTRY_BOB)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 28,
      "-": 199
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 3,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.country.Country;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final String INVALID_COUNTRY \u003d \"Korea\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final String VALID_COUNTRY \u003d \"South Korea\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parseCountry_validValueWithWhitespace_returnsTrimmedCountry() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String countryWithWhitespace \u003d WHITESPACE + VALID_COUNTRY + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Country expectedCountry \u003d new Country(VALID_COUNTRY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(expectedCountry, ParserUtil.parseCountry(countryWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parseCountry_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCountry(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parseCountry_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCountry(INVALID_COUNTRY));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parseCountry_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Country expectedCountry \u003d new Country(VALID_COUNTRY);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(expectedCountry, ParserUtil.parseCountry(VALID_COUNTRY));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 32,
      "-": 183
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.parser.RemarkCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class RemarkCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final String nonEmptyRemark \u003d \"Some remark.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private RemarkCommandParser parser \u003d new RemarkCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK + nonEmptyRemark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(nonEmptyRemark));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(\"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertParseFailure(parser, RemarkCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertParseFailure(parser, RemarkCommand.COMMAND_WORD + \" \" + nonEmptyRemark, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 5,
      "ngzhaoming": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/main/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.main.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.AddressBookLogic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefsModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.UserPrefsModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private StorageManager storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private LogicManager logicManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(90, 45, 30, 15));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(new PersonBuilder().build()).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookModel addressBookModel \u003d new AddressBookModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        UserPrefsModel userPrefsModel \u003d new UserPrefsModelManager(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        model \u003d new ModelManager(userPrefsModel, addressBookModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressbook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        logicManager \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void getStorage_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(null, new LogicManager(model, null).getStorage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void getAddressBookLogic_equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //no changes to address book logic"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        AddressBookLogic addressBookLogic \u003d logicManager.getAddressBookLogic();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(Paths.get(\"addressbook.json\"), logicManager.getAddressBookLogic().getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(new GuiSettings(90, 45, 30, 15),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                logicManager.getAddressBookLogic().getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(1, logicManager.getAddressBookLogic().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(new AddressBookBuilder().withPerson(new PersonBuilder().build()).build(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                logicManager.getAddressBookLogic().getAddressBook());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void getStorage_equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(storage, logicManager.getStorage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void getGuiSettings_equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(new GuiSettings(90, 45, 30, 15),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                logicManager.getGuiSettings());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                logicManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setGuiSettings_equal() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        logicManager.setGuiSettings(new GuiSettings(100, 200, 300, 400));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(new GuiSettings(100, 200, 300, 400),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                logicManager.getGuiSettings());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private UserPrefsModel userPrefsModel \u003d new UserPrefsModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private AddressBookModel addressBookModel \u003d new AddressBookModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Model modelManager \u003d new ModelManager(userPrefsModel, addressBookModel);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(addressBookModel, modelManager.getAddressBookModel());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(userPrefsModel, modelManager.getUserPrefsModel());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void getAddressBookModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(null, new ModelManager(userPrefsModel, null).getAddressBookModel());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void getMainBookModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(null, new ModelManager(null, addressBookModel).getUserPrefsModel());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void getAddressBookModel_equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(modelManager.getAddressBookModel(), new AddressBookModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void getMainModel_equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(modelManager.getUserPrefsModel(), new UserPrefsModelManager());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void getAddressBookModel_notEquals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userPrefs.setGuiSettings("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new GuiSettings(2.0, 3.0, 5, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertNotEquals(modelManager.getAddressBookModel(), new AddressBookModelManager(new AddressBook(), userPrefs));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void getMainModel_notEquals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userPrefs.setGuiSettings("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new GuiSettings(2.0, 3.0, 5, 6));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertNotEquals(modelManager.getUserPrefsModel(), new UserPrefsModelManager(userPrefs));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 27,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class UserPrefsModelManagerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private UserPrefsModelManager mainModelManager \u003d new UserPrefsModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(new UserPrefs(), mainModelManager.getUserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(new GuiSettings(), mainModelManager.getGuiSettings());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void getUserPrefs_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(userPrefs, new UserPrefsModelManager(userPrefs).getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void getGuiSettings_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(100, 200, 150, 50);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(guiSettings, new UserPrefsModelManager(userPrefs).getGuiSettings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mainModelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        mainModelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(userPrefs, mainModelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(oldUserPrefs, mainModelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mainModelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        mainModelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(guiSettings, mainModelManager.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.storage.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.country.Country;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final String INVALID_COUNTRY \u003d \"Korea\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final String VALID_COUNTRY \u003d BENSON.getCountry().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, invalidTags,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void toModelType_invalidCountry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        INVALID_COUNTRY);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String expectedMessage \u003d Country.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void toModelType_nullCountry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Country.class.getSimpleName());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 46,
      "-": 96,
      "ngzhaoming": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 3,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 3,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.country.Country;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        descriptor.setCountry(person.getCountry());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses the {@code Country} into a {@code Country} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public EditPersonDescriptorBuilder withCountry(String country) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        descriptor.setCountry(new Country(country));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 18,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.country.Country;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Remark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"She likes aardvarks.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String DEFAULT_COUNTRY \u003d \"Iraq\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Country country;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        country \u003d new Country(DEFAULT_COUNTRY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        remark \u003d personToCopy.getRemark();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        country \u003d personToCopy.getCountry();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public PersonBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Sets the {@code Country} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public PersonBuilder withCountry(String country) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.country \u003d new Country(country);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new Person(name, phone, email, address, remark, tags, country);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 21,
      "-": 85,
      "ngzhaoming": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        sb.append(PREFIX_COUNTRY + person.getCountry().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        descriptor.getCountry().ifPresent(country -\u003e sb.append(PREFIX_COUNTRY).append(country.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 13,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBookModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns the middle index of the person in the {@code addressBookModel}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static Index getMidIndex(AddressBookModel addressBookModel) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return Index.fromOneBased(addressBookModel.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns the last index of the person in the {@code addressBookModel}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static Index getLastIndex(AddressBookModel addressBookModel) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return Index.fromOneBased(addressBookModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns the person in the {@code addressBookModel}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static Person getPerson(AddressBookModel addressBookModel, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return addressBookModel.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            .withPhone(\"94351253\").withRemark(\"She likes aardvarks.\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withTags(\"friends\").withCountry(\"Singapore\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withRemark(\"He can\u0027t take beer!\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withCountry(\"Vietnam\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withCountry(\"China\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withCountry(\"\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withCountry(\"Japan\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withCountry(\"South Korea\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withCountry(\"Romania\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withPhone(\"9482442\").withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withCountry(\"India\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withCountry(\"United States\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withCountry(\"Singapore\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withCountry(\"Malaysia\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 18,
      "-": 59,
      "ngzhaoming": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 34
    }
  }
]
