[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ":notitle:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "++++"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  \u003ca href\u003d\"https://roc.ms/visitapp\"\u003e\u003cimg src\u003d\"https://github.com/AY1920S1-CS2103T-F12-2/main/raw/master/docs/images/icons/LogoTitle.png\" alt\u003d\"VISIT\" width\u003d\"400\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  VISIT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c/h1\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003ch4 align\u003d\"center\"\u003eA Patient Tracking Application for Doctors On-The-Go.\u003c/h4\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003ca href\u003d\"https://travis-ci.org/AY1920S1-CS2103T-F12-2/main\"\u003e\u003cimg src\u003d\"https://travis-ci.org/AY1920S1-CS2103T-F12-2/main.svg?branch\u003dmaster\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003ca href\u003d\u0027https://coveralls.io/github/AY1920S1-CS2103T-F12-2/main?branch\u003dmaster\u0027\u003e\u003cimg src\u003d\u0027https://coveralls.io/repos/github/AY1920S1-CS2103T-F12-2/main/badge.svg?branch\u003dmaster\u0027 alt\u003d\u0027Coverage Status\u0027 /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003ca href\u003d\"https://conventionalcommits.org\"\u003e\u003cimg src\u003d\"https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003ca href\u003d\"https://opensource.org/licenses/MIT\"\u003e\u003cimg src\u003d\u0027https://img.shields.io/badge/License-MIT-yellow.svg\u0027 alt \u003d\u0027License: MIT\u0027 /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003ca href\u003d\"#key-features\"\u003eKey Features\u003c/a\u003e ‚Ä¢"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003ca href\u003d\"#how-to-use\"\u003eHow To Use\u003c/a\u003e ‚Ä¢"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003ca href\u003d\"#download\"\u003eDownload\u003c/a\u003e ‚Ä¢"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003ca href\u003d\"#site-map\"\u003eSite Map\u003c/a\u003e ‚Ä¢"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003ca href\u003d\"#acknowledgements\"\u003eAcknowledgements\u003c/a\u003e ‚Ä¢"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "  \u003ca href\u003d\"#license\"\u003eLicense\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003cimg src\u003d\"https://github.com/AY1920S1-CS2103T-F12-2/main/raw/master/docs/images/Ui.png\" alt\u003d\"Ui.png\" width\u003d\"900\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "++++"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d Key Features"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Completely Keyboard Friendly* ‚å®Ô∏è"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "** Prefer the keyboard? VISIT is made to be entirely operable just using our sleek Command Line Interface (CLI) type command system!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Patient Profiling* üë™"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "** Keep all the key patient details like names, addresses and contact information of your patients easily accessible."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Visit Tracking* üè†"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "** Keep track of the history of past visits by the same patient to provide holistic and personalized healthcare."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Reminder System* üìÜ"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "** Can\u0027t remember when your next appointment is? VISIT reminds you when your next consultation is."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Alias / Macro command support* üî§"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "** No need to type the same commands over and over, simply add an alias from within the CLI!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Save patient information as a .pdf file* üìÑ"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "** VISIT allows you to export and store a patient\u0027s profile as a .pdf in your own file system!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Sleek and modern UI* üíº"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Tagging and Search functionality* üîé"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Cross platform* üñ•Ô∏è"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "** Windows, macOS and Linux ready."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d How To Use"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "To run this application, you\u0027ll need  https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html[Java 11] installed on your computer. +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Run the program then, try typing the following commands:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[source, sh]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "----"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "# Adds a Patient with details"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "$ add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "# Adds a visitation report for patient at position 1 on 12th December 2019"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "$ addvisit 1 v/12/12/2019"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "# Find all patients matched to the query \u0027Betsy\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "$ find Betsy"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "# Schedule an appointment with the patient at position 1 in 4 days"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "$ followup 1 d/4"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "# Show the full profile of the patient at position 1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "$ profile 1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "----"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "For other commands, check out our User Guide at link:https://github.com/AY1920S1-CS2103T-F12-2/main/blob/master/docs/UserGuide.adoc[here]!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d Download"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "You can https://github.com/AY1920S1-CS2103T-F12-2/main/releases[download] the latest installable version of VISIT for Windows, macOS and Linux."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* link:https://github.com/AY1920S1-CS2103T-F12-2/main/blob/master/docs/AboutUs.adoc[About Us]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* link:https://github.com/AY1920S1-CS2103T-F12-2/main/blob/master/docs/ContactUs.adoc[Contact Us]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* link:https://github.com/AY1920S1-CS2103T-F12-2/main/blob/master/docs/UserGuide.adoc[User Guide]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* link:https://github.com/AY1920S1-CS2103T-F12-2/main/blob/master/docs/DeveloperGuide.adoc[Developer Guide]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gachia"
        },
        "content": "* This application is built upon AddressBook-Level3 Project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* Libraries used:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "- https://openjfx.io/[JavaFX]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "- https://github.com/FasterXML/jackson[Jackson]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "- https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d License"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 78,
      "ReignOfComputer": 7,
      "-": 12,
      "gachia": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "mainClassName \u003d \u0027unrealunity.visit.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    archiveName \u003d \u0027VISITapp.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u0027site-name\u0027: \u0027VISIT\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F12-2/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        \u0027untitled-label\u0027: \u0027VISIT by Team UnrealUnity\u0027"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 3,
      "ReignOfComputer": 2,
      "-": 150
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "VISIT is an Address Book application for Doctors to plan their visits to patients. Doctors can have granular control over each visit, log each diagnosis, schedule follow-up with patients, and keep track of their appointments."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "We are Team https://github.com/AY1920S1-CS2103T-F12-2[UnrealUnity] based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d Chattoraj Ayush"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "image::ayushchatto.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "{empty}[https://github.com/AyushChatto[github]] [\u003c\u003cAyushChatto#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Role: Project Advisor / Consultant"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d Jason Chee"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "image::reignofcomputer.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "{empty}[https://www.reignofcomputer.com/[homepage]] [http://github.com/reignofcomputer[github]] [\u003c\u003creignofcomputer#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Role: Team Lead / Managing Director +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Responsibilities: Project Manager, Developer, Legal \u0026 Compliance, Security, In charge of `Reminder-Follow-Up` Component"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d Gabriel Chia"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "image::gachia.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "{empty}[http://github.com/gachia[github]] [\u003c\u003cgabrielchia#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Responsibilities: UI, Documentation, Concept Artist"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d Jerrold Tan"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "image::wingedevil.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "{empty}[http://github.com/Wingedevil[github]] [\u003c\u003cjerroldtan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Responsibilities: Git Expert, In charge of ‚ÄòAlias‚Äô Component"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d Zheng Shi Qiao"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "image::sqwq.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "{empty}[http://github.com/SQwQ[github]] [\u003c\u003csqwq#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Responsibilities: IntelliJ Expert, Documentation, In charge of `Visit` Component"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d Gabriel Ong"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "image::q-gabe.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "{empty}[https://q-gabe.me[homepage]] [http://github.com/q-gabe[github]] [\u003c\u003cq-gabe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Role: Developer / Tester +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Responsibilities: Integration, Documentation, In charge of `ProfileView` Component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 30,
      "-": 33,
      "SQwQ": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Bug Reports \u0026 Suggestions*: If you notice any bugs or have any suggestions on how we can improve, please post on our https://github.com/AY1920S1-CS2103T-F12-2/main/issues[issue tracker]."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Email us* : You can also reach us at `visit [at] roc.ms`."
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 3,
      "-": 4
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d VISIT - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F12-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 2,
      "-": 46
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d VISIT - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F12-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "By: `Team UnrealUnity`  \tSince: `Sep 2019`  \tLicence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/tree/master/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "`Main` has two classes called link:{repoURL}/tree/master/src/main/java/unrealunity/visit/Main.java[`Main`] and link:{repoURL}/tree/master/src/main/java/unrealunity/visit/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gachia"
        },
        "content": "image::NewUiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gachia"
        },
        "content": "*API* : link:{repoURL}/tree/master/src/main/java/unrealunity/visit/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gachia"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `ReminderPanel`, etc."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gachia"
        },
        "content": "All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gachia"
        },
        "content": "Other UI parts such as HelpWindow, VisitRecordWindow, are not displayed as UI elements in the MainWindow but opens up through a command entered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gachia"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/tree/master/src/main/java/unrealunity/visit/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/tree/master/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gachia"
        },
        "content": "link:{repoURL}/tree/master/src/main/java/unrealunity/visit/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gachia"
        },
        "content": "image::NewModelClassDiagram.png[]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gachia"
        },
        "content": "*API* : link:{repoURL}/tree/master/src/main/java/unrealunity/visit/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gachia"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences, alias and appointments."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` and `ObservableList\u003cAppointment\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list changes."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gachia"
        },
        "content": "image::NewStorageClassDiagram.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gachia"
        },
        "content": "*API* : link:{repoURL}/tree/master/src/main/java/unrealunity/visit/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gachia"
        },
        "content": "Classes used by multiple components are in the `unrealunity.visit.commons` package."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[[aliasImplementation]]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "// tag::alias[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003d\u003d\u003d Alias feature"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "The alias mechanism is facilitated by `AliasTable`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "It is contained within `UserPrefs` and can be serialized together with the rest of the members in `UserPrefs`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "* `AliasTable#applyAlias(commandText)` -- Applies the longest stored aliases to the supplied command."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "* `AliasTable#addAlias(alias, aliasTo)` -- Adds a new alias to the alias table."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "* `AliasTable#removeAlias(alias)` -- Removes a existing alias from the alias table."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#applyAlias(commandText)`, `Model#addAlias(alias, aliasTo)` and `Model#removeAlias(alias)` respectively."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "The following sequence diagram shows how adding an alias works:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "image::AddAliasSequenceDiagram.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "The check for and illegal alias consists of creating a new `AddressBookParser` and parsing the given alias into it, which is not shown in this diagram."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "The `unalias` command does the opposite -- it calls `Model#removeAlias(alias)` instead which calls `Model#UserPref(alias)` and `AliasTable#removeAlias(alias)`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "The following sequence diagram shows how applying alias works:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "image::ApplyAliasSequenceDiagram.png[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "This is a generalized diagram which depicts what happens between `execute(commandText)` and `LogicManager#parseCommand(alias)`. This process is not shown in other sequence diagrams."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "The following activity diagram shows how applying alias picks which alias to apply:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "image::ApplyAliasActivityDiagram.png[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "An unfortunate side effect to matching the longest matching macro increases the time complexity of this operation to O(n) from O(1) if we used wholesale matching instead."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "// end::alias[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[[appointmentsImplementation]]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "// tag::appointments[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Appointments feature"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The Appointments feature comprises of Reminders and Follow-Ups. Users can create a generic Reminder to be notified of an ongoing \"something to take note of\", such as a hospital being closed. Follow-ups are used to plan future visits to patients. Both Reminders and Follow-ups are represented by the `Appointment` class, but are facilitated by the `AppointmentList` class for UI updates and `AppointmentTable` class for JSON updating."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ".Appointment Class Diagram"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::DGApptAppointmentClassDiagram.png[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ".AppointmentList Class Diagram"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::DGApptAppointmentListClassDiagram.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ".AppointmentTable Class Diagram"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::DGApptAppointmentTableClassDiagram.png[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The `AppointmentList` and `AppointmentTable` are similar and run the same operations in parallel. This is a constraint due to how data is stored into JSON by the underlying program, and is on the timeline to be converged in v2.0. Due to their similarities, we will only look at `AppointmentTable` for the sake of this documentation."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#getDefaultAppointments()` -- Returns a default, empty `AppointmentTable`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#getAppointmentList()` -- Returns an `ObservableList` version of the Appointments for UI usage. This is necessary as `AppointmentTable` is loaded on launch and `AppointmentList` uses this data to propagate the UI."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#addAppointment(type, description, days)` -- Adds a new Appointment."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#deleteAppointment(description, days)` -- Deletes an appointment from VISIT."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#antiDuplicate(check, description, days)` -- Checks if the Appointment already exists. Returns true if there is no duplicate, false if there is a duplicate."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#sortAppointments()` -- Sorts the list of appointments by days remaining, then name."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#cascadeDay(days)` -- Decrements the days an Appointment has left. Run on application launch by `UserPrefs` after calculating days elapsed."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#outputAppointments()` -- Outputs the Appointments to readable String."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "These operations are exposed in the `Model` interface."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The following sequence diagram shows how adding an appointment works, using reminders as an example:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ".Adding an Appointment Sequence Diagram"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::DGApptAddAppointmentSequenceDiagram.png[]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The following activity diagram shows how adding an appointment works, using follow-ups as an example:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ".Adding an Appointment Activity Diagram"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::DGApptFollowUpActivityDiagram.png[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "// end::appointments[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[[profileImplementation]]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "// tag::profile[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d Profile feature"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "The profile feature allows the user to be able to see the full details of the patient as well as all relevant visit information (See \u003c\u003cvisitImplementation, Visit Implementation\u003e\u003e) from a single panel. Attributes of the patient is extracted from the `Person` instance, including the `Name`, `Address`, `Phone`, `Email`, `Tags` and `VisitList`, which can be easily extended following the implementation detailed below. The patient profile feature is facilitated by `ProfileWindow`, which is instanced and instantly hidden (`hide()`) upon the instancing of `MainWindow` on VISIT\u0027s start up. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Given below is a simple example usage scenario demonstrate how Profile feature behaves and interacts with the other components."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Step 1. The user executes `profile 3` command view the profile of the 3rd person shown in VISIT\u0027s current list. It extracts the `Person` instance from the filtered Person list from the current `model` and returns a `CommandResult` with the `Person` instance as an attribute. `MainWindow#executeCommand()` is called and the check for `CommandResult#isShowProfile()` passes, calling `ProfileWindow#setup()` which populates the hidden Profile Window with the attributes of the `Person` instance before `MainWindow#handleProfilePanel()` is called to show the Profile Window."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "image::Profile0.png[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Step 2. After viewing the relevant information, the user presses the \u0027esc\u0027 key which closes the form. This causes an event handler in `ProfileWindow` which listens for a `KeyEvent.KEY_RELEASED` event where the event code equates to `KeyCode.ESCAPE` (\u0027esc\u0027 key) to trigger, which hides the profile window."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "image::Profile1.png[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "The user is able to close the `ProfileWindow` form by clicking the \u0027x\u0027 on the top right of the form as well."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "This sequence diagram fully shows what happens when a user executes the Profile Command:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "image::ProfileSequenceDiagram1.png[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Profile shows the information from the patient"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* **Alternative 1 (current choice):** Does not create an explicit `Profile` instance."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "** Pros: Easy to implement, more straight forward (Just show data without the need to store what is essentially a clone of a `Person` instance)."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "** Cons: May cause dependency issues as this increases coupling, with relation to the Profile and Patient class. Foreseeably, this may cause issues especially when patient attributes are to be added or removed."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* **Alternative 2:** Create an explicit `Profile` instance every call."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "** Pros: Decreases coupling by cutting down on the direct calls to the `Person` instance."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "** Cons: We must ensure that the `Profile` instance generated is correct every time."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "// end::profile[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "////"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "////"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[[visitImplementation]]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "// tag::visitationreport[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d\u003d\u003d Visitation Report feature"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "The Visitation Report feature allows the user to `add`, `delete` and `edit` a `VisitReport` such that for every housecall, information like the prescription and diagnosis can be stored. Every `Person` has a `VisitList` attribute and each `VisitList` object contains an arraylist of `VisitReport` objects. The feature is facillitated by `VisitRecordWindow` which creates a form for the user to key in the details of the report, `VisitListPanel` which creates an indexed pop up list of visit reports for the user to check the index of the report they want to edit/delete and `SaveVisitCommand` which saves the users input from the form. The following operations are also implemented:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* `VisitList#addRecord()` -- Adds new `VisitReport` object to stored arraylist"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* `VisitList#editRecord()` -- Replaces `VisitReport` object at given index in arraylist with given `VisitReport`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* `VisitList#deleteRecord()` -- Deletes `VisitReport` by index from stored arraylist"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "The class diagram below shows the new additions to the Person class."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::VisitClass0.png[]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Given below is an example usage scenario and how every component of the Visitation Report feature behaves at each step."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Step 1. The user executes `addvisit 5 v/12/12/2019` command to add a visit report to the visitlist of the 5th person in the address book. This returns a  `CommandResult` which has the attribute `date` set as String `12/12/2019`. `MainWindow#executeCommand()` is called and the check for `CommandResult#isAddVisit()` passes, calling  `VisitRecordWindow#setReportInfo()` to pass the `index` of the person, the `date`, and a `Logic` object to initialize the respective attributes in the `VisitRecordWindow` class. `MainWindow#handleShowVisitForm()` is then called to display a pop up form for the user to fill in."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ".Activity diagram to illustrate all possible variations of Step 1"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "image::AddVisit0.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "If the user executes `addvisit 5` instead, the `date` attribute of the `CommandResult` will be set as the current date and the rest of the flow remains the same."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Step 2. The user fills in the form and presses `f2` on the keyboard or clicks the `submit` button to save the report. This calls `VisitRecordWindow#saveReport()` which will create a new `SaveVisitCommand` and executes it, updating the `VisitList` of the person via `Model#setPerson()`."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Step 3. The user decides to edit the report and executes the `editvisit 1 i/1` command.`MainWindow#executeCommand()` is called and the check for `CommandResult#isEditVisit()` passes, calling  `VisitRecordWindow#setOldReportInfo()` which initializes the respective attributes of `VisitRecordWindow` and populate the form with the content of the `VisitReport` from  `CommandResult#getOldReport()` .`MainWindow#handleShowVisitForm()` is then called to display a pop up form for the user to fill in."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ".Activity diagram to illustrate all possible variations of Step 3"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "image::EditVisit0.png[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "As shown in the figure above, if the user executes `editvisit 1` instead, a `CommandResult` with a `ObservableList\u003cVisitReport\u003e` object will be returned. `MainWindow#executeCommand()` \u0027s check for `CommandResult#isShowVisitList()` passes, calling `VisitListPanel#setup()` which populates the `VisitListPanel` with the contents of the `ObservableList\u003cVisitReport\u003e` object from `CommandResult#getObservableVisitList()`. Instead of displaying the pop-up form, `MainWindow#handleShowVisitList()` is called to display a pop up list showing an indexed list of all visitation records of the person."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Step 4. The user edits the form and presses `F3` on the keyboard or clicks the `submit` button to save the changes. The same mechanism mentioned in `Step 2` is used to update the contents of the edited visit report."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "The sequence diagram below shows how Step 3 and Step 4 works."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ".`EditVisitCommand` and `SaveVisitCommand` sequence diagram"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::EditVisit1.png[]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Step 5. The user then decides that the report was beyond salvaging and decides to delete it. Executing the command `deletevisit 1 d/1`, `VisitList#deleteRecord()` deletes the entry from the arraylist and `Model#setPerson()` updates the person with the new `VisitList`. The `CommandResult#isShowVisitList()` check in  `MainWindow#executeCommand()` passes and a pop up list showing an indexed list of all visitation records of the person is displayed."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ".Activity diagram to illustrate all possible variations of Step 5"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "image::DeleteVisit0.png[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "If the user executes `deletevisit 1` instead, the index value will be set to `-1` and the `VisitList#deleteRecord()` block would be skipped, but the rest of the flow remains the same."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Range of acceptable dates for `addvisit`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* **Alternative 1 (current choice):** Only allow dates with years 19xx or 2xxx"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Pros: Prevents user from keying in rubbish dates like year 9999 or 0000"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Cons: Must conduct 2 checks for date in parser, one for the format dd/MM/19yy and one for the format dd/MM/2yyy."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* **Alternative 2:** Place no restriction on valid years"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Pros: Only one check for dd/MM/yyyy format is required."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Cons: User can key in rubbish values like dd/MM/9102 or dd/MM/0192"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Keyboard binding to save report"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* **Alternative 1 (current choice):** `F2` key"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Pros: No conflict with any other functions."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Cons: Not the most intuitive choice for users."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* **Alternative 2:** `Enter` key"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Pros: Very intuitive choice for saving."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Cons: It\u0027s also used to get to the next line, thus using it as the save button means users can no longer press `Enter` for next line"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "// end::visitationreport[]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[[uiImplementation]]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "//tag::guiredesign[]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003d\u003d\u003d GUI Redesign"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "gachia"
        },
        "content": "The GUI Redesign is done to include the new features made for the VISIT application, as well as improve the overall"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "gachia"
        },
        "content": "user experience with a easily readable interface that displays every important information in a glance."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "gachia"
        },
        "content": "The current redesign of the GUI includes the addition of:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "gachia"
        },
        "content": "* the `ReminderPanel` to display upcoming appointments"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "gachia"
        },
        "content": "* the `VisitListPanel` to display the visit reports stored in a patient\u0027s profile. (as mentioned in Visitation Report feature)"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "gachia"
        },
        "content": "* the `VisitRecordWindow` form for the user to enter the required information. (as mentioned in Visitation Report feature)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "gachia"
        },
        "content": "* the `ProfileWindow` to display the full profile information of a patient."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "gachia"
        },
        "content": "* the `MotdWindow` to display the appointments in a new window. Motd stands for Message of the Day."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "gachia"
        },
        "content": "In addition to these, VISIT\u0027s CSS theme is updated to fit current standards of GUI design,"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "gachia"
        },
        "content": "with a more pronounced color palette and a clearer font."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "gachia"
        },
        "content": "The following is the snippet of the class diagram of the Ui Component with the new Classes:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "gachia"
        },
        "content": "image::UiRedesignClassDiagram.png[]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "gachia"
        },
        "content": "1. The `MainWindow` has been new panel which is the ReminderPanel."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "gachia"
        },
        "content": "2. Three new Windows, `VisitRecordWindow`, `ProfileWindow` and `MotdWindow`, are in use in addition to the MainWindow."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "gachia"
        },
        "content": "These windows are opened through their respective commands."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "gachia"
        },
        "content": "3. `ReminderCard` and `VisitCard` gets its data from Model, similar to PersonCard."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003d\u003d\u003d\u003d Future implementation"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "gachia"
        },
        "content": "For future GUI design considerations in v2.0 and above, the panels of each feature such as `PersonListPanel` and `ReminderPanel` can be"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "gachia"
        },
        "content": "separated by tabs, through a dashboard interface. This allows more information to be displayed within each tab, allowing"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "gachia"
        },
        "content": "users to work with more data."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "//end::guiredesign[]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[[logImplementation]]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* has a need to manage a significant number of patients and their information"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "|`* * *` |user |add a new patient |organize a patient\u0027s relevant information"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "|`* * *` |user |delete a patient |remove patient entries that I no longer need"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "|`* * *` |user |view the full profile of a patient by searching for his/her name |see all details regarding a patient easily at a glance"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|`* * *` |user |record down details of each \u003c\u003cvisitation,visitation\u003e\u003e |keep track of the patients situation"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|`* * *` |user |set follow-up reminders |check in on my patients after some time or when their medication runs out"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|`* * *` |user |have daily reminders of important deadlines |keep track of appointments and visitations easily"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|`* * *` |user |see list of reminders |keep track of what I need to keep track"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|`* * *` |user |have \u003c\u003cuser-defined-macros,user-defined macros\u003e\u003e |streamline my diagnosis documentation"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|`* *` |user |sort my appointments |see the more pressing deadlines first"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|`* *` |user |remove a specific appointment |get rid of an unnecessary reminder or visit"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "|`* *` |user |generate a text file detailing my patient\u0027s profile and visits |maintain a archive of patient profiles before deleting them"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "|`*` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "(For all use cases below, the *System* is the `VISIT` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: Delete patient"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1.  User requests to list patients"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  System shows a list of patients"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "3.  User requests to delete a specific patient in the list"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "4.  System deletes the patient"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: View patient profile"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1.  User requests to list patients"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  System shows a list of patients"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "3.  User requests to view patient profile by name/index"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "4.  System shows patient profile"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 3. The given name/index is invalid."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 3a. System shows an error message."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 4. The profile is empty."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: Record visitation details"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* Precondition: User can see list of patients"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "1.  User requests to add new visitation record for a specific patient in the list"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  System adds new visitation record for chosen patient"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 1a1. VISIT shows an error message."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: Edit visitation record"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* Precondition: User can see list of patients"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "1.  User requests to edit visitation record for specific patient by patient index"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  VISIT shows pop-up form for user to edit visitation record"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "3.  User saves edit"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "4.  VISIT saves edit"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* 1a. The user does not provide a record index"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 1a1. VISIT shows an indexed list of visitation records"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: Delete visitation record"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* Precondition: User can see list of persons"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "1.  User requests to delete visitation record for specific patient by index"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  VISIT deletes visitation record"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* 1a. The user does not provide a record index"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 1a1. VISIT shows an indexed list of visitation records"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: Save user-defined macros"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1.  User requests to save user-defined macros"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  VISIT saves user-defined macros"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 1a. The content of the macro is empty."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 1a1. VISIT shows an error message."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 1b. The shortcut of the macro is illegal."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 1b1. VISIT shows an error message."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: Invoke user-defined macros"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1.  User requests to invoke user-defined macros"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  VISIT outputs user-defined data"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003d\u003d\u003d Use case: Delete user-defined macros"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "1.  User requests to remove user-defined macros"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  VISIT removes user-defined macro"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "+"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "* 1a. The content of the macro name is empty."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 1a1. VISIT shows an error message."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "* 1b. There exists no such macro."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "+"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 1b1. VISIT shows an error message."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "+"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: View follow-up visits"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1.  User starts up VISIT"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  Follow-up visits are displayed"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 2. No follow-ups are scheduled."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 2a. VISIT shows no follow-ups."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: View reminders"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1.  User starts up VISIT"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  Reminders are displayed"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 2. No reminders are set to show."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 2a. VISIT shows no reminders."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: Open Appointments \"Message of the Day\" Window"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1. User requests to open Appointments Window"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2. Appointments Window opens with Follow-Up and Reminders listed"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 2. No follow-up or reminders active."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 2a. Message of the Day window shows no active follow-up or reminders."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: Add a new Follow-up"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* Precondition: User can see list of patients"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1.  User requests to add a follow-up for specific patient by index and days count"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  VISIT adds a new follow-up entry into appointments"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 1a. No days count is specified."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 1a1. Default 7 days will be assumed."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 1b. The user does not provide a valid index."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 1b1. VISIT shows an error and help text."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: Add a new Reminder"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1.  User requests to add a reminder with description and days count"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  VISIT adds a new reminder into appointments"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 1a. No days count is specified."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 1a1. Default 7 days will be assumed."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 1b. The user does not provide a description."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 1b1. VISIT shows an error and help text."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: Deletes an Appointment"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1.  User requests to delete an appointment with a given description"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  VISIT removes any appointment matching the given description"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* 1a. The user does not provide a description."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** 1a1. VISIT shows an error and help text."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Use case: Sorting Appointments"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1.  User requests to sort the list of appointments"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "2.  VISIT sorts the appointments and updates the display"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "+"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "{*TODO* : Please add use cases if your component is not featured here yet. If unsure, just put to be safe. *DELETE WHEN DONE*}"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[[user-defined-macros]] User-defined macros::"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "User-defined shortcuts for large chunks of commonly used text for diagnosis"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[[visitation]] Visitation::"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "A housecall or appointment with the patient"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "{*TODO* : Please add terms if any that your commands use here. If unsure, just put to be safe. *DELETE WHEN DONE*}"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "{*TODO* : You can be generic about it because it is probably unrealistic to list out all your tests here. Just follow suit with these examples. *DELETE WHEN DONE*}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 63,
      "ReignOfComputer": 357,
      "Wingedevil": 54,
      "-": 381,
      "SQwQ": 77,
      "gachia": 44
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d VISIT - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F12-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "The link:{repoURL}/tree/master/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "The files in link:{repoURL}/tree/master/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "The files in link:{repoURL}/tree/master/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Modifying the template files in link:{repoURL}/tree/master/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 6,
      "-": 111
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d VISIT - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F12-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ". Run the `unrealunity.visit.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "After forking the repo, the documentation will still have the UnityUnreal branding and refer to the `AY1920S1-CS2103T-F12-2/main` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `AY1920S1-CS2103T-F12-2/main`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 4,
      "ReignOfComputer": 1,
      "-": 79
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d VISIT - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F12-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "e.g. `unrealunity.visit.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "e.g. `unrealunity.visit.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "e.g. `unrealunity.visit.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 2,
      "ReignOfComputer": 3,
      "-": 47
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d VISIT - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ":warning-caption: :exclamation:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F12-2/main"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "By: `Team UnrealUnity`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*VISIT* is a *desktop address book application* for Doctors to *plan their visits* and *manage their patient information*. Most notably, VISIT is *optimized for Doctors who prefer to use a Command Line Interface* (CLI) while still having a pleasant Graphical User Interface (GUI). If your typing speed is sufficiently quick, VISIT can *greatly increase your efficiency* in managing your patient profiles and appointments. Interested in spending less time resolving logistical hiccups and more time doing your job? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".  Download the latest `VISITapp.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for VISIT."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *`list`* : lists all patients"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a patient named `John Doe` to VISIT\u0027s address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* All commands listed are *case-insensitive*."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "* Words in `UPPER_CASE` represent the parameters to be specified."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "Parameter headers are required to be in lower-case. +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* Items in square brackets are *optional*. +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/cough` or as `n/John Doe`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* Items with `‚Ä¶`‚Äã after them can be used optionally or multiple times. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/cancer`, `t/pneumonia t/h1n1` etc."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* Parameters can be in any order if suffixes like \"n/\" or \"p/\" are specified. +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d *Application Commands*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "Shows a quick list of user commands. A link to this User Guide is also provided for the full overview of commands. +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d *Viewing and Managing Patients*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gachia"
        },
        "content": "VISIT can store all the patient information for doctors for easy access. The following commands enable doctors to be able to add patients and their relevant particulars to be tracked by VISIT, and also view a list of patients that have been entered."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all patients : `list`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gachia"
        },
        "content": "Shows a list of all patients in the Patients dashboard. Used after a search function to return back to the full list. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a patient : `add`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gachia"
        },
        "content": "Adds a patient to the Patients list. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gachia"
        },
        "content": "A patient can have any number of tags (including 0). Tags will be appear in lowercase and ignore duplicates."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* `add n/Betsy Crowe t/cold e/betsycrowe@example.com a/Changi Hospital p/1234567 t/pneumonia`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a patient\u0027s particulars : `edit`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gachia"
        },
        "content": "Edits an existing patient in the Patients list. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* Edits the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* When editing tags, the existing tags of the patient will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* You can remove all the patient\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Edits the phone number and email address of the 1st patient to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Locating patient by name : `find`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Finds patients whose names contain the queried KEYWORD. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* Partial words will be matched as well. e.g. `Han` will match `Hans`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* All Patients matching the keyword will be returned."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* `find ans` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Returns `Hans` and `Aziz Ansari`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing a Patient\u0027s Full Profile : `profile`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Opens up a new pop-out panel showing the specified patient‚Äôs details (Name, Phone, Email, Address, Tags, Visitation reports). The panel can then be closed by pressing kbd:[q] or kbd:[esc] to quit, or kbd:[p] to generate a text file of the profile. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Format: `profile INDEX`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Generated text version of profiles are saved under the `generated_profiles` folder of the application."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "****"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* Shows full profile for the patient at the specified INDEX."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* The index refers to the index number shown in the displayed patient list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* The index must be a positive integer 1, 2, 3, ‚Ä¶"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* The generated text file will be the following format:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "- `NAME_PHONE_dd-MM-yyyy hh-mm-ss`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "- e.g. `Alex Yeoh_87438807_02-11-2019 20-33-58`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "****"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* `profile 2` +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Opens up a pop-up panel detailing the profile of the patient with the index of 2."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a patient : `delete`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gachia"
        },
        "content": "Deletes the specified patient from the Patients list. +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* Deletes the patient at the specified `INDEX`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* The index refers to the index number shown in the displayed patient list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gachia"
        },
        "content": "Deletes the 2nd patient in the list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Deletes the 1st patient in the results of the `find` command."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all patient data : `clear`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gachia"
        },
        "content": "Clears all entries from the Patients list. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Be careful when entering this, as this will erase all patient data from VISIT!"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "// tag::visitreports[]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d *Viewing and Managing Visits*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "VISIT enables doctors to also track the visitations for each patient, allowing the specification of diagnosis, medications prescribed as well as other general comments per visit."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a new visitation report for a patient : `addvisit`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Opens a pop-up panel that enables the specification of a new visitation report for a particular patient. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Format: `addvisit INDEX [v/DATE]`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "*Example*:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Let\u0027s say that you have just gotten a patient\u0027s folder of past visits and you want to record a house call made on 3rd January 2019."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "The patient is 1st in the list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "To enter the details of the report into VISIT:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "1. Type `addvisit 1 v/03/01/2019` into the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "+"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGAddVisit0.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "+"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* Date must be in the \"dd/MM/yyyy\" format (e.g. `v/19/10/2019`). The valid range of dates starts from the year 1900 and ends at year 2999 (inclusive)."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "If no date is specified and the command is used without the prefix \u0027v/\u0027 (for example `addvisit 1`), the report will default to the current local date of the computer."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "2. Key in the details in the respective fields of the pop-up form that appears."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGAddVisit1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "+"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* Press kbd:[CTRL] + kbd:[Tab] to navigate to the next field (down)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* Press kbd:[SHIFT] + kbd:[Tab] to navigate to the previous field (up)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "3. Click the kbd:[Save] button or press kbd:[F2] to save your entry."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "4. The pop-up form closes and the display box will display a message indicating a successful entry."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "+"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGAddVisit2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "+"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "While  `addvisit 1` is valid, typing in `addvisit 1 v/` without a valid date will give an error."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGAddVisit3.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Editing the particulars of a visitation report : `editvisit`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Opens a pop-up panel that enables the editing of an existing visitation report of a particular patient. +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gachia"
        },
        "content": "Format: `editvisit INDEX [i/REPORT_INDEX]`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "If no report index is specified, `editvisit INDEX` will open a panel showing the reports of that patient and the relevant indexes of the reports. To edit the visit report, simply re-enter the command with the desired report index."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGEditVisit0.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "*Example*:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Let\u0027s say you want to edit the 2nd visit report of a patient and the patient is the 3rd name in the list."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "1. Type `editvisit 3 i/2` into the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "+"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGEditVisit1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "+"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "2. Key in the details in the respective fields of the pop-up form(which is pre-filled with the existing information of the report) that appears."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "+"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGEditVisit2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "+"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* Press kbd:[CTRL] + kbd:[Tab] to navigate to the next field (down)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* Press kbd:[SHIFT] + kbd:[Tab] to navigate to the previous field (up)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "3. Click the kbd:[Save] button or press kbd:[F2] to save your edits."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "4. The pop-up form closes and the display box will display a message indicating a successful entry."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGEditVisit3.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "An error will be thrown if the report with the given report index does not exist or the index given is not a number."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGEditVisit4.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a visitation report : `deletevisit`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Deletes the specified visitation report. +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gachia"
        },
        "content": "Format: `deletevisit INDEX [d/REPORT_INDEX]`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "If no report index is specified, `deletevisit INDEX` will open a panel showing the reports of that patient and their relevant indexes of the reports. To delete the visit, simply re-enter the command with the desired report index."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGDeleteVisit0.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "*Example*:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Let\u0027s say you want to delete the 1st visit report of a patient and the patient is the 2nd name in the list."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "1. Type `deletevisit 2 d/1` into the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "+"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGDeleteVisit1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "+"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "2. A panel showing the list of reports will be shown, now without the deleted report and the display box will display a message indicating a successful deletion."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGDeleteVisit2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "An error will be thrown if the report with the given report index does not exist or the index given is not a number."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGDeleteVisit3.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "For both `deletevisit` and `editvisit` commands if the patient has no past records, a pop up with the message \"Patient has no past records\" will be shown instead of a list of reports when `editvisit [INDEX]` or `deletevisit [INDEX]` is run. Note that an error will be raised if the report index is provided to a patient with no past records, for example `editvisit [INDEX] i/1` or `deletevisit [INDEX] d/1`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::UGNoRecords.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "// end::visitreports[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[[appointmentsImplementation]]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "// tag::appointments[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d *Appointment System*"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "VISIT also enables doctors to keep abreast and up-to-date on any events or deadlines as VISIT can be customized to remind them of any follow-up visits or other timed reminders."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "There are two kinds of Appointments: Follow-Ups and Reminders."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "You can only have one active Appointment of the same title, adding the same Appointment with a different day count will simply update the existing Appointment."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Follow-ups in this version do not update if you change the name of the patient after the follow-up is created."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a follow-up visit with patient : `followup`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Adds a follow-up visit for a particular patient. You can add one even if you have never had a visit with the patient in the past. The application will keep track of when your next appointment with the patient is on the Appointments window. +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Format: `followup INDEX [d/DAYS]`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The follow-up entry will by default generate the follow-up for 7 days\u0027 time if not specified."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `followup 9 d/10` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Creates a follow-up entry on patient with index 9 for 10 days later."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `followup 1` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Creates a follow-up entry on patient with index 1 for 7 days later."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::UGApptFollowUps.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a generic reminder : `reminder`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Creates a new reminder to show up in the Appointments window. +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Format: `reminder TEXT [d/DAYS]`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The reminder entry will by default generate the prompt for 7 days\u0027 time if not specified."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `reminder Two Point Hospital closed d/10` +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Creates a reminder \"Two Point Hospital closed\" that will display for the next 10 days."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `reminder Losartan recall` +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Creates a reminder \"Losartan recall\" that will display for the next 7 days."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::UGApptReminders.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d Removing an Appointment : `removeappt`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Remove an appointment from VISIT. This can be either a Follow-up or Reminder. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Format: `removeappt DESCRIPTION [d/DAYS]`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Any appointment matching just the description will be removed if the specific days is not specified."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `removeappt Two Point Hospital closed` +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Removes any appointment which description is \"Two Point Hospital closed\"."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `removeappt Satya Nadella` +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Removes any appointments with the patient whose name is Satya Nadella."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::UGApptRemoveAppt.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d Show Appointments \"Message of the Day\" box : `show`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Shows a pop-up containing the appointments. This is useful if you want to keep a small window just containing the appointments on the screen, separate from the main window. +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Format: `show`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::UGApptShow.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d Sort Appointments : `sort`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Sorts the appointments in order of type, days remaining, and finally by name. +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "// end::appointments[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d *Optimization for Command-Line Interface (CLI) Users*"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "VISIT being an application optimized for doctors who are comfortable with CLI, has support for features such as aliasing for commands to enable command entries which are often used to be stored and used quickly and easily."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Setting a shorthand command / alias : `alias`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Set an alias for a command to enable faster command entry for a customized input. +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Format: `alias l/SHORTHAND v/COMMAND`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* `alias l/ls v/list` +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Typing `ls` now works equivalently as typing `list`."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "* `alias l/display all patients v/list` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "Typing `display all patients` now works equivalently as typing `list`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Removing a shorthand command / alias : `unalias`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Delete an existing alias. +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Format: `unalias SHORTHAND`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* `unalias ls` +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Typing `ls` will no longer be equivalent to typing `list`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Showing all existing shorthand commands / aliases : `aliaslist`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Show all existing aliases. +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Format: `aliaslist`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* `aliaslist` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "Shows all the existing aliases."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d *Saving the data*"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "VISIT\u0027s address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d *Upcoming Features*"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "The following features are intended for a later release of VISIT that will further expand on the managing power doctors will be able to execute using the application."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Inventory System `[Coming in v2.0]`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "gachia"
        },
        "content": "VISIT v2.0 will include an inventory system for doctors to manage and organise their medical stores."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "gachia"
        },
        "content": "Doctors will be able to generate the list of medication in their stock and assign them to patients using the app"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "gachia"
        },
        "content": ", which automatically deducts from that list. +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "gachia"
        },
        "content": "Warnings of low stocks are also an intended feature."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Printing of Medical Certificates `[Coming in v2.0]`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "gachia"
        },
        "content": "In v2.0, VISIT will allow doctors to easily print an official Medical Certificate with a single command."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d\u003d Microsoft Azure Integration `[Coming in v2.0]`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "gachia"
        },
        "content": "Microsoft Azure is a popular Cloud Computing platform that allows for data analysis, remote deployment and user"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "gachia"
        },
        "content": "authentication resources. We plan to leverage this power in VISIT v2.0 so that doctors may securely access"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "gachia"
        },
        "content": "VISIT from any location, truly bringing VISIT on-the-go."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003d\u003d\u003d\u003d Improved UI `[Coming in v2.0]`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "gachia"
        },
        "content": "With more features being added in v2.0, the UI will be reworked to allow new and old features to have"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "gachia"
        },
        "content": "great accessibility and usability. The new UI will utilise a dashboard system so that Doctors"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "gachia"
        },
        "content": "are able to view more information as we scale up VISIT\u0027s functionality. Each tab in the dashboard"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "gachia"
        },
        "content": "will represent a feature, i.e. The Appointment list will be a tab containing a Calendar view that"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "gachia"
        },
        "content": "tracks reminders and followups by the date and time, with a pop up notification on launch and near deadlines."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*Q*: _How do I transfer my saved patient and visit data to another Computer?_ +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*A*: Install VISIT in the other computer, run it once, typing  `exit` to exit the application. Next, overwrite the generated `data` folder created with the `data` folder of your previous installation folder for VISIT."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*Q*: _How do I transfer my shorthand command data to another Computer?_ +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "*A*: Install VISIT in the other computer and copy the `preferences.json` file from the previous installation folder for VISIT into the installation folder on the new computer."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d *Application Commands*"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Viewing help* : `help`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Exiting the program* : `exit`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d *Viewing and Managing Patients*"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Listing all patients* : `list`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Adding a patient* : `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]‚Ä¶‚Äã` +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g. `add n/Betsy Crowe t/cold e/betsycrowe@example.com a/Changi Hospital p/1234567 t/pneumonia`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Editing a patient‚Äôs particulars* : `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]‚Ä¶` +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g. `edit 2 n/Betsy Crower t/`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Locating patient by name* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g. `find Betsy Tim John`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Viewing Full Profile* : `profile INDEX` +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g. `profile 1`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Deleting a patient* : `delete INDEX` +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g. `delete 2`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Clearing all patient data* : `clear`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d *Viewing and Managing Visits*"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Adding a new visitation report for a patient* : `addvisit INDEX [v/DATE]` +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g. `addvisit 1 v/19/10/2019`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "gachia"
        },
        "content": "* *Editing the particulars of a visitation report* : `editvisit INDEX [i/REPORT_INDEX]` +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g. `editvisit 1 i/1`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "gachia"
        },
        "content": "* *Deleting a visitation report* : `deletevisit INDEX [d/REPORT_INDEX]` +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g. `deletevisit 1 d/1`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d *Appointment System*"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Adding a follow-up reminder with patient* : `followup INDEX [d/DAYS]` +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "e.g. `followup 9 d/10`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Creating a generic reminder* : `reminder TEXT [d/DAYS]` +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "e.g. `reminder Two Point Hospital closed d/10`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* *Removing an Appointment* : `removeappt DESCRIPTION [d/DAYS]` +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "e.g. `removeappt Two Point Hospital closed`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* *Show Appointments \"Message of the Day\" box* : `show`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* *Sort Appointments* : `sort`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003d\u003d\u003d *Optimization for Command-Line Interface (CLI) Users*"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Setting a shorthand command / alias* : `alias l/SHORTHAND v/COMMAND` +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "e.g. `alias l/display all patients v/list`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Removing a shorthand command / alias* : `unalias SHORTHAND` +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "e.g. `unalias display all patients`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "* *Showing all existing shorthand commands / aliases* : `aliaslist`"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 179,
      "ReignOfComputer": 79,
      "Wingedevil": 4,
      "-": 119,
      "SQwQ": 87,
      "gachia": 36
    }
  },
  {
    "path": "docs/UsingAppVeyor.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AppVeyor"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "For use with _VISIT_, wherever `addressbook-level4` is used in the screenshots, you should use *`main`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.appveyor.com/[AppVeyor] is a _Continuous Integration_ platform for GitHub projects. It runs its builds on Windows virtual machines."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "AppVeyor can run the project\u0027s tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken on Windows by the changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "The current AppVeyor setup runs `gradlew.bat test` whenever someone pushes code to the repo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customize your AppVeyor build further, you can learn more about AppVeyor from the https://www.appveyor.com/docs/[AppVeyor Documentation]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up AppVeyor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://ci.appveyor.com/, and under `Login`, click on `GitHub` to login with your GitHub account. Enter your GitHub account details if needed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/login.png[Click on GitHub in the login page]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  After logging in, you will be brought to your projects dashboard. Click on `NEW PROJECT`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-1.png[Click on \"NEW PROJECT\" in the projects dashboard]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  You will be brought to the `Select repository` page. Select `GitHub`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* On your first usage of AppVeyor, you will need to give AppVeyor authorization to your GitHub account. Click on `Authorize GitHub`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-2.png[Click on Authorize GitHub]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* This will bring you to a GitHub page that manages the access of third-party applications to your repositories."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Depending on whether you are the owner of the repository, you can either"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "grant access:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Or request access:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".  AppVeyor will then list the repositories you have access to in your GitHub account. Find the repository you want to set AppVeyor up on, and then click `ADD`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-3.png[Click \"Add\" on the repository you want to set AppVeyor up on]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  AppVeyor will then be activated on that repository. To see the CI in action, push a commit to any branch!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the AppVeyor build:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-pending.png[Commit build]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-log.png[AppVeyor build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \"build status\" badge at the top of `README.adoc` to point to the AppVeyor build status of your own repo."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* To find your build status badge URL, first go to your project settings by clicking on the \"Settings\" icon:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-1.png[Click on project settings]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Then go to the `Badges` section of your project settings by clicking on it:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-2.png[Click on \"Badges\"]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* As AppVeyor does not provide asciidoc code for the badge, we will have to create our own. Start by copying the markdown code provided:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-3.png[Copy the markdown code]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The markdown code should be in this format:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[![Build status](\u003clink to image\u003e)](\u003clink to project\u003e)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Convert it to the asciidoc format as follows:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003clink to project\u003e[image:\u003clink to image\u003e[Build status]]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The asciidoc code should look similar to:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Copy and paste the asciidoc code to your `README.adoc` file."
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 1,
      "-": 93
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "For use with _VISIT_, wherever `addressbook-level4` is used in the screenshots, you should use *`main`*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter an arbitrary description e.g. addressbook"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 1,
      "-": 47
    }
  },
  {
    "path": "docs/UsingCoveralls.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Coveralls"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "For use with _VISIT_, wherever `addressbook-level4` is used in the screenshots, you should use *`main`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/[Coveralls] is a web service that tracks code coverage over time for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Coveralls requires Travis CI to be set up beforehand as Travis sends the coverage report from the latest build to Coveralls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "If you have not set up Travis CI, see \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e. Currently, Coveralls supports Travis CI but not AppVeyor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Coveralls"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://coveralls.io/ and click `SIGN IN`. Then click `GITHUB SIGN IN` and enter your GitHub account details if needed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".  After logging in, you will be brought to the `Your Repositories` page. On the site\u0027s navigation bar, click https://coveralls.io/repos/new[ADD REPOS]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Find the switch for the forked repository."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `GITHUB SETTINGS` as shown below:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/github_settings.png[GitHub settings]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "to Coveralls so that it can access your repository."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* If your repository cannot be found, click `SYNC REPOS`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/sync_repos.png[Sync repos]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link of the `Coverage Status` badge at the top of your \u003c\u003cREADME#, README.adoc\u003e\u003e to point to that of your own repo by replacing the outlined areas with `your-org-name/your-repo-name`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_asciidoc_code.png[Coverage Status Badge]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  You can now see the coverage report for your project after each Travis build by clicking on the `Coverage Status` badge."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_report.png[Coverage Report Summary]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Disabling Coveralls Automatic Comments on Pull Requests"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Coveralls automatically comments on the coverage status of the pull requests in GitHub. If it\u0027s a hindrance, you can disable it in the settings of your project in Coveralls:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click `Settings`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  Uncheck the `LEAVE COMMENTS?` checkbox. Then click `SAVE CHANGES`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/disable_comments.png[Disable comments, width \u003d 942]"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 1,
      "-": 62
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "For use with _VISIT_, wherever `addressbook-level4` is used in the screenshots, you should use *`main`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean test coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/main/`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 2,
      "-": 138
    }
  },
  {
    "path": "docs/diagrams/AddAliasSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "participant \"a:AliasCommand\" as AliasCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "participant \":UserPrefs\" as UserPrefs MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "participant \"at:AliasTable\" as AliasTable MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "[-\u003e LogicManager : execute(alias)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(alias)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "create AliasCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "AddressBookParser -\u003e AliasCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate AliasCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "opt illegal alias"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    AddressBookParser \u003c-- AliasCommand : throw CommandException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    LogicManager \u003c-- AddressBookParser : throw CommandException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    [\u003c- LogicManager : throw CommandException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "end"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "AliasCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate AliasCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "AddressBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "LogicManager -\u003e AliasCommand : execute()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate AliasCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "AliasCommand -\u003e Model : addAlias(alias, aliasTo)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "Model -\u003e UserPrefs : addAlias(alias, aliasTo)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate UserPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "UserPrefs -\u003e AliasTable :addAlias(alias, aliasTo)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate AliasTable"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "AliasTable --\u003e UserPrefs :at"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate AliasTable"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "UserPrefs --\u003e Model :"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate UserPrefs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "Model --\u003e AliasCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "AliasCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate AliasCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "AliasCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "destroy AliasCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Wingedevil": 67
    }
  },
  {
    "path": "docs/diagrams/AddVisit0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":User executes addvisit command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "if () then ([given date])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    if () then ([valid date]);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    :date is set as input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    else([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        :shows error;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    :date is set as current date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":shows pop-up form for user to fill in;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":User saves changes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":VisitList is updated by invoking SaveVisitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "stop"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SQwQ": 25
    }
  },
  {
    "path": "docs/diagrams/ApplyAliasActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ":User uses a macro/alias;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "repeat"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    if () then ([matches alias])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        if () then ([currentAlias \u003e previousAlias])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            :Apply this alias instead;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        else ([else])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "repeat while () is ([more alias exists in table])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "-\u003e[else];"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "stop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Wingedevil": 16
    }
  },
  {
    "path": "docs/diagrams/ApplyAliasSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "participant \"c:Command\" as Command LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "participant \":UserPrefs\" as UserPrefs MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "participant \"at:AliasTable\" as AliasTable MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "[-\u003e LogicManager : execute(commandText)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "LogicManager -\u003e Model : applyAlias(commandText)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "Model -\u003e UserPrefs : applyAlias(commandText)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate UserPrefs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "UserPrefs -\u003e AliasTable : applyAlias(commandText)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate AliasTable"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "AliasTable --\u003e UserPrefs : aliasedCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate AliasTable"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "UserPrefs --\u003e Model : aliasedCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate UserPrefs"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "Model --\u003e LogicManager : aliasedCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(alias)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "create Command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "AddressBookParser -\u003e Command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate Command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "Command --\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate Command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "AddressBookParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "LogicManager -\u003e Command : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "activate Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "Command --\u003e LogicManager : result"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate Command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "Command -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "destroy Command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Wingedevil": 61
    }
  },
  {
    "path": "docs/diagrams/ApptAddReminderSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "participant \":ReminderCommandParser\" as ReminderCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "participant \"r:ReminderCommand\" as ReminderCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "participant \":UserPrefs\" as UserPrefs MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "box Model STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "participant \"at:AppointmentTable\" as AppointmentTable MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "participant \"at:AppointmentList\" as AppointmentList MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "participant \"appt:Appointment\" as Appointment MODEL_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "end box"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[-\u003e LogicManager : execute(reminder)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(reminder)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "create ReminderCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "AddressBookParser -\u003e ReminderCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "activate ReminderCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "create ReminderCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "ReminderCommandParser -\u003e ReminderCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "activate ReminderCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "opt illegal reminder"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    AddressBookParser \u003c-- ReminderCommand : throw CommandException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    LogicManager \u003c-- AddressBookParser : throw CommandException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    [\u003c- LogicManager : throw CommandException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "end"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "ReminderCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "deactivate ReminderCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "AddressBookParser --\u003e LogicManager : r"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "LogicManager -\u003e ReminderCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "activate ReminderCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "ReminderCommand -\u003e Model : addAppointment(type, description, days)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Model -\u003e UserPrefs : addAppointment(type, description, days)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "activate UserPrefs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "UserPrefs -\u003e AppointmentTable : addAppointment(type, description, days)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "activate AppointmentTable"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "AppointmentTable -\u003e AppointmentTable : antiDuplicate(check, description, days)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "opt appointment exists"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    UserPrefs \u003c-- AppointmentTable : throw CommandException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    Model \u003c-- UserPrefs : throw CommandException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    ReminderCommand \u003c-- Model : throw CommandException"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    AddressBookParser \u003c-- ReminderCommand : throw CommandException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    LogicManager \u003c-- AddressBookParser : throw CommandException"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    [\u003c- LogicManager : throw CommandException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "end"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "AppointmentTable --\u003e UserPrefs : at"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "deactivate AppointmentTable"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "UserPrefs -\u003e AppointmentList : addAppointment(type, description, days)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "activate AppointmentList"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "AppointmentList -\u003e Appointment : appt"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "activate Appointment"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "AppointmentList \u003c-- Appointment"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "AppointmentList -\u003e AppointmentList : internalAddWithCheck(toAdd, description)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "opt appointment exists"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    AppointmentList -\u003e AppointmentList : setAppointment(target, editedAppointment)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "end"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "AppointmentList --\u003e UserPrefs : at"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "deactivate AppointmentList"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "UserPrefs --\u003e Model :"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "deactivate UserPrefs"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Model --\u003e ReminderCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "ReminderCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "deactivate ReminderCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "ReminderCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "destroy ReminderCommand"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 103
    }
  },
  {
    "path": "docs/diagrams/ApptAppointmentClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "show members"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  namespace unrealunity.visit {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    namespace model {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "      namespace appointment {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        class unrealunity.visit.model.appointment.Appointment {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            - days : int"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            - description : String"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + Appointment()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + getDays()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + getDaysString()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + getDescription()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + getDescriptionRaw()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + getType()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + isSameAppointment()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + isSameAppointment()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + setDays()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + toString()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "      }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 30
    }
  },
  {
    "path": "docs/diagrams/ApptAppointmentListClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "show members"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  namespace unrealunity.visit {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    namespace model {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "      namespace appointment {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        class unrealunity.visit.model.appointment.AppointmentList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            - internalList : ObservableList\u003cAppointment\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            - internalUnmodifiableList : ObservableList\u003cAppointment\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + AppointmentList()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + addAppointment()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + antiDuplicate()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + antiDuplicate()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + deleteAppointment()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + equals()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + hashCode()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + internalAddWithCheck()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + iterator()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + resetAppointments()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + setAppointment()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + sortAppointments()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "      }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 33
    }
  },
  {
    "path": "docs/diagrams/ApptAppointmentTableClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "show members"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  namespace unrealunity.visit {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    namespace model {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "      namespace appointment {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        class unrealunity.visit.model.appointment.AppointmentTable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            - followup : HashMap\u003cString, Integer\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            - reminders : HashMap\u003cString, Integer\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + AppointmentTable()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + addAppointment()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + cascadeDay()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + deleteAppointment()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + equals()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + getAppointmentList()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            {static} + getDefaultAppointments()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + hashCode()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + outputAppointments()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + sortAppointments()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + toString()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            - antiDuplicate()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            - sort()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "      }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 33
    }
  },
  {
    "path": "docs/diagrams/ApptFollowUpActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":User executes \"\"followup\"\" command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "if () then ([valid person index]);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    :\"\"Person [index]\"\" is set as target;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    else([else])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        :shows error;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        stop"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "if () then ([valid days input]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    :\"\"FollowUpCommand\"\" prepared;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    else([else])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        :shows error;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":\"\"FollowUpCommand\"\" executes \"\"addAppointment\"\" in \"\"model\"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":\"\"addAppointment\"\" adds Appointment data to \"\"AppointmentTable\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "if () then ([exact appointment not exists]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    if ([description not exists]) then ([continue]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        :Create new appointment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        else([else])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            :Overwrite appointment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    else([else])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        :shows error;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        stop"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "endif"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":\"\"addAppointment\"\" adds Appointment data to \"\"AppointmentList\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "if () then ([description not exists]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    :Create new appointment;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    else([else])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        :Overwrite appointment;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "endif"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":Update UI and show user;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "stop"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 49
    }
  },
  {
    "path": "docs/diagrams/DeleteVisit0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":User executes deletevisit command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "if () then ([report index given])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    :Delete chosen report;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "else ([no report index given])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":Show List of Visit Reports;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "stop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SQwQ": 16
    }
  },
  {
    "path": "docs/diagrams/EditVisit0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":User executes editvisit command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "if () then ([given report index])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    if () then ([valid index]);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        :shows pop-up form for user to fill in;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        :User saves changes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        :VisitList is updated by invoking SaveVisitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    else([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        :shows error;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "else ([no report index])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    :Show indexed list of Visit Reports;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "stop"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SQwQ": 21
    }
  },
  {
    "path": "docs/diagrams/EditVisit1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "participant \":VisitRecordWindow\" as VisitRecordWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "participant \"e:EditVisitCommand\" as EditCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "participant \"s:SaveVisitCommand\" as SaveVisitCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "MainWindow -\u003e LogicManager : execute(editivisit)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(editivisit)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "create EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "AddressBookParser -\u003e EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "opt illegal person index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    LogicManager \u003c-- AddressBookParser : throw ParseException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    MainWindow \u003c-- LogicManager : throw ParseException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    [\u003c-- MainWindow : throw ParseException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "end"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "opt non integer report index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    LogicManager \u003c-- AddressBookParser : throw ParseException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    MainWindow \u003c-- LogicManager : throw ParseException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    [\u003c-- MainWindow : throw ParseException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "end"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "opt out of bound report index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    AddressBookParser \u003c-- EditCommand : throw CommandException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    LogicManager \u003c-- AddressBookParser : throw CommandException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    MainWindow \u003c-- LogicManager : throw CommandException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    [\u003c-- MainWindow : throw CommandException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "end"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "EditCommand --\u003e AddressBookParser : e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "AddressBookParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "LogicManager -\u003e EditCommand : execute()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "EditCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "EditCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "destroy EditCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "LogicManager --\u003e MainWindow : result"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "alt isShowList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    [\u003c-MainWindow : display list of reports"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "else else"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    MainWindow -\u003e VisitRecordWindow : display form"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    activate VisitRecordWindow"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    VisitRecordWindow -\u003e SaveVisitCommand ** : user saves"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    activate SaveVisitCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    SaveVisitCommand --\u003e VisitRecordWindow : s"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    deactivate SaveVisitCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    VisitRecordWindow -\u003e LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    activate LogicManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    LogicManager -\u003e SaveVisitCommand : execute(s)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    activate SaveVisitCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    SaveVisitCommand -\u003e model : saves changes"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    activate model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    model --\u003e SaveVisitCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    deactivate model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    SaveVisitCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    deactivate SaveVisitCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    SaveVisitCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    destroy SaveVisitCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    LogicManager --\u003e VisitRecordWindow : result"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    deactivate LogicManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    VisitRecordWindow --\u003e MainWindow : result"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    deactivate VisitRecordWindow"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "end"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SQwQ": 94
    }
  },
  {
    "path": "docs/diagrams/NewModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class VisitList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "Package Appointment {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class Appointment"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class AppointmentTable"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "Package Alias {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class AliasTable"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "ModelManager o-right-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "UserPrefs *--\u003e \"1\" AppointmentTable"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "UserPrefs *--\u003e \"1\" AliasTable"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "AppointmentTable *--\u003e \"*\" Appointment"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "Person *--\u003e VisitList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "Email -[hidden]right-\u003e VisitList"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "ModelManager --\u003e\"1\" Appointment : filtered list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gachia": 73
    }
  },
  {
    "path": "docs/diagrams/NewStorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class JsonAddressBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "StorageManager o--\u003e AddressBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "JsonAddressBookStorage .left.|\u003e AddressBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "JsonAddressBookStorage .down.\u003e JsonSerializableAddressBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "JsonSerializableAddressBookStorage .right.\u003e JsonSerializablePerson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "JsonSerializablePerson .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "JsonSerializablePerson .down.\u003e JsonAdaptedVisit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gachia": 25
    }
  },
  {
    "path": "docs/diagrams/NewUiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam linetype polyline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam linetype ortho"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class \"\\n\\n{abstract}\\nUiPart\\n\\n\" as UiPart"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class \"\\n\\nMainWindow\\n\\n\" as MainWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class MotdWindow"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class VisitRecordWindow"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class ProfileWindow"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class ReminderPanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class VisitListPanel"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class VisitCard"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class ReminderCard"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "UiManager .up.|\u003e Ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -down\u003e HelpWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -down\u003e MotdWindow"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -down\u003e ProfileWindow"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -down\u003e VisitRecordWindow"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow *-down\u003e CommandBox"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow *-down\u003e ResultDisplay"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow *-down-\u003e VisitListPanel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow *-down-\u003e ReminderPanel"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "ReminderPanel -down-\u003e ReminderCard"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitListPanel -down-\u003e VisitCard"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitRecordWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "ProfileWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "ResultDisplay -down-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "CommandBox -down-|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "PersonListPanel -down-|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "PersonCard -down-|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "ReminderPanel -down-|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "ReminderCard -down-|\u003e UiPart"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitListPanel -down-|\u003e UiPart"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitCard -down-|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "MotdWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "PersonCard ...\u003e Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitCard ...\u003e Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "ReminderCard ...\u003e Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gachia"
        },
        "content": "PersonListPanel -[hidden]left- VisitListPanel"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitListPanel -[hidden]left- ReminderPanel"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gachia"
        },
        "content": "ReminderPanel -[hidden]left- VisitRecordWindow"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitRecordWindow -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gachia"
        },
        "content": "CommandBox -[hidden]left- ReminderPanel"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gachia"
        },
        "content": "HelpWindow -[hidden]left- ProfileWindow"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gachia"
        },
        "content": "ProfileWindow -[hidden]left- MotdWindow"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gachia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gachia": 86
    }
  },
  {
    "path": "docs/diagrams/Profile0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":User executes \"\"isProfile\"\" command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "if () then ([valid person index]);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    :\"\"Person [index]\"\" is set as target;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    else([else])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        :shows error;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        stop"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "endif"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ":\"\"ProfileWindow\"\" populated with target \"\"Person\"\" data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ":\"\"ProfileWindow\"\" is shown to the user;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "stop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 16,
      "SQwQ": 1
    }
  },
  {
    "path": "docs/diagrams/Profile1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "!define MS(x) \u003cfont: monospaced\u003ex\u003c/font\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/\u0027Beta syntax is not able to replicate this diagram in a neat way. However with the legacy"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " syntax, branch labels cannot include square brackets without breaking. Hence, \"\u0026#93;\" is"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " used to escape the closing square bracket."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " (See https://forum.plantuml.net/6374/escape-square-brackets-in-a-label)\u0027/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "(*top) --\u003e \"MS(ProfileWindow) instance is open\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "--\u003e \"Check if user pressed \u0027esc\u0027\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "if \"\" then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "--\u003e [[\u0027MS(esc)\u0027 pressed\u0026#93;] \"MS(ProfileWindow) is hidden\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "--\u003e (*)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "else"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    --\u003e [[\u0027MS(esc)\u0027 not pressed\u0026#93;] \"Check if user manually"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    closed ProfileWindow\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    if \"\" then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    --\u003e [[Manually closed\u0026#93;] \"MS(ProfileWindow) is hidden\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    else"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    --\u003e [[Not closed\u0026#93;] \"MS(ProfileWindow) instance is open\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "endif"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 25
    }
  },
  {
    "path": "docs/diagrams/ProfileSequenceDiagram1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "participant \":ProfileWindow\" as ProfileWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "participant \":ProfileCommandParser\" as ProfileCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "participant \"p:ProfileCommand\" as ProfileCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "participant \"r:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[--\u003e MainWindow : executeCommand(commandText)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "MainWindow -\u003e LogicManager : execute(isProfile)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(isProfile)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "create ProfileCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "AddressBookParser -\u003e ProfileCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "activate ProfileCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "ProfileCommandParser -\u003e ProfileCommandParser : parse(isProfile)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "activate ProfileCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "opt invalid argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    AddressBookParser \u003c-- ProfileCommandParser : throw ParseException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    LogicManager \u003c-- AddressBookParser : throw ParseException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    MainWindow \u003c-- LogicManager : throw ParseException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    [\u003c-- MainWindow : throw ParseException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "end"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "ProfileCommandParser \u003c-- ProfileCommandParser : index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "deactivate ProfileCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "create ProfileCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "ProfileCommandParser -\u003e ProfileCommand : ProfileCommand(index)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "activate ProfileCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "ProfileCommand --\u003e ProfileCommandParser : p"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "deactivate ProfileCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "ProfileCommandParser --\u003e AddressBookParser : p"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "deactivate ProfileCommandParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "AddressBookParser --\u003e LogicManager : p"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "destroy ProfileCommandParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "LogicManager -\u003e ProfileCommand : execute(model)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "activate ProfileCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "ProfileCommand -\u003e Model : getFilteredPersonList()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "ProfileCommand \u003c-- Model: filteredList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "opt invalid person index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    AddressBookParser \u003c-- ProfileCommand : throw CommandException"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    LogicManager \u003c-- AddressBookParser : throw CommandException"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    MainWindow \u003c-- LogicManager : throw CommandException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    [\u003c-- MainWindow : throw CommandException"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "end"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "ProfileCommand -\u003e CommandResult : CommandResult(person)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "ProfileCommand \u003c-- CommandResult : r"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "ProfileCommand --\u003e LogicManager : r"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "deactivate ProfileCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "LogicManager --\u003e MainWindow : r"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "destroy ProfileCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "MainWindow -\u003e CommandResult : getProfilePerson()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "MainWindow \u003c-- CommandResult : person"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "MainWindow -\u003e ProfileWindow : setup(r)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "destroy CommandResult"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "activate ProfileWindow"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "MainWindow \u003c-- ProfileWindow"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "deactivate ProfileWindow"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "MainWindow --\u003e ProfileWindow : show()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "[\u003c--MainWindow"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 105,
      "SQwQ": 3
    }
  },
  {
    "path": "docs/diagrams/UiRedesignClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class MotdWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class VisitRecordWindow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class ProfileWindow"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class ReminderPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class VisitListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class VisitCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class ReminderCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "UiManager .up.|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -down-\u003e MotdWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -down-\u003e ProfileWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -down-\u003e VisitRecordWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow *-down--\u003e VisitListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow *-down--\u003e ReminderPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "ReminderPanel -down-\u003e ReminderCard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitListPanel -down-\u003e VisitCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitRecordWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "ProfileWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "ReminderPanel -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "ReminderCard -down-|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitListPanel -down-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitCard -down-|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "MotdWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitCard ...\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "ReminderCard ...\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitListPanel -[hidden]left- ReminderPanel"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "ReminderPanel -[hidden]left- VisitRecordWindow"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "VisitRecordWindow -[hidden]left- ProfileWindow"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "ProfileWindow -[hidden]left- MotdWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gachia": 65
    }
  },
  {
    "path": "docs/diagrams/VisitClass0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "class Person"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "class VisitList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "class VisitReport"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Person\"1\"*--\"1\"VisitList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "VisitList\"1\"*--\"0..*\"VisitReport"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SQwQ": 15
    }
  },
  {
    "path": "docs/stylesheets/gh-pages.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@import url(https://fonts.googleapis.com/css?family\u003dMontserrat|Open+Sans);"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@import \"asciidoctor.css\"; /* Default asciidoc style framework - important */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/* Custom block: details */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    border-left: .25rem solid rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: .5rem"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: transparent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    border: none;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/* Overrides for asciidoctor.css */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "a {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #0074c7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "h1,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1 \u003e a.link,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "h2,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "h2 \u003e a.link,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "h3,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "h3 \u003e a.link,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle \u003e a.link,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title \u003e a.link,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "h4,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "h4 \u003e a.link,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "h5,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "h5 \u003e a.link,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "h6,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "h6 \u003e a.link {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #e46c0a;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content \u003e .title,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock \u003e .title,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .title,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock \u003e .title,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock \u003e .title,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock \u003e .title,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".stemblock \u003e .title,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".openblock \u003e .title,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph \u003e.title,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock \u003e .title,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock \u003e .title,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock \u003e .title,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".videoblock \u003e .title,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".dlist \u003e .title,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".olist \u003e .title,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".ulist \u003e .title,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".qlist \u003e .title,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist \u003e .title {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgb(197, 90, 17);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        background-color: #f6f6f6;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        border-top: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer-text {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        color: #595959;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        line-height: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "/* Utilities */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".container {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 62.5rem;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: auto;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "/* Colors */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-light {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #f8f9fa;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-lighter {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fbfbfb;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "/* Navbar */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: nowrap;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1rem;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px 1rem;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.3rem;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #595959;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:hover,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:focus {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:hover,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:focus {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:hover,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:focus {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px transparent solid;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link.active {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px #e46c0a solid;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .nav-link.active {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar \u003e .container {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: 1rem;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0.8125rem 0rem;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: 0.9375rem;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.25rem;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand img {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    height: 2.5rem;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0rem 0.4rem;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.7rem;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand img {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 2.3rem;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-nav {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-grow: 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    align-items: center;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: inherit;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".nav-link {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0px;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1rem 1rem;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "/* Do not display site header on print mediums */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    #seedu-header {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    #site-header {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 1,
      "-": 213
    }
  },
  {
    "path": "docs/team/reignofcomputer.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d Jason Chee - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":warning-caption: :exclamation:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F12-2/main"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d PROJECT: VISIT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "---"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "VISIT is an open-source Customer Relationship Management (CRM) software for *House Call Doctors*. It is based on a Command-Line Interface (CLI) application called AddressBook3 by the SE-EDU Initiative. The UnrealUnity Team comprising of 4 people including myself introduced features that allow these doctors on-the-go to manage their appointments in an easy and enhanced fashion. It is written in Java with its GUI created in JavaFX, and has about 16 kLoC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ".VISIT Main Window"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "I was tasked with conceptualizing and implementing the *Appointments* system comprising of *Reminders* and *Follow-ups*. This document highlights these features and provides the documentation for them from the User and Developer Guides."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* *Major enhancement*: Added *the appointments system*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** What it does: Allows the user to create and manage appointments such as follow-ups with patients and general reminders."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** Justification: Doctors need a way to track when their next appointments are, or to follow-up with patients in their care, such as if the patient has been cured by the end of their antibiotics dose. They also need some way to track important deadlines and events through reminders, such as a particular hospital being closed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** Highlights: This enhancement required two data structures to be used at the same time in parallel due to the underlying way data is stored in AddressBook3. Due to the lack of documentation from how most of the base project worked, a lot of tracing and trial-and-error had to be done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* *Minor enhancement*: Forced commands without arguments to refuse execution if invalid arguments are still specified."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dReignOfComputer\u0026tabRepo\u003dAY1920S1-CS2103T-F12-2%2Fmain%5Bmaster%5D[RepoSense]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** Tests:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*** Wrote additional tests to increase coverage from 55% to 63% (Pull requests https://github.com/AY1920S1-CS2103T-F12-2/main/pull/116[#116], https://github.com/AY1920S1-CS2103T-F12-2/main/pull/185[#185], https://github.com/AY1920S1-CS2103T-F12-2/main/pull/190[#190])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*** Managed the look and feel of the GitHub website, example: https://github.com/AY1920S1-CS2103T-F12-2/main/pull/57[#57]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*** Provisioned site short-urls and project email address."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*** Vetted and assigned incoming Issues to team members."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*** Worked on documentation for the project, example: https://github.com/AY1920S1-CS2103T-F12-2/main/pull/191[#191]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*** 17 PRs reviewed, example with non-trivial review comments: https://github.com/AY1920S1-CS2103T-F12-2/main/pull/27[#27]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*** Reported bugs and suggestions for other projects using AddressBook3 as a base (examples: 25 issues opened in https://github.com/AY1920S1-CS2103T-T13-2/main/issues?utf8\u003d%E2%9C%93\u0026q\u003dis%3Aissue+author%3Anus-pe-bot+[Mortago], code review of https://github.com/AY1920S1-CS2103T-F12-1/main/tree/master[Horo])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d *Appointment System*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "VISIT also enables doctors to keep abreast and up-to-date on any events or deadlines as VISIT can be customized to remind them of any follow-up visits or other timed reminders."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "There are two kinds of Appointments: Follow-Ups and Reminders."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "You can only have one active Appointment of the same title, adding the same Appointment with a different day count will simply update the existing Appointment."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Follow-ups in this version do not update if you change the name of the patient after the follow-up is created."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a follow-up visit with patient : `followup`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Adds a follow-up visit for a particular patient. You can add one even if you have never had a visit with the patient in the past. The application will keep track of when your next appointment with the patient is on the Appointments window. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Format: `followup INDEX [d/DAYS]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The follow-up entry will by default generate the follow-up for 7 days\u0027 time if not specified."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `followup 9 d/10` +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Creates a follow-up entry on patient with index 9 for 10 days later."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `followup 1` +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Creates a follow-up entry on patient with index 1 for 7 days later."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::UGApptFollowUps.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a generic reminder : `reminder`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Creates a new reminder to show up in the Appointments window. +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Format: `reminder TEXT [d/DAYS]`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The reminder entry will by default generate the prompt for 7 days\u0027 time if not specified."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `reminder Two Point Hospital closed d/10` +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Creates a reminder \"Two Point Hospital closed\" that will display for the next 10 days."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `reminder Losartan recall` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Creates a reminder \"Losartan recall\" that will display for the next 7 days."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::UGApptReminders.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d Removing an Appointment : `removeappt`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Remove an appointment from VISIT. This can be either a Follow-up or Reminder. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Format: `removeappt DESCRIPTION [d/DAYS]`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Any appointment matching just the description will be removed if the specific days is not specified."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `removeappt Two Point Hospital closed` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Removes any appointment which description is \"Two Point Hospital closed\"."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `removeappt Satya Nadella` +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Removes any appointments with the patient whose name is Satya Nadella."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::UGApptRemoveAppt.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d Show Appointments \"Message of the Day\" box : `show`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Shows a pop-up containing the appointments. This is useful if you want to keep a small window just containing the appointments on the screen, separate from the main window. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Format: `show`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::UGApptShow.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d Sort Appointments : `sort`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Sorts the appointments in order of type, days remaining, and finally by name. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d Appointments feature"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The Appointments feature comprises of Reminders and Follow-Ups. Users can create a generic Reminder to be notified of an ongoing \"something to take note of\", such as a hospital being closed. Follow-ups are used to plan future visits to patients. Both Reminders and Follow-ups are represented by the `Appointment` class, but are facilitated by the `AppointmentList` class for UI updates and `AppointmentTable` class for JSON updating."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ".Appointment Class Diagram"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::DGApptAppointmentClassDiagram.png[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ".AppointmentList Class Diagram"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::DGApptAppointmentListClassDiagram.png[]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ".AppointmentTable Class Diagram"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::DGApptAppointmentTableClassDiagram.png[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The `AppointmentList` and `AppointmentTable` are similar and run the same operations in parallel. This is a constraint due to how data is stored into JSON by the underlying program, and is on the timeline to be converged in v2.0. Due to their similarities, we will only look at `AppointmentTable` for the sake of this documentation."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#getDefaultAppointments()` -- Returns a default, empty `AppointmentTable`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#getAppointmentList()` -- Returns an `ObservableList` version of the Appointments for UI usage. This is necessary as `AppointmentTable` is loaded on launch and `AppointmentList` uses this data to propagate the UI."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#addAppointment(type, description, days)` -- Adds a new Appointment."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#deleteAppointment(description, days)` -- Deletes an appointment from VISIT."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#antiDuplicate(check, description, days)` -- Checks if the Appointment already exists. Returns true if there is no duplicate, false if there is a duplicate."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#sortAppointments()` -- Sorts the list of appointments by days remaining, then name."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#cascadeDay(days)` -- Decrements the days an Appointment has left. Run on application launch by `UserPrefs` after calculating days elapsed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* `AppointmentTable#outputAppointments()` -- Outputs the Appointments to readable String."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "These operations are exposed in the `Model` interface."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The following sequence diagram shows how adding an appointment works, using reminders as an example:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ".Adding an Appointment Sequence Diagram"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::DGApptAddAppointmentSequenceDiagram.png[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The following activity diagram shows how adding an appointment works, using follow-ups as an example:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ".Adding an Appointment Activity Diagram"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image::DGApptFollowUpActivityDiagram.png[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d PROJECT: https://github.com/ReignOfComputer/Stegotreon[Stegotreon]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "---"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image:https://github.com/ReignOfComputer/Stegotreon/raw/master/Screenshot.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Stegotreon takes a PNG file and a line-separated text file, then automatically generates files with text hidden inside through steganograpy."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Artists on Patreon (and elsewhere) have an issue where their art is leaked outside the paywall. Some have resorted to sending image files directly to patrons, though leaks still happen. Stegotreon creates unique variants of the image file that can be reversed to identify the leaker, even if the file name is changed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Stegotreon has the ability to send emails on your behalf using SMTP."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d PROJECT: https://github.com/ReignOfComputer/KerfuffleCipher[KerfuffleCipher]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "---"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image:https://github.com/ReignOfComputer/KerfuffleCipher/raw/master/Screenshot.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The Kerfuffle Cipher relays messages and data through matrices, represented as arrays in programming languages. Each character in a message will be represented by a 3x1 matrix."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d PROJECT: https://github.com/ReignOfComputer/JavaPather[JavaPather]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "---"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image:https://github.com/ReignOfComputer/JavaPather/raw/master/Screenshot.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Adding Java to Windows PATH is too many steps, this automatically tries to detect your Java installation and lets you choose to add it to your User Environment Variables (Machine with Administrator elevation). This allows you to use javac and java commands from CLI, such as Command Prompt and Windows PowerShell. Among other things."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d PROJECT: https://github.com/ReignOfComputer/JavaTestCenter[JavaTestCenter]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "---"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image:https://github.com/ReignOfComputer/JavaTestCenter/raw/master/Screenshot.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Quick program for testing simple .java programs. Expects Java to be in System PATH, use JavaPather if not. Takes in a .java file, compiles (-cp) and runs it, optionally takes in input and output and compares."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d PROJECT: https://github.com/ReignOfComputer/SG-Radio-for-Windows-8.1[SG Radio for Windows]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "---"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "image:https://raw.githubusercontent.com/ReignOfComputer/SG-Radio-for-Windows-8.1/master/SGRadioSS.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Back in 2012, I was actively developing Windows Phone and Windows 8\u0027s Metro/Modern/Universal apps - which eventually led to a stint at Microsoft. SG Radio was one such app, and was developed and released as a launch app for Windows 8. SG Radio then went through a drastic upgrade in 2013 (for the release of Windows 8.1), and used as a showcase app in many of Microsoft\u0027s demos for both consumers and developers."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "SG Radio aggregates various Singapore Radio stations, including Internet radio stations. It\u0027s able to get the title of the track that\u0027s currently playing and in the past, used Mediacorp\u0027s now defunct API to retrieve lyrics as well."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "There are various other features built in, such as a standby mode that shows the current time and song, and a timer to shutdown playback after some time. Users are able to mark stations as a favorite, and can even bookmark a song that\u0027s currently playing."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003d\u003d PROJECT: RoC Apps"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "---"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Under RoC Apps, I have also made several applications for companies like Microsoft and Government of Singapore."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "You can reach me at roc [at] reignofcomputer.com for more information."
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 231
    }
  },
  {
    "path": "docs/team/sqwq.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d Zheng Shi Qiao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":warning-caption: :exclamation:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F12-2/main"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d\u003d PROJECT: VISIT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "---"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "VISIT is a Java desktop patient-tracking application for doctors on-the-go. The user interacts with it using a CLI(Command-Line-Interface), and it has a GUI(Graphical User Interface) created with JavaFX. It is written by the 5 man team UnrealUnity(which I am a part of), and has about 16 kLoC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ".VISIT Main Window"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "I was in charge of implementing the *Visitation Report* system which consists of the *addvisit*, *editvisit* and *deletevisit* commands. The rest of this document serves to provide a comprehensive overview of my involvement in this project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "This section provides a brief synopsis of my contributions."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* *Major enhancement*: Implemented *the Visit Report system*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** What it does: Allows doctors to create, edit and delete patient reports."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Justification: The feature is essential as it enables doctors to record down vital information(such as the prescription and diagnosis) for each consultation with the patient and thus, grant doctors the ability to track the well-being of their patients."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Highlights: This enhancement required a holistic understanding of the code base since the implementation necessitates changes in every component of the Model-View-Controller framework. Making sure that the different components of storage, logic and UI interacts with one another correctly is a great technical challenge."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* *Minor enhancement*: implemented pop-up form for doctors to fill in consultation details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* *Minor enhancement*: implemented list pop-up for doctors to view the list of visit reports for a particular patient. The list automatically sorts itself by date, with the most recent report on the top of the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* *Minor enhancement*: implemented a prompt window to notify the doctor when the chosen patient has no records"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dSQwQ\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dSQwQ\u0026tabRepo\u003dAY1920S1-CS2103T-F12-2%2Fmain%5Bmaster%5D[RepoSense]]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Tests:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "*** Wrote tests for Visit Report system (Example https://github.com/AY1920S1-CS2103T-F12-2/main/pull/27[#27])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "*** Vetted and assigned issues to team members. (Example https://github.com/AY1920S1-CS2103T-F12-2/main/issues/155[#155] https://github.com/AY1920S1-CS2103T-F12-2/main/issues/157[#157])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "*** Contributed to both https://github.com/AY1920S1-CS2103T-F12-2/main/pull/75[dev guide] and https://github.com/AY1920S1-CS2103T-F12-2/main/pull/95[user guide]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "*** 9 PRs reviewed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "*** Reported bugs for https://github.com/SQwQ/ped/issues?q\u003dis%3Aopen+is%3Aissue[DukeCooks], another AddressBook3-based application."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "include::../UserGuide.adoc[tag\u003dvisitreports]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dvisitationreport]"
      }
    ],
    "authorContributionMap": {
      "SQwQ": 69
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ":imagesDir: ../images/add-visitList"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `visitList`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "The command should have the format of `visitList INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "An example of the command is `visitList 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d\u003d Create a new `visitList` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Changes the visitList of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"visitList\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new CommandResult(\"Hello from visitList\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `visitList` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the visitList of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \"Existing visitList will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final String visitList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @param index of the person in the filtered person list to edit the visitList"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @param visitList of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public RemarkCommand(Index index, String visitList) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        requireAllNonNull(index, visitList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.visitList \u003d visitList;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), visitList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 visitList.equals(e.visitList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and visitList from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "This appears to be what we need to get a String of the visitList."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    String visitList \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    return new RemarkCommand(index, visitList);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a visitList given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003d\u003d Add a placeholder element for visitList to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "private Label visitList;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003cLabel fx:id\u003d\"visitList\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$visitList\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ".$visitList shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    visitList.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ".The visitList label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added visitList to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed visitList from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                personToEdit.getAddress(), visitList, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Generates a command execution success message based on whether the visitList is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        String message \u003d !visitList.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a visitList works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 386,
      "SQwQ": 36
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The `address` field in `Person` is actually an instance of the `Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 116
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "`CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/„Ç¢„É™„Çπ „É¶„Éº`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 257
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *    Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 24,
      "-": 159
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 800;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 70,
      "gachia": 2
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final String LOG_FILE \u003d \"visit.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String MESSAGE_INVALID_ARGUMENTS \u003d \"Invalid arguments after command.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_INVALID_REPORT_INDEX \u003d \"The report index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"You did not enter anything!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String MESSAGE_INVALID_DAYS \u003d \"Invalid number of days specified! \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"Please keep input between 0 and 2,147,483,647.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 5,
      "-": 12,
      "SQwQ": 1
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/util/ProfileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Helper functions for handling Person data for displaying in ProfileWindow."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class ProfileUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns the String representation of the Person\u0027s Name attribute."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param name a Name instance of a Person. Cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a String representing the Person\u0027s Name attribute"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static String stringifyName(Name name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return name.fullName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns the String representation of the tags associated with a Person from their \u0026lt;SetTag\u0026gt; attribute."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param tagSet Set of Tag objects attributed to the Person instance called in setup. Cannot be null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a String representing all Tags in the Person\u0027s Tag attribute"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static String stringifyTags(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        requireNonNull(tagSet);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (tagSet.size() \u003e 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            for (Tag tag : tagSet) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                sb.append(tag.tagName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                sb.append(\"; \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns the String representation of the Phone instance associated with a Person."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param phone Phone attribute of the Person in called in setup. Cannot be null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a String representing the Person\u0027s Phone attribute"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static String stringifyPhone(Phone phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return phone.value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns the String representation of the Email instance associated with a Person."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param email Email attribute of the Person in called in setup. Cannot be null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a String representing the Person\u0027s Email attribute"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static String stringifyEmail(Email email) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return email.value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns the String representation of the Address instance associated with a Person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param address Phone attribute of the Person in called in setup. Cannot be null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a String representing the Person\u0027s Phone attribute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static String stringifyAddress(Address address) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return address.value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns the String representation of the VisitList instance associated with a Person."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Visits are separated with a line of \u0027\u003d\u0027, each block detailing the full \u0027Diagnosis\u0027,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * \u0027Medication\u0027 and \u0027Remarks\u0027 fields from the VisitReport instance. Returns \"-\" if null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param visitList VisitList attribute of a Person containing VisitReports"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a String representing the entire VisitList"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static String stringifyVisit(VisitList visitList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (visitList \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String line \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        ArrayList\u003cVisitReport\u003e visits \u003d visitList.getRecords();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (visits.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        for (VisitReport visit : visits) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            output.append(stringifyVisitReport(visit));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            output.append(line);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            output.append(\"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns the String representation of a VisitReport, detailing the full \u0027Diagnosis\u0027,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * \u0027Medication\u0027 and \u0027Remarks\u0027 fields from the VisitReport instance."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param report the VisitReport instance to be represented. Cannot be null"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return a String representing the VisitReport"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static String stringifyVisitReport(VisitReport report) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        requireNonNull(report);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String date \u003d report.date;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String diagnosis \u003d report.getDiagnosis();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String medication \u003d report.getMedication();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String remarks \u003d report.getRemarks();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // [Report on the XX/XX/2XXX]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"[ Report on the \" + date + \"]\\n\\n\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // *Diagnosis*: DIAGNOSIS"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"*Diagnosis*:\\n\" + diagnosis + \"\\n\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // *Medication prescribed*: MEDICATION"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"*Medication prescribed*:\\n\" + medication + \"\\n\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // *Remarks*: REMARKS"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"*Remarks*:\\n\" + remarks + \"\\n\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 135,
      "ReignOfComputer": 8
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *   Ignores case, but a full word match is NOT required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @return boolean for if the sentence contains the word query"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static boolean containsPartialWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String preppedWord \u003d word.trim(); // Eliminate leading and trailing spaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        preppedWord \u003d preppedWord.toLowerCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return preppedSentence.contains(preppedWord);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 24,
      "ReignOfComputer": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    CommandResult execute(Command command) throws CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @see Model#getAddressBook()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of appointments."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Retrieves the available Reminders."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    String outputReminders();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 19,
      "-": 42,
      "SQwQ": 2,
      "gachia": 2
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String aliasedCommandText \u003d model.applyAlias(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(aliasedCommandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public CommandResult execute(Command cmd) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + cmd.toString() + \"]\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Command command \u003d cmd;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String outputReminders() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return model.outputAppointments();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 19,
      "Wingedevil": 3,
      "-": 76,
      "SQwQ": 5,
      "gachia": 4
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 9,
      "-": 58
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/AddVisitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_VISIT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Changes the visitList of an elxisting person in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class AddVisitCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addvisit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add the visitation record of the person identified \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \"Calls window popup for user to fill in details.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + PREFIX_VISIT + \"[DATE i.e. DD/MM/YYYY]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \"Only dates from year 19xx to 2xxx are accepted\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + PREFIX_VISIT + \"01/01/2019\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_ADD_VISIT_PROMPT \u003d \"Please fill in the form\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @param index of the person in the filtered person list to edit the visitList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @param date of the VisitReport"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public AddVisitCommand(Index index, String date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CollectionUtil.requireAllNonNull(index, date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_VISIT_PROMPT, personToEdit), index.getOneBased(), date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (!(other instanceof AddVisitCommand)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        AddVisitCommand e \u003d (AddVisitCommand) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 date.equals(e.date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 11,
      "SQwQ": 66,
      "gachia": 1
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/AliasCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_ALIAS_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_ALIAS_VALUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " * Defines an alias."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class AliasCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"alias\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Alias added: %1$s -\u003e %2$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static final String MESSAGE_ALIAS_FAILED \u003d \"Alias cannot include a defined command.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": defines an alias. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            + PREFIX_ALIAS_NAME + \"ALIAS_NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            + PREFIX_ALIAS_VALUE + \"ALIAS_VALUE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            + PREFIX_ALIAS_NAME + \"h \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            + PREFIX_ALIAS_VALUE + \"help\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private final String alias;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private final String aliasTo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Creates an AliasCommand to define an alias."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public AliasCommand(String alias, String aliasTo) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        requireNonNull(aliasTo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.alias \u003d alias.trim().toLowerCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.aliasTo \u003d aliasTo.trim().toLowerCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            Command a \u003d new AddressBookParser().parseCommand(alias);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            if (e.getMessage().equals(MESSAGE_UNKNOWN_COMMAND)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                // happy path"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                model.addAlias(alias, aliasTo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, alias, aliasTo));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        throw new CommandException(MESSAGE_ALIAS_FAILED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 8,
      "Wingedevil": 49
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/AliasListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class AliasListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"aliaslist\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows list of existing user-defined aliases.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String aliases \u003d model.getAliases(false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return new CommandResult(aliases, false, false, false, false, false, false, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "Wingedevil": 18
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        model.resetAppointments();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private int reportIdx;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private ObservableList\u003cVisitReport\u003e reports;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private VisitReport oldReport;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Person profilePerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final boolean isShowHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /** The application should AddVisit. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final boolean isAddVisit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /** The application should ShowVisitList. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final boolean isShowVisitList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /** The application should EditVisit. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final boolean isEditVisit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /** The application should show the Profile */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final boolean isProfile;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /** The application should Exit. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /** Display reminders and follow-up motd */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final boolean isShowMotd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /** Display list of existing user-defined aliases*/"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final boolean isShowAliasList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isShowHelp, boolean isAddVisit, boolean isShowVisitList,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                         boolean isEditVisit, boolean isProfile, boolean exit,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                         boolean isShowMotd, boolean isShowAliasList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.isShowHelp \u003d isShowHelp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.isAddVisit \u003d isAddVisit;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.isShowVisitList \u003d isShowVisitList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.isEditVisit \u003d isEditVisit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.isProfile \u003d isProfile;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.isShowMotd \u003d isShowMotd;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.isShowAliasList \u003d isShowAliasList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isShowHelp, boolean isAddVisit, boolean isShowVisitList,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                         boolean isEditVisit, boolean isProfile, boolean exit, boolean isShowMotd) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this(feedbackToUser, isShowHelp, isAddVisit, isShowVisitList, isEditVisit,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                isProfile, exit, isShowMotd, false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public CommandResult(String feedbackToUser, int idx) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false, false, false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.index \u003d idx;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public CommandResult(String feedbackToUser, Person profilePerson, ObservableList\u003cVisitReport\u003e profileReportList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this(feedbackToUser, false, false, false, false, true, false, false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.profilePerson \u003d profilePerson;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.reports \u003d profileReportList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public CommandResult(String feedbackToUser, int idx, String date) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this(feedbackToUser, false, true, false, false,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.index \u003d idx;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public CommandResult(String feedbackToUser, ObservableList\u003cVisitReport\u003e lst) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this(feedbackToUser, false, false, true, false,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.reports \u003d lst;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public CommandResult(String feedbackToUser, ObservableList\u003cVisitReport\u003e lst,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                         int idx, int reportIdx, VisitReport report) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this(feedbackToUser, false, false, false, true,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.reports \u003d lst;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.index \u003d idx;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.reportIdx \u003d reportIdx;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.oldReport \u003d report;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false, false, false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public int getIdx() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public int getReportIdx() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return reportIdx;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public ObservableList\u003cVisitReport\u003e getObservableVisitList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this.reports;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitReport getOldReport() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this.oldReport;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return isShowHelp;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public boolean isShowMotd() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return isShowMotd;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public boolean isAddVisit() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return isAddVisit;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public boolean isShowVisitList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return isShowVisitList;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public boolean isEditVisit() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return isEditVisit;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public boolean isShowProfile() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return isProfile;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public boolean isShowAliasList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return isShowAliasList;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Person getProfilePerson() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return profilePerson;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 isShowHelp \u003d\u003d otherCommandResult.isShowHelp"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 isAddVisit \u003d\u003d otherCommandResult.isAddVisit"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 isEditVisit \u003d\u003d otherCommandResult.isEditVisit"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 isShowVisitList \u003d\u003d otherCommandResult.isShowVisitList"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 isProfile \u003d\u003d otherCommandResult.isProfile"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 isShowMotd \u003d\u003d otherCommandResult.isShowMotd"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 isShowAliasList \u003d\u003d otherCommandResult.isShowAliasList;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return Objects.hash(feedbackToUser, isShowHelp, isAddVisit, isProfile, exit);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 19,
      "ReignOfComputer": 8,
      "Wingedevil": 10,
      "-": 58,
      "SQwQ": 116
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/DeleteAppointmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Deletes a specified Appointment from VISIT."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class DeleteAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Word to call the Delete Appointment Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removeappt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Help message on usage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \": Deletes an appointment from VISIT. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"[\" + PREFIX_DAYS + \"EXPIRY IN DAYS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"Two Point Hospital closed \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + PREFIX_DAYS + \"7\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Success message when executed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Appointment deleted.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * The description of the appointment to delete."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * This can be the name of the patient or the description of the reminder."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Optional number of days to specifically target the exact appointment to delete."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private final int days;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Creates a DeleteAppointmentCommand to delete the specified {@code Appointment}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the appointment to delete."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days Optional number of days to specifically target the exact appointment to delete."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public DeleteAppointmentCommand(String description, int days) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        model.deleteAppointment(description, days);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        model.updateFilteredAppointmentList(Model.PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, description, days));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                || (other instanceof DeleteAppointmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 description.equals(((DeleteAppointmentCommand) other).description)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 days \u003d\u003d ((DeleteAppointmentCommand) other).days);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 74
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 47
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/DeleteVisitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_DELETE_VISIT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Deletes record of patient by index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class DeleteVisitCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletevisit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \": Deletes the visitation record of the person identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \"by the index number used in the last person listing.\\n \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + COMMAND_WORD + \"[PERSON INDEX]\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + PREFIX_DELETE_VISIT + \"[REPORT INDEX]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + PREFIX_DELETE_VISIT + \"2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_DELETE_VISIT_SUCCESS \u003d \"Removed visit from Person: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_MISSING_INDEX_PROMPT \u003d \"Please specify index of report to be deleted\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \"Usage: \" + COMMAND_WORD + \" [PERSON INDEX] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + PREFIX_DELETE_VISIT + \"[REPORT INDEX]\";;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @param index of the person in the filtered person list to edit the visitList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @param id of the report to be deleted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public DeleteVisitCommand(Index index, int id) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CollectionUtil.requireAllNonNull(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Person editedPerson \u003d personToEdit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (id !\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        personToEdit.getAddress(), personToEdit.getVisitList().deleteRecord(id),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        personToEdit.getTags());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_REPORT_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            ObservableList\u003cVisitReport\u003e result \u003d editedPerson.getVisitList().getObservableRecords();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            if (result.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                return new CommandResult(\"\", result);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                return new CommandResult(MESSAGE_MISSING_INDEX_PROMPT, result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_VISIT_SUCCESS,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                personToEdit), editedPerson.getVisitList().getObservableRecords());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (!(other instanceof DeleteVisitCommand)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        DeleteVisitCommand e \u003d (DeleteVisitCommand) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 id \u003d\u003d e.id;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 11,
      "SQwQ": 91
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitList updatedVisitList \u003d personToEdit.getVisitList(); // edit command does not allow editing remarks"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedVisitList, updatedTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 19,
      "-": 206,
      "SQwQ": 2
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/EditVisitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_EDIT_VISIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Edits record of patient by index."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class EditVisitCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editvisit\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \": Edits the visitation record of the person identified \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \"by the index number used in the last person listing.\\n \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + COMMAND_WORD + \" [PERSON INDEX] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + PREFIX_EDIT_VISIT + \"[REPORT INDEX]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + PREFIX_EDIT_VISIT + \"2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_EDIT_VISIT_PROMPT \u003d \"Please edit the form\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_MISSING_INDEX_PROMPT \u003d \"Please specify index of report to be edited\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + \"Usage: \" + COMMAND_WORD + \" [PERSON INDEX] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            + PREFIX_EDIT_VISIT + \"[REPORT INDEX]\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @param index of the person in the filtered person list to edit the visitList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @param id of the report to be deleted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public EditVisitCommand(Index index, int id) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Person editedPerson \u003d personToEdit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (id !\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_EDIT_VISIT_PROMPT, personToEdit),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        editedPerson.getVisitList().getObservableRecords(), index.getOneBased(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        id, editedPerson.getVisitList().getRecordByIndex(id));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_REPORT_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return new CommandResult(MESSAGE_MISSING_INDEX_PROMPT, editedPerson.getVisitList().getObservableRecords());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (!(other instanceof EditVisitCommand)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        EditVisitCommand e \u003d (EditVisitCommand) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 id \u003d\u003d e.id;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 8,
      "SQwQ": 81
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, false, false, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "-": 16,
      "SQwQ": 1
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/FollowUpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Adds a follow-up appointment to VISIT."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class FollowUpCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Word to call the Follow-Up Command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"followup\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Help message on usage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \": Creates a new follow-up against a patient for the user to keep track \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"[\" + PREFIX_DAYS + \"EXPIRY IN DAYS]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + PREFIX_DAYS + \"7\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Success message when executed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String MESSAGE_ADD_FOLLOWUP_SUCCESS \u003d \"Added follow-up to Person: %s - %d day(s)\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * The index of the patient in the AddressBook."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Optional number of days for when the follow-up occurs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private final int days;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Creates a FollowUpCommand to add the specified {@code Appointment}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param index of the person in the filtered person list to target."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days Number of days for when the follow-up occurs."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public FollowUpCommand(Index index, int days) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person person \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        model.addAppointment(1, person.getName().toString(), days);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_FOLLOWUP_SUCCESS, person.getName().toString(), days));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (!(other instanceof FollowUpCommand)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        FollowUpCommand e \u003d (FollowUpCommand) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 days \u003d\u003d e.days;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 95
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/GenerateProfileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.ui.HelpWindow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Saves new record to Visit List."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class GenerateProfileCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static final String MESSAGE_GENERATE_PROFILE_SUCCESS \u003d \"Profile successfully generated!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final String line \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final String header \u003d line + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patient Profile \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\" + line + \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private String tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private String visits;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public GenerateProfileCommand(String name, String tags, String phone, String email,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                  String address, String visits) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.visits \u003d visits;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Get date for profile generation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH-mm-ss\"); // Windows Unix naming safe"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String now \u003d LocalDateTime.now().format(formatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // File name formation : NAME_PHONE_dd-MM-yyyy HH-mm-ss.txt"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // E.g. Alex Yeoh_87438807_31-10-2019 11-41-02.txt"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String filename \u003d this.name + \"_\" + this.phone + \"_\" + now + \".txt\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Get the path for file to be created"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Path path \u003d Paths.get(\"generated_profiles\", filename);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Create parent directory and file using FileUtil"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            FileUtil.createIfMissing(path);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new CommandException(\"Error creating new file - Check permissions to folder: \" + e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Form profile .txt content"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(header);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"Name:\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(this.name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"Tags:\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(this.tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"Phone:\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(this.phone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"Email:\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(this.email);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"Address:\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(this.address);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"Visits:\\n\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(this.visits);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"[Profile generated at \" + now + \".]\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            FileUtil.writeToFile(path, output.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            logger.info(\"User .pdf profile successfully exported to \" + path);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new CommandException(\"Error writing to filepath: \" + e.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_GENERATE_PROFILE_SUCCESS));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (!(other instanceof GenerateProfileCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        GenerateProfileCommand e \u003d (GenerateProfileCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return name.equals(e.name)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u0026\u0026 tags.equals(e.tags)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u0026\u0026 phone.equals(e.phone)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u0026\u0026 email.equals(e.email)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u0026\u0026 address.equals(e.address)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u0026\u0026 visits.equals(e.visits);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 123,
      "ReignOfComputer": 6
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "-": 18,
      "SQwQ": 1
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/ProfileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Changes the visitList of an existing person in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class ProfileCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"profile\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens the detailed profile of the patient identified \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            + \"by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static final String MESSAGE_VIEW_PROFILE_SUCCESS \u003d \"Generated profile view of : %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param index of the person in the last listing whose profile is to be viewed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public ProfileCommand(Index index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Get person list based on existing filter"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Extract the person from list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Person personProfileToShow \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        ObservableList\u003cVisitReport\u003e personReportList \u003d personProfileToShow.getVisitList().getObservableRecords();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_VIEW_PROFILE_SUCCESS, personProfileToShow),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                personProfileToShow, personReportList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (!(other instanceof ProfileCommand)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        ProfileCommand e \u003d (ProfileCommand) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 66,
      "ReignOfComputer": 8
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Adds a reminder appointment to VISIT."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Word to call the Follow-Up Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Help message on usage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \": Creates a new reminder for the user to keep track. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"[\" + PREFIX_DAYS + \"EXPIRY IN DAYS]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"Two Point Hospital closed \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + PREFIX_DAYS + \"7\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Success message when executed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New reminder added: %s - %d day(s)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * The description of the reminder to store."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Optional number of days for how long the reminder lasts."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private final int days;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Creates a ReminderCommand to add the specified {@code Appointment}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the reminder to store."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days Number of days for when the follow-up occurs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public ReminderCommand(String description, int days) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        model.addAppointment(0, description, days);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, description, days));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                || (other instanceof ReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 description.equals(((ReminderCommand) other).description)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 days \u003d\u003d ((ReminderCommand) other).days);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 73
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/SaveVisitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Saves new record to Visit List."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class SaveVisitCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_SAVE_VISIT_SUCCESS \u003d \"Saved visit report to Person: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final int NEW_REPORT \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final VisitReport visitReport;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private int reportIdx;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String medication;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String diagnosis;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String remarks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public SaveVisitCommand(int index, int reportIdx, String date, String meds, String dg, String rmk) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CollectionUtil.requireAllNonNull(index, reportIdx, date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.index \u003d Index.fromOneBased(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.reportIdx \u003d reportIdx;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.visitReport \u003d new VisitReport(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.medication \u003d meds;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.diagnosis \u003d dg;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.remarks \u003d rmk;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitReport.setName(personToEdit.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitReport.setDetails(medication, diagnosis, remarks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Person editedPerson \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (reportIdx \u003d\u003d NEW_REPORT) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    personToEdit.getAddress(), personToEdit.getVisitList().addRecord(visitReport),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    personToEdit.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    personToEdit.getAddress(), personToEdit.getVisitList().editRecord(reportIdx, visitReport),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    personToEdit.getTags());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assert(!editedPerson.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SAVE_VISIT_SUCCESS, personToEdit));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (!(other instanceof SaveVisitCommand)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        SaveVisitCommand e \u003d (SaveVisitCommand) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 medication.equals(e.medication)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 diagnosis.equals(e.diagnosis)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 remarks.equals(e.remarks)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 visitReport.date.equals(e.visitReport.date);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 11,
      "SQwQ": 81
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/ShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Displays appointments in a pop-up window."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Word to call the Follow-Up Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Help message on usage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays reminders and follow-ups for the day\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Success message when executed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String SHOWING_MOTD_MESSAGE \u003d \"Opened message of the day.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new CommandResult(SHOWING_MOTD_MESSAGE, false, false, false, false, false, false, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 28,
      "SQwQ": 1
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/SortAppointmentsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Sorts the appointments in VISIT."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class SortAppointmentsCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Word to call the Follow-Up Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Help message on usage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \": Sorts the appointments. \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Success message when executed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Appointments sorted.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Creates a SortAppointmentsCommand to sort the Appointments"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public SortAppointmentsCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        model.sortAppointments();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        model.updateFilteredAppointmentList(Model.PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                || (other instanceof SortAppointmentsCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 48
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/UnaliasCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " * Removes an alias."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class UnaliasCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unalias\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Alias removed: %1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static final String MESSAGE_ALIAS_FAILED \u003d \"No existing alias named: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": removes an alias. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            + \"ALIAS_NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            + \"h\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private final String alias;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Creates an UnaliasCommand to remove an alias."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public UnaliasCommand(String alias) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.alias \u003d alias.trim().toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        if (model.removeAlias(alias)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, alias));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ALIAS_FAILED, alias));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "Wingedevil": 39
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // add command does not allow adding remarks straight away"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitList visitList \u003d new VisitList(new ArrayList\u003cVisitReport\u003e());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, visitList, tagList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 18,
      "-": 43,
      "SQwQ": 4
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/AddVisitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_VISIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AddVisitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Parses input arguments and creates a new {@code RemarkCommand} object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class AddVisitCommandParser implements Parser\u003cAddVisitCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public AddVisitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_VISIT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            // Take date from \u0027/v\u0027 prefix or use current timing for report date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            date \u003d ParserUtil.parseVisitReport(argMultimap.getValue(PREFIX_VISIT)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    .orElse(LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    AddVisitCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return new AddVisitCommand(index, date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 6,
      "ReignOfComputer": 9,
      "SQwQ": 27
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AddVisitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AliasCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AliasListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.DeleteVisitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.EditVisitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.FollowUpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ProfileCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.SortAppointmentsCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.UnaliasCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        case AliasCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            return new AliasCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        case UnaliasCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            return new UnaliasCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (!arguments.trim().isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (!arguments.trim().isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        case AddVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return new AddVisitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        case DeleteVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return new DeleteVisitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        case EditVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return new EditVisitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        case ProfileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return new ProfileCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        case FollowUpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return new FollowUpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        case ReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return new ReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        case DeleteAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return new DeleteAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        case SortAppointmentsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (!arguments.trim().isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return new SortAppointmentsCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (!arguments.trim().isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (!arguments.trim().isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (!arguments.trim().isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return new ShowCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        case AliasListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (!arguments.trim().isEmpty()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            return new AliasListCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 3,
      "ReignOfComputer": 62,
      "Wingedevil": 9,
      "-": 59,
      "SQwQ": 11
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/AliasCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_ALIAS_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_ALIAS_VALUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AliasCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " * Parses input arguments and creates a new AliasCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class AliasCommandParser implements Parser\u003cAliasCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AliasCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * and returns an AliasCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public AliasCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ALIAS_NAME, PREFIX_ALIAS_VALUE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ALIAS_NAME, PREFIX_ALIAS_VALUE)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String name \u003d argMultimap.getValue(PREFIX_ALIAS_NAME).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String value \u003d argMultimap.getValue(PREFIX_ALIAS_VALUE).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return new AliasCommand(name, value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "Wingedevil": 38
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static final Prefix PREFIX_ALIAS_NAME \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static final Prefix PREFIX_ALIAS_VALUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final Prefix PREFIX_VISIT \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final Prefix PREFIX_DELETE_VISIT \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final Prefix PREFIX_EDIT_VISIT \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static final Prefix PREFIX_DAYS \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "Wingedevil": 2,
      "-": 16,
      "SQwQ": 4
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/DeleteAppointmentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_DAYS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_DAYS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Parses input arguments and creates a new {@code DeleteAppointmentCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code DeleteAppointmentCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * and returns a {@code DeleteAppointmentCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public DeleteAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DAYS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        int days;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            description \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (description.trim().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new IllegalValueException(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            days \u003d Integer.parseInt(argMultimap.getValue(PREFIX_DAYS).orElse(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DAYS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    DeleteAppointmentCommand.MESSAGE_USAGE), ex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return new DeleteAppointmentCommand(description, days);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 45
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 22
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/DeleteVisitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_DELETE_VISIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.DeleteVisitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Parser class for DeleteVisitCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class DeleteVisitCommandParser implements Parser\u003cDeleteVisitCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code DeleteVisitCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * and returns a {@code DeleteVisitCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public DeleteVisitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DELETE_VISIT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        int reportIdx;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    DeleteVisitCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            reportIdx \u003d Integer.parseInt(argMultimap.getValue(PREFIX_DELETE_VISIT).orElse(\"-1\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            reportIdx \u003d -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new DeleteVisitCommand(index, reportIdx);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 8,
      "SQwQ": 35
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_PHONE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        CliSyntax.PREFIX_EMAIL, CliSyntax.PREFIX_ADDRESS, CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(CliSyntax.PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(CliSyntax.PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(CliSyntax.PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 21,
      "-": 58
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/EditVisitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_EDIT_VISIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.EditVisitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Parser class for DeleteVisitCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class EditVisitCommandParser implements Parser\u003cEditVisitCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code EditVisitCommandParser}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * and returns a {@code EditVisitCommandParser} object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public EditVisitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EDIT_VISIT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        int reportIdx;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    EditVisitCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            reportIdx \u003d Integer.parseInt(argMultimap.getValue(PREFIX_EDIT_VISIT).orElse(\"-1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    EditVisitCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new EditVisitCommand(index, reportIdx);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 7,
      "SQwQ": 37
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(trimmedArgs));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 1,
      "ReignOfComputer": 6,
      "-": 21
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/FollowUpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_DAYS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_DAYS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.FollowUpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Parses input arguments and creates a new {@code FollowUpCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class FollowUpCommandParser implements Parser\u003cFollowUpCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemindCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * and returns a {@code FollowUpCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public FollowUpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DAYS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        int days;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            days \u003d Integer.parseInt(argMultimap.getValue(PREFIX_DAYS).orElse(\"7\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (days \u003c 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new NumberFormatException(String.format(MESSAGE_INVALID_DAYS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FollowUpCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DAYS));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return new FollowUpCommand(index, days);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 43
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String trimmedTag \u003d tag.trim().toLowerCase();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static String parseVisitReport(String date) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (!VisitReport.isValidVisitDate(trimmedDate)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            throw new ParseException(VisitReport.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return trimmedDate;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 10,
      "-": 114,
      "SQwQ": 12,
      "gachia": 1
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/ProfileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ProfileCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Parses input arguments and creates a new {@code RemarkCommand} object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class ProfileCommandParser implements Parser\u003cProfileCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public ProfileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ProfileCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return new ProfileCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 27,
      "ReignOfComputer": 6
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/ReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_DAYS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_DAYS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Parses input arguments and creates a new {@code RemindCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class ReminderCommandParser implements Parser\u003cReminderCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemindCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * and returns a {@code RemindCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public ReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DAYS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        int days;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            description \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (description \u003d\u003d null || description.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new IllegalValueException(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            days \u003d Integer.parseInt(argMultimap.getValue(PREFIX_DAYS).orElse(\"7\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (days \u003c 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new NumberFormatException(String.format(MESSAGE_INVALID_DAYS));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DAYS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_EMPTY));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE), ex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return new ReminderCommand(description, days);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 48
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/UnaliasCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.UnaliasCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " * Parses input arguments and creates a new UnaliasCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class UnaliasCommandParser implements Parser\u003cUnaliasCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public UnaliasCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String unaliasName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        unaliasName \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        if (unaliasName.equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnaliasCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return new UnaliasCommand(unaliasName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "Wingedevil": 35
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 117
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/AliasTable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " * A class that contains alias table settings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class AliasTable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private HashMap\u003cString, String\u003e aliasTable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public AliasTable() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        aliasTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static AliasTable getDefaultAliasTable() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        AliasTable rtv \u003d new AliasTable();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        rtv.addAlias(\"h\", \"help\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                .addAlias(\"a\", \"add\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                .addAlias(\"e\", \"exit\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return rtv;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Apply a suitable alias to the input command text. A suitable alias is an alias that matches the regex"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * \"{alias}($|\\\\s).*\"."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * If multiple matches exists, this method chooses the longest matching alias."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @param commandText Command for alias to be applied to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @return Command that alias has been applied to."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public String applyAlias(String commandText) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String aliasedCommand \u003d commandText;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        int maxLength \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        // match for the longest alias"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        for (String key: aliasTable.keySet()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            Pattern pattern \u003d Pattern.compile(Pattern.quote(key) + \"($|\\\\s).*\", Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            Matcher matcher \u003d pattern.matcher(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            if (key.length() \u003e maxLength \u0026\u0026 matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                aliasedCommand \u003d matcher.replaceFirst(aliasTable.get(key));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                maxLength \u003d key.length();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return aliasedCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Adds an alias into the alias table."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @param alias Alias name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @param aliasTo Alias value"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @return This object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public AliasTable addAlias(String alias, String aliasTo) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        aliasTable.put(alias, aliasTo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Removes an alias from the alias table."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @param alias Alias name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @return Returns true if alias exists in alias table and removed successfully, returns false otherwise."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public boolean removeAlias(String alias) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return aliasTable.remove(alias) !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        if (!(o instanceof AliasTable)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        AliasTable other \u003d (AliasTable) o;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return other.aliasTable.equals(this.aliasTable);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return Objects.hash(aliasTable);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        sb.append(\"\\nAlias table :\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        sb.append(getAlias(false));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public String getAlias(boolean reusable) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        for (String key: aliasTable.keySet()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            if (reusable) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                sb.append(String.format(\"alias l/%s v/%s\\n\", key, aliasTable.get(key)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                sb.append(String.format(\"%s ‚ü∂ %s\\n\", key, aliasTable.get(key)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "Wingedevil": 104
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /** Returns an unmodifiable view of the filtered appointment list */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Adds a new Appointment."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param type The type of appointment. 0 \u003d Reminder, 1 \u003d Follow-Up."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the Appointment."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days How many days the Appointment has remaining."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    void addAppointment(int type, String description, int days) throws CommandException;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Deletes an appointment from VISIT."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the appointment to delete."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days Optional number of days to specifically target the exact appointment to delete."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    void deleteAppointment(String description, int days);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Sorts the list of appointments by days remaining, then name."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    void sortAppointments();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Outputs the Appointments to readable String."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Used in the Message of the Day output."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    String outputAppointments();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Reset Appointment Data completely."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    void resetAppointments();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Adds a given alias into the alias table."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @param alias Alias name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @param aliasTo Alias value"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    void addAlias(String alias, String aliasTo);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Removes a given alias from the alias table."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @param alias Alias name"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @return Returns true if alias exists in alias table and removed successfully, returns false otherwise."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    boolean removeAlias(String alias);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Apply a suitable alias to the input command text. A suitable alias is an alias that matches the regex"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * \"{alias}($|\\\\s).*\"."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * If multiple matches exists, this method chooses the longest matching alias."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @param commandText Command for alias to be applied to."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @return Command that alias has been applied to."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    String applyAlias(String commandText);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Gets a list of existing user-defined aliases in either a user-friendly or reusable form."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @return list of existing user-defined aliases."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    String getAliases(boolean reusable);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 42,
      "Wingedevil": 30,
      "-": 84,
      "gachia": 7
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.AppointmentList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * AppointmentList to handle Appointment UI."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private final AppointmentList appointmentList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * FilteredAppointments to populate Appointments Panel."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private final FilteredList\u003cAppointment\u003e filteredAppointments;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CollectionUtil.requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.appointmentList \u003d new AppointmentList(this.userPrefs.getAppointmentList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        filteredAppointments \u003d new FilteredList\u003c\u003e(this.appointmentList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Appointments \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void addAppointment(int type, String description, int days) throws CommandException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPrefs.addAppointment(type, description, days); // JSON"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appointmentList.addAppointment(type, description, days); // UI"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gachia"
        },
        "content": "        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void deleteAppointment(String description, int days) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPrefs.deleteAppointment(description, days); // JSON"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appointmentList.deleteAppointment(description, days); // UI"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void sortAppointments() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPrefs.sortAppointments(); // JSON"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appointmentList.sortAppointments(); // UI"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String outputAppointments() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return userPrefs.outputAppointments();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void resetAppointments() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPrefs.resetAppointments(); // JSON"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appointmentList.resetAppointments(); // UI"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * {@code AppointmentList}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return filteredAppointments;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        filteredAppointments.setPredicate(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Alias \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void addAlias(String alias, String aliasTo) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        userPrefs.addAlias(alias, aliasTo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public boolean removeAlias(String alias) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return userPrefs.removeAlias(alias);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public String applyAlias(String commandText) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return userPrefs.applyAlias(commandText);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public String getAliases(boolean reusable) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return userPrefs.getAliases(reusable);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 appointmentList.equals(other.appointmentList)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 76,
      "Wingedevil": 20,
      "-": 143,
      "gachia": 2
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.AppointmentTable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    AliasTable getAliasTable();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    AppointmentTable getAppointmentTable();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    LocalDate getLastUpdate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 9,
      "Wingedevil": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.AppointmentTable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private AliasTable aliasTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * AppointmentTable to handle Appointment JSON data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private AppointmentTable appointmentTable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private LocalDate lastUpdate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"visit.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        aliasTable \u003d AliasTable.getDefaultAliasTable();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appointmentTable \u003d AppointmentTable.getDefaultAppointments();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        lastUpdate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        setAliasTable(newUserPrefs.getAliasTable());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        lastUpdate \u003d newUserPrefs.getLastUpdate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        setAppointmentsTable(newUserPrefs.getAppointmentTable());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public AliasTable getAliasTable() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return aliasTable;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void setAliasTable(AliasTable aliasTable) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        requireNonNull(aliasTable);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.aliasTable \u003d aliasTable;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Returns the currently loaded AppointmentTable in UserPrefs."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return The currently loaded AppointmentTable in UserPrefs."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public AppointmentTable getAppointmentTable() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return appointmentTable;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Loads a new AppointmentsTable and calculates if any days need to be"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * decreased due to days passed based on lastUpdate of JSON."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setAppointmentsTable(AppointmentTable appointmentTable) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(appointmentTable);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.appointmentTable \u003d appointmentTable;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        int dateDiff \u003d Period.between(LocalDate.now(), lastUpdate).getDays();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (dateDiff \u003c 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            this.appointmentTable.cascadeDay(Math.abs(dateDiff));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        lastUpdate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appointmentTable.sortAppointments(); // Sort appointments on launch"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { // this handles null as well."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 aliasTable.equals(o.aliasTable)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 appointmentTable.equals(o.appointmentTable)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 lastUpdate.equals(o.lastUpdate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, aliasTable, appointmentTable, lastUpdate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        sb.append(\"\\nAlias table : \" + aliasTable);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        sb.append(\"\\nAppointments table : \" + appointmentTable);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        sb.append(\"\\nLast update : \" + lastUpdate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public boolean removeAlias(String alias) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return aliasTable.removeAlias(alias);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void addAlias(String alias, String aliasTo) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        aliasTable.addAlias(alias, aliasTo);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public String applyAlias(String commandText) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return aliasTable.applyAlias(commandText);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public String getAliases(boolean reusable) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return aliasTable.getAlias(reusable);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Returns an ObservableList version of the Appointments for UI usage."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * This is necessary as AppointmentTable is loaded on launch and"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * AppointmentList uses this data to propagate the UI."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return ObservableList of Appointment objects"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return appointmentTable.getAppointmentList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Adds a new Appointment."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param type The type of appointment. 0 \u003d Reminder, 1 \u003d Follow-Up."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the Appointment."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days How many days the Appointment has remaining."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void addAppointment(int type, String description, int days) throws CommandException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appointmentTable.addAppointment(type, description, days);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Deletes an appointment from VISIT."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the appointment to delete."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days Optional number of days to specifically target the exact appointment to delete."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void deleteAppointment(String description, int days) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appointmentTable.deleteAppointment(description, days);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Sorts the list of appointments by days remaining, then name."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void sortAppointments() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appointmentTable.sortAppointments();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Outputs the Appointments to readable String."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Used in the Message of the Day output."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String outputAppointments() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return appointmentTable.outputAppointments();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Reset Appointment Data completely."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void resetAppointments() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appointmentTable \u003d AppointmentTable.getDefaultAppointments();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Gets the date that the JSON was last updated."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public LocalDate getLastUpdate() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return lastUpdate;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 111,
      "Wingedevil": 32,
      "-": 81
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/appointment/Appointment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Represents an Appointment object with its description and days left."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * The description of the Appointment."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * How many days the Appointment has remaining."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private int days;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Creates a new Appointment object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the Appointment."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days How many days the Appointment has remaining."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public Appointment(String description, int days) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(days);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Gets the description of the Appointment."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return The description of the Appointment."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Gets the raw description of the Appointment, without the prefix."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return The raw description of the Appointment."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String getDescriptionRaw() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return description.substring(4);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Gets the type of the Appointment."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return [R] for Reminder, [F] for Follow-Up."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return description.substring(0, 3);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Gets the number of days remaining for the Appointment."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return The number of days remaining for the Appointment."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public int getDays() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return days;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Sets the number of days remaining for the Appointment."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setDays(int days) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Gets the number of days remaining for the Appointment in String."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return The number of days remaining for the Appointment."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String getDaysString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return Integer.toString(days);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Comparator to check for same Appointment with other Appointment."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param otherAppt other Appointment object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return True if it is the same."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public boolean isSameAppointment(Appointment otherAppt) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (otherAppt \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return otherAppt !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 otherAppt.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 otherAppt.getDaysString().equals(getDaysString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Comparator to check for same Appointment with same Key (description)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description Description to check against."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return True if it is the same."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public boolean isSameAppointment(String description) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return description !\u003d null"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 getDescriptionRaw().equals(description);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 116
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/appointment/AppointmentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * AppointmentList facilitates the storing of Reminders and Follow-ups for UI"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * and performs operations dealing with Appointments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Runs in parallel with AppointmentTable, which handles JSON."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class AppointmentList implements Iterable\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * List that contains Appointment objects to be displayed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private ObservableList\u003cAppointment\u003e internalList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Unmodifiable Observable List that watches the internalList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private ObservableList\u003cAppointment\u003e internalUnmodifiableList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Initializes new AppointmentList object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public AppointmentList(ObservableList\u003cAppointment\u003e apptList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(apptList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "        internalList \u003d apptList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "        internalUnmodifiableList \u003d FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public Iterator\u003cAppointment\u003e iterator() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    // getDefaultAppointments equivalent unnecessary."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    // getAppointmentList equivalent unnecessary."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Adds a new Appointment."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param type The type of appointment. 0 \u003d Reminder, 1 \u003d Follow-Up."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the Appointment."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days How many days the Appointment has remaining."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void addAppointment(int type, String description, int days) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "        requireNonNull(days);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            Appointment toAdd \u003d new Appointment(\"[F] \" + description, days);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            internalAddWithCheck(toAdd, description);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            Appointment toAdd \u003d new Appointment(\"[R] \" + description, days);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            internalAddWithCheck(toAdd, description);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Adds the appointment to the Internal List after checking if there are duplicates."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param toAdd The appointment to be added."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the Appointment to check against."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void internalAddWithCheck(Appointment toAdd, String description) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (antiDuplicate(toAdd)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (!antiDuplicate(description)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    if (internalList.get(i).getDescriptionRaw().equals(description)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        setAppointment(internalList.get(i), toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                internalList.add(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Deletes an appointment from VISIT."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the appointment to delete."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days Optional number of days to specifically target the exact appointment to delete."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void deleteAppointment(String description, int days) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(days);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (days \u003d\u003d -1) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            internalList.removeIf(appointment -\u003e appointment.getDescriptionRaw().equals(description));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            internalList.removeIf(appointment -\u003e appointment.getDescriptionRaw().equals(description)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    \u0026\u0026 appointment.getDays() \u003d\u003d days);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Checks if the Appointment already exists."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param toCheck The Appointment to check against."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return True if there is no duplicate, false if there is a duplicate."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public boolean antiDuplicate(Appointment toCheck) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return !internalList.stream().anyMatch(toCheck::isSameAppointment);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Checks if the Appointment already exists."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description to try and find in the list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return True if there is no duplicate, false if there is a duplicate."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public boolean antiDuplicate(String description) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return !internalList.stream().anyMatch(appointment -\u003e appointment.isSameAppointment(description));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Replaces the Appointment {@code target} in the list with {@code editedAppointment}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * The Appointment identity of {@code editedAppointment} must not be the same"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * as another existing Appointment in the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gachia"
        },
        "content": "        requireAllNonNull(target, editedAppointment);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gachia"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (!target.isSameAppointment(editedAppointment) \u0026\u0026 !antiDuplicate(editedAppointment)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DuplicateAppointmentException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gachia"
        },
        "content": "        internalList.set(index, editedAppointment);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Sorts the list of appointments by days remaining, then name."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void sortAppointments() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Comparator\u003cAppointment\u003e compareByType \u003d Comparator.comparing(Appointment::getType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Comparator\u003cAppointment\u003e compareByValue \u003d Comparator.comparing(Appointment::getDays);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Comparator\u003cAppointment\u003e compareByKey \u003d Comparator.comparing(Appointment::getDescription);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Comparator\u003cAppointment\u003e compareByTypeThenValueThenKey \u003d compareByType.thenComparing(compareByValue)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .thenComparing(compareByKey);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Collections.sort(internalList, compareByTypeThenValueThenKey);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Reset Appointment Data completely."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void resetAppointments() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    // cascadeDay equivalent unnecessary."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    // outputAppointments equivalent unnecessary."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gachia"
        },
        "content": "                || (other instanceof AppointmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u0026\u0026 internalList.equals(((AppointmentList) other).internalList));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 125,
      "gachia": 72
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/appointment/AppointmentTable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * AppointmentTable facilitates the storing of Reminders and Follow-Ups in JSON"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * and performs operations dealing with Appointments."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Runs in parallel with AppointmentList, which handles UI."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class AppointmentTable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Creates a new json structure under UserPrefs\u0027 storage for Reminders."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private HashMap\u003cString, Integer\u003e reminders;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Creates a new json structure under UserPrefs\u0027 storage for Follow-Ups."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private HashMap\u003cString, Integer\u003e followup;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Initializes new AppointmentTable object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public AppointmentTable() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        reminders \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        followup \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Returns a default, empty AppointmentTable."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static AppointmentTable getDefaultAppointments() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable def \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return def;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Returns an ObservableList version of the Appointments for UI usage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * This is necessary as AppointmentTable is loaded on launch and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * AppointmentList uses this data to propagate the UI."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return ObservableList of Appointment objects"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ObservableList\u003cAppointment\u003e appointmentList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Iterator it \u003d followup.entrySet().iterator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            HashMap.Entry pair \u003d (HashMap.Entry) it.next();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            appointmentList.add(new Appointment(\"[F] \" + pair.getKey(), (int) pair.getValue()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        it \u003d reminders.entrySet().iterator();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            HashMap.Entry pair \u003d (HashMap.Entry) it.next();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            appointmentList.add(new Appointment(\"[R] \" + pair.getKey(), (int) pair.getValue()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Adds a new Appointment."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param type The type of appointment. 0 \u003d Reminder, 1 \u003d Follow-Up."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the Appointment."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days How many days the Appointment has remaining."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public AppointmentTable addAppointment(int type, String description, int days) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(days);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (type \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (antiDuplicate(reminders, description, days)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                reminders.put(description, days);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new CommandException(\"Appointment already exists.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (antiDuplicate(followup, description, days)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                followup.put(description, days);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new CommandException(\"Appointment already exists.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Deletes an appointment from VISIT."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the appointment to delete."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days Optional number of days to specifically target the exact appointment to delete."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public AppointmentTable deleteAppointment(String description, int days) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        requireNonNull(days);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (days \u003d\u003d -1) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            reminders.remove(description);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            followup.remove(description);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            reminders.remove(description, days);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            followup.remove(description, days);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Checks if the Appointment already exists."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param check The HashMap containing the Appointment to be checked against."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param description The description of the Appointment to search for."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param days Number of days to specifically target the exact appointment."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @return True if there is no duplicate, false if there is a duplicate."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private boolean antiDuplicate(HashMap\u003cString, Integer\u003e check, String description, int days) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Iterator it \u003d check.entrySet().iterator();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            HashMap.Entry pair \u003d (HashMap.Entry) it.next();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (pair.getKey().equals(description) \u0026\u0026 (int) pair.getValue() \u003d\u003d days) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Sorts the list of appointments by days remaining, then name."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void sortAppointments() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        reminders \u003d sort(reminders);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        followup \u003d sort(followup);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Sorting algorithm for HashMap."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param hashMap The HashMap to be sorted."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private HashMap\u003cString, Integer\u003e sort(HashMap\u003cString, Integer\u003e hashMap) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        List\u003cHashMap.Entry\u003cString, Integer\u003e\u003e list \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                new LinkedList\u003c\u003e(hashMap.entrySet());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Comparator\u003cHashMap.Entry\u003cString, Integer\u003e\u003e compareByValue \u003d Comparator.comparing(HashMap.Entry::getValue);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Comparator\u003cHashMap.Entry\u003cString, Integer\u003e\u003e compareByKey \u003d Comparator.comparing(HashMap.Entry::getKey);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Comparator\u003cHashMap.Entry\u003cString, Integer\u003e\u003e compareByValueThenKey \u003d compareByValue.thenComparing(compareByKey);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Collections.sort(list, compareByValueThenKey);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        HashMap\u003cString, Integer\u003e tmp \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        for (HashMap.Entry\u003cString, Integer\u003e entry : list) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            tmp.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return tmp;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Decrements the days an Appointment has left."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Run on application launch by UserPrefs after calculating days elapsed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @days Number of days to decrement each Appointment by."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void cascadeDay(int days) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        HashMap\u003cString, Integer\u003e cascadeReminders \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        HashMap\u003cString, Integer\u003e cascadeFollowups \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Iterator it \u003d reminders.entrySet().iterator();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            HashMap.Entry pair \u003d (HashMap.Entry) it.next();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            String key \u003d pair.getKey().toString();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            int value \u003d Integer.parseInt(pair.getValue().toString()) - days;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (value \u003e\u003d 0) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                cascadeReminders.put(key, value);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            it.remove();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        reminders \u003d cascadeReminders;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        it \u003d followup.entrySet().iterator();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            HashMap.Entry pair \u003d (HashMap.Entry) it.next();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            String key \u003d pair.getKey().toString();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            int value \u003d Integer.parseInt(pair.getValue().toString()) - days;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (value \u003e\u003d 0) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                cascadeFollowups.put(key, value);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            it.remove();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        followup \u003d cascadeFollowups;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Outputs the Appointments to readable String."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Used in the Message of the Day output."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String outputAppointments() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        sb.append(\"Reminders:\\n\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (reminders.size() \u003c 1) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            sb.append(\"No reminders found.\\n\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            Iterator it \u003d reminders.entrySet().iterator();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            while (it.hasNext()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                HashMap.Entry pair \u003d (HashMap.Entry) it.next();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                sb.append(pair.getKey() + \": for \" + pair.getValue() + \" days\\n\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        sb.append(\"\\nFollow-ups:\\n\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (followup.size() \u003c 1) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            sb.append(\"No follow-ups found.\\n\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            Iterator it \u003d followup.entrySet().iterator();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            while (it.hasNext()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                HashMap.Entry pair \u003d (HashMap.Entry) it.next();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                sb.append(pair.getKey() + \": in \" + pair.getValue() + \" days\\n\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        sb.append(\"\\nAppointments : --hidden--\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (!(o instanceof AppointmentTable)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable other \u003d (AppointmentTable) o;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return other.reminders.equals(this.reminders)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u0026\u0026 other.followup.equals(this.followup);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return Objects.hash(reminders, followup);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 256,
      "gachia": 5
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/appointment/exceptions/AppointmentNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Signals that the operation is unable to find the specified appointment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class AppointmentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "gachia": 4
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/appointment/exceptions/DuplicateAppointmentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Signals that the operation will result in duplicate Appointments"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * (Appointments are considered duplicates if they have the same description and days)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class DuplicateAppointmentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public DuplicateAppointmentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super(\"Operation would result in duplicate appointment\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "gachia": 8
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppUtil.checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "-": 54
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppUtil.checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "-": 64
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "-": 56
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    //private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private final String keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public NameContainsKeywordsPredicate(String keywords) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return StringUtil.containsPartialWordIgnoreCase(person.getName().fullName, keywords);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        //return keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 11,
      "ReignOfComputer": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final VisitList visitList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, VisitList visitList, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.visitList \u003d visitList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitList getVisitList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return visitList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                .append(\" VisitList: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                .append(getVisitList())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "-": 114,
      "SQwQ": 9
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppUtil.checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "-": 50
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CollectionUtil.requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 131
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/person/VisitList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Represents a Person\u0027s List of records in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class VisitList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Visit date should follow dd/mm/yyyy format\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private ArrayList\u003cVisitReport\u003e records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitList(ArrayList\u003cVisitReport\u003e lst) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        //requireNonNull(lst);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        records \u003d lst;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Adds a new record to the visit list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitList addRecord(VisitReport report) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.records.add(report);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Collections.sort(this.records);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitReport getRecordByIndex(int id) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return records.get(id - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public ArrayList\u003cVisitReport\u003e getRecords() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this.records;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public ObservableList\u003cVisitReport\u003e getObservableRecords() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return FXCollections.observableArrayList(this.records);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (records.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return \"No past records\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return \"Most Recent Visit: \" + records.get(0).toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Edits record from the list by index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitList editRecord(int reportIdx, VisitReport visitReport) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.records.set(reportIdx - 1, visitReport);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Deletes record from the list by index."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitList deleteRecord(int id) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.records.remove(id - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (!(other instanceof VisitList)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitList otherList \u003d (VisitList) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return records.equals(otherList.records);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return Objects.hash(records);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "SQwQ": 93
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/person/VisitReport.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Visit Report object with name, date, medication, diagnosis and remarks field."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class VisitReport implements Comparable\u003cVisitReport\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Visit date should follow dd/mm/yyyy format\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String medication;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String diagnosis;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String remarks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitReport(String value) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        date \u003d value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        name \u003d new Name(\"null\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this.name.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public String getMedication() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return medication;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public String getDiagnosis() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return diagnosis;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this.remarks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static boolean isValidVisitDate(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        //make sure month and day are valid and year is 2xxx or 19xx"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        DateTimeFormatter dateFormatter1 \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                DateTimeFormatter.ofPattern(\"dd/MM/2uuu\").withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        DateTimeFormatter dateFormatter2 \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                DateTimeFormatter.ofPattern(\"dd/MM/19uu\").withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            LocalDate.parse(test, dateFormatter1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                LocalDate.parse(test, dateFormatter2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            } catch (DateTimeParseException e2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (!(other instanceof VisitReport)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitReport otherReport \u003d (VisitReport) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return date.equals(otherReport.date)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 name.equals(otherReport.name)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 medication.equals(otherReport.medication)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 diagnosis.equals(otherReport.diagnosis)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 remarks.equals(otherReport.remarks);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public int compareTo(VisitReport otherReport) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        String[] reportDate \u003d this.date.split(\"/\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        String[] otherDate \u003d otherReport.date.split(\"/\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        int reportYear \u003d Integer.parseInt(reportDate[2]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        int otherYear \u003d Integer.parseInt(otherDate[2]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        int reportMth \u003d Integer.parseInt(reportDate[1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        int otherMth \u003d Integer.parseInt(otherDate[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        int reportDay \u003d Integer.parseInt(reportDate[0]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        int otherDay \u003d Integer.parseInt(otherDate[0]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (reportYear !\u003d otherYear) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return otherYear - reportYear;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } else if (reportMth !\u003d otherMth) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return otherMth - reportMth;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return otherDay - reportDay;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return Objects.hash(name, date, medication, diagnosis, remarks);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void setDetails(String prescription, String disease, String comment) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.medication \u003d prescription;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.diagnosis \u003d disease;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.remarks \u003d comment;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "SQwQ": 129,
      "gachia": 1
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "-": 51
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitList EMPTY_VISITATION_RECORD_1 \u003d new VisitList(new ArrayList\u003cVisitReport\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitList EMPTY_VISITATION_RECORD_2 \u003d new VisitList(new ArrayList\u003cVisitReport\u003e());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitList EMPTY_VISITATION_RECORD_3 \u003d new VisitList(new ArrayList\u003cVisitReport\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitList EMPTY_VISITATION_RECORD_4 \u003d new VisitList(new ArrayList\u003cVisitReport\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitList EMPTY_VISITATION_RECORD_5 \u003d new VisitList(new ArrayList\u003cVisitReport\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitList EMPTY_VISITATION_RECORD_6 \u003d new VisitList(new ArrayList\u003cVisitReport\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), EMPTY_VISITATION_RECORD_1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), EMPTY_VISITATION_RECORD_2,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), EMPTY_VISITATION_RECORD_3,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), EMPTY_VISITATION_RECORD_4,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), EMPTY_VISITATION_RECORD_5,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), EMPTY_VISITATION_RECORD_6,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 11,
      "-": 45,
      "SQwQ": 14
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Represents a storage for {@link AddressBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 5,
      "-": 41
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final List\u003cJsonAdaptedVisit\u003e visitList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            @JsonProperty(\"visitList\") List\u003cJsonAdaptedVisit\u003e visitList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (visitList !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            this.visitList.addAll(visitList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitList.addAll(source.getVisitList().getRecords().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                .map(JsonAdaptedVisit::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        final ArrayList\u003cVisitReport\u003e personVisits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        for (JsonAdaptedVisit visit : visitList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            personVisits.add(visit.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        final VisitList modelVisitList \u003d new VisitList(personVisits);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelVisitList, modelTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 10,
      "-": 99,
      "SQwQ": 17
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/storage/JsonAdaptedVisit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Jackson-friendly version of {@link VisitReport}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "class JsonAdaptedVisit {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final String visitDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final String medicine;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final String diagnosis;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final String remarks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Constructs a {@code JsonAdaptedVisit} with the given {@code name} and  {@code date}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public JsonAdaptedVisit(@JsonProperty(\"name\") String name, @JsonProperty(\"date\") String date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.visitDate \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.medicine \u003d \"placeholder\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.diagnosis \u003d \"placeholder\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.remarks \u003d \"placeholder\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Converts a given {@code VisitReport} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public JsonAdaptedVisit(VisitReport source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitDate \u003d source.date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        medicine \u003d source.getMedication();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        diagnosis \u003d source.getDiagnosis();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        remarks \u003d source.getRemarks();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public String getVisitationRecord() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return visitDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Converts this Jackson-friendly adapted VisitReport object into the model\u0027s {@code VisitReport} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitReport toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (!VisitReport.isValidVisitDate(visitDate)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            throw new IllegalValueException(VisitReport.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitReport report \u003d new VisitReport(visitDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        report.setName(new Name(name));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        report.setDetails(medicine, diagnosis, remarks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return report;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "SQwQ": 63
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 7,
      "-": 73
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 5,
      "-": 55
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 71
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/AliasListWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " * Window containing the list of existing user-defined aliases."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class AliasListWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private static final String FXML \u003d \"AliasListWindow.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private TextArea aliasesGoesHere;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Creates a new AliasListWindow."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public AliasListWindow(Stage root) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Creates a new AliasListWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public AliasListWindow() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void setup(String aliases) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        aliasesGoesHere.setText(aliases);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        getRoot().addEventHandler(KeyEvent.KEY_RELEASED, (KeyEvent event) -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                if (KeyCode.ESCAPE \u003d\u003d event.getCode()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    getRoot().hide();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "Wingedevil": 86
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/AppointmentCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class AppointmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final String FXML \u003d \"AppointmentListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public final Appointment appointment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private HBox appointmentCardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private ImageView icon;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public AppointmentCard(Appointment appointment) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String description \u003d appointment.getDescription();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Add icon based on whether reminder or followup"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (description.startsWith(\"[R] \")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            icon.setImage(new Image(\"/images/reminder.png\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            title.setText(description.substring(4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            icon.setImage(new Image(\"/images/follow_up.png\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            title.setText(description.substring(4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        date.setText(\"Days left: \" + appointment.getDaysString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (!(other instanceof AppointmentCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentCard card \u003d (AppointmentCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return appointment.equals(card.appointment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 17,
      "ReignOfComputer": 11,
      "gachia": 37
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/AppointmentListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class AppointmentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final String FXML \u003d \"AppointmentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private ListView\u003cAppointment\u003e appointmentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appointmentListView.setItems(appointmentList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Appointment} using an {@code AppointmentCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        protected void updateItem(Appointment appointment, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            super.updateItem(appointment, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (empty || appointment \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                setGraphic(new AppointmentCard(appointment).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 47
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 72
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/EmptyVisitList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class EmptyVisitList extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String EMPTY_MESSAGE \u003d \"Patient has no past records!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final String FXML \u003d \"EmptyVisitListWindow.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private Button backButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private Label message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public EmptyVisitList(Stage root) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        message.setText(EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public EmptyVisitList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private void back() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.hide();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "-": 84,
      "SQwQ": 10
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-f12-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"For detailed help, check out the User Guide:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public static final String QUICK_GUIDE \u003d \"Here is a quick list of Commands to get started: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"(Note: Optional parameters are labelled in [ ] )\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Add a Patient - add n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Edit a Patient field - edit INDEX [n/NAME] [p/PHONE]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Find a Patient - find KEYWORD [MORE KEYWORDS]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Delete a Patient - delete INDEX\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Show all Patients - list\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Add a new Visit report for a Patient - addvisit INDEX [v/DATE] | Date format: DD/MM/YYYY\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Edit a Visit report of a Patient - editvisit INDEX [i/REPORT_INDEX]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Delete a Visit report of a Patient - deletevisit INDEX [d/REPORT_INDEX]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Show a Patient\u0027s full profile - profile INDEX\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Create a Shortcut command - alias l/SHORTHAND v/COMMAND\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Delete a Shortcut command - unalias SHORTHAND\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Show all Shortcut commands - aliaslist\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Create a Reminder - reminder TEXT [d/DAYS]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Create a Follow-up visit - followup INDEX [d/DAYS]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Remove an Appointment - removeappt DESCRIPTION [d/DAYS]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Show the Message of the Day - show\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "            + \"\\t\\u2022 Sort Appointments - sort\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Label userGuideUrl;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Label quickGuide;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "        userGuideUrl.setText(USERGUIDE_URL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "        quickGuide.setText(QUICK_GUIDE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "-": 98,
      "gachia": 30
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private AppointmentListPanel appointmentListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private MotdWindow motdWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private VisitRecordWindow visitWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private VisitListPanel visitListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private EmptyVisitList emptyVisitList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private AliasListWindow aliasListWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private ProfileWindow profilePanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private MenuItem messageMenuItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private StackPane reminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "        // Load font"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "        Font.loadFont(getClass().getResourceAsStream(\"/font/Gill-Sans-MT.TTF\"), 10);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitWindow \u003d new VisitRecordWindow(windowEvent -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            resultDisplay.setFeedbackToUser(visitWindow.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            visitWindow.clearFields();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitListPanel \u003d new VisitListPanel();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        emptyVisitList \u003d new EmptyVisitList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        aliasListWindow \u003d new AliasListWindow();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gachia"
        },
        "content": "        profilePanel \u003d new ProfileWindow();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gachia"
        },
        "content": "        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        reminderListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Opens the motd window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void handleMotd() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        motdWindow \u003d new MotdWindow(logic);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (!motdWindow.isShowing()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            motdWindow.show();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            motdWindow.focus();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitWindow.hide();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitListPanel.hide();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        emptyVisitList.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        profilePanel.hide();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Opens the profile panel or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void handleProfilePanel() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (!profilePanel.isShowing()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            profilePanel.show();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            profilePanel.focus();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Opens the visit form or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void handleShowVisitForm() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (visitListPanel.isShowing()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            visitListPanel.hide();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (!visitWindow.isShowing()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            visitWindow.show();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            visitWindow.focus();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Opens the visit form or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void handleShowVisitList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (!visitListPanel.isShowing()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            visitListPanel.show();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            primaryStage.requestFocus();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            visitListPanel.focus();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Opens the empty visit list prompt window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void handleEmptyVisitList() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (!emptyVisitList.isShowing()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            emptyVisitList.show();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            emptyVisitList.focus();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * Opens the list of existing user-defined aliases or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void handleAliasListWindow() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        if (!aliasListWindow.isShowing()) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            aliasListWindow.show();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            aliasListWindow.focus();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (commandResult.isShowMotd()) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                handleMotd();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            if (commandResult.isAddVisit()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                visitWindow.setReportInfo(commandResult.getIdx(), commandResult.getDate(), logic);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                handleShowVisitForm();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            if (commandResult.isEditVisit()) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                visitWindow.setOldReportInfo(commandResult.getIdx(), commandResult.getReportIdx(),"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        commandResult.getOldReport(), logic);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                if (visitListPanel.isShowing()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    visitListPanel.hide();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                handleShowVisitForm();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            if (commandResult.isShowVisitList()) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                ObservableList\u003cVisitReport\u003e visits \u003d commandResult.getObservableVisitList();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                if (visits.isEmpty()) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    if (visitListPanel.isShowing()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        visitListPanel.hide();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    handleEmptyVisitList();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    visitListPanel.setup(visits);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    handleShowVisitList();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            if (commandResult.isShowProfile()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                profilePanel.setup(commandResult.getProfilePerson(), logic);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                profilePanel.populateVisitList(commandResult.getObservableVisitList());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                handleProfilePanel();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            if (commandResult.isShowAliasList()) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                aliasListWindow.setup(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                handleAliasListWindow();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 21,
      "ReignOfComputer": 29,
      "Wingedevil": 18,
      "-": 181,
      "SQwQ": 80,
      "gachia": 12
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/MotdWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " * Controller for a motd page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class MotdWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MotdWindow.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final String FXML \u003d \"MotdWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Label motdMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Creates a new MotdWindow."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @param root Stage to use as the root of the MotdWindow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public MotdWindow(Stage root, Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String reminders \u003d logic.outputReminders();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        motdMessage.setText(reminders);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Creates a new MotdWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public MotdWindow(Logic logic) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this(new Stage(), logic);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Shows the motd window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        logger.fine(\"Showing motd.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Returns true if the motd window is currently being shown."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Hides the motd window."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Focuses on the motd window."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 88
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private Label visitList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "        phone.setText(\"Phone: \" + person.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "        address.setText(\"Address: \" + person.getAddress().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "        email.setText(\"Email: \" + person.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitList.setText(person.getVisitList().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "-": 69,
      "SQwQ": 3,
      "gachia": 3
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 43,
      "SQwQ": 1
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/ProfileVisitCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * An UI component that displays information of a {@code VisitList}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class ProfileVisitCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final String FXML \u003d \"ProfileVisitCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public final VisitReport report;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private String diagnosis;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private String medication;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private String remarks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private HBox profileVisitCardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Label profileVisitDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Label profileVisitDiagnosis;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Label profileVisitMedication;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Label profileVisitRemarks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public ProfileVisitCard(VisitReport report) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.report \u003d report;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.date \u003d report.date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.diagnosis \u003d report.getDiagnosis();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.medication \u003d report.getMedication();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.remarks \u003d report.getRemarks();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Set date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        profileVisitDate.setText(\"Visitation Report on  [\" + date + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Set Diagnosis"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (diagnosis \u003d\u003d null || diagnosis.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            profileVisitDiagnosis.setText(\"-\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            diagnosis \u003d \"-\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            profileVisitDiagnosis.setText(report.getDiagnosis());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Set Medication"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (report.getMedication() \u003d\u003d null || report.getMedication().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            profileVisitMedication.setText(\"-\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            medication \u003d \"-\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            profileVisitMedication.setText(report.getMedication());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Set Remarks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (report.getRemarks() \u003d\u003d null || report.getRemarks().isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            profileVisitRemarks.setText(\"-\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            remarks \u003d \"-\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            profileVisitRemarks.setText(report.getRemarks());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (!(other instanceof ProfileVisitCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        ProfileVisitCard card \u003d (ProfileVisitCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return this.date.equals(card.date)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u0026\u0026 report.equals(card.report);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 84,
      "ReignOfComputer": 2
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/ProfileWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.ProfileUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.GenerateProfileCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Panel containing detailed information of the specified Person including"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * the usual details on PersonCard, and also associated Visit information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class ProfileWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private static final String FXML \u003d \"ProfileWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ProfileWindow.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private TextArea nameField;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private TextArea tagField;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private TextArea phoneField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private TextArea emailField;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private TextArea addressField;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private ListView\u003cVisitReport\u003e profileVisitList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Label message;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public ProfileWindow(Stage root) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        populateVisitList(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Creates a new ProfilePanel."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public ProfileWindow() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         * [IMPORTANT]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         * Makes Profile Window monopolize the application focus."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         * Fixes previous concurrency issues when modifying Person while Profile Window is open."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.getRoot().initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gachia"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         * Using default window instead. This removed the default control bar."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.getRoot().initStyle(StageStyle.UTILITY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gachia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Initializes the Profile Window with the particulars from the Person instance."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param person Person instance to show in the Profile Window"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void setup(Person person, Logic logic) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Set Person Particulars"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        nameField.setText(ProfileUtil.stringifyName(person.getName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        tagField.setText(ProfileUtil.stringifyTags(person.getTags()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        phoneField.setText(ProfileUtil.stringifyPhone(person.getPhone()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        emailField.setText(ProfileUtil.stringifyEmail(person.getEmail()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        addressField.setText(ProfileUtil.stringifyAddress(person.getAddress()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Populates the ProfileWindow\u0027s ListView with the ProfileVisitListCells representing the VisitReport"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * instances contained within an ObservableList\u0026lt;VisitReport\u0026gt; instance."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param visitList ObservableList\u0026lt;VisitReport\u0026gt; instance containing the VisitReports to be"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *                  visualized."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void populateVisitList(ObservableList\u003cVisitReport\u003e visitList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        profileVisitList.setItems(visitList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        profileVisitList.setCellFactory(listView -\u003e new ProfileVisitListCell());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    class ProfileVisitListCell extends ListCell\u003cVisitReport\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        protected void updateItem(VisitReport report, boolean empty) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            super.updateItem(report, empty);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            if (empty || report \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                ProfileVisitCard card \u003d new ProfileVisitCard(report);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                setGraphic(card.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Shows the Profile Panel."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        logger.info(\"Showing Profile Panel\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        getRoot().addEventHandler(KeyEvent.KEY_RELEASED, (KeyEvent event) -\u003e {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            if (KeyCode.ESCAPE \u003d\u003d event.getCode()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                logger.info(\"User pressed \u0027esc\u0027. Closing Profile Panel..\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                getRoot().hide();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                logger.info(\"Profile Panel Closed.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } else if (KeyCode.Q \u003d\u003d event.getCode()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                logger.info(\"User pressed \u0027q\u0027. Closing Profile Panel.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                getRoot().hide();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                logger.info(\"Profile Panel Closed.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } else if (KeyCode.P \u003d\u003d event.getCode()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    logger.info(\"User pressed \u0027p\u0027. Generating Profile .pdf..\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    generateProfilePressed(new ActionEvent());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    logger.info(\"Profile .pdf generation successful.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                } catch (CommandException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    logger.warning(\"Exception when generating Profile. Error: \" + e.getMessage());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Returns true if the Profile panel is currently being shown."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Hides the Profile panel."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * Focuses on the Profile panel."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    void generateProfilePressed(ActionEvent event) throws CommandException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        GenerateProfileCommand generateProfile \u003d new GenerateProfileCommand(nameField.getText(), tagField.getText(),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                phoneField.getText(), emailField.getText(), addressField.getText(),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                ProfileUtil.stringifyVisit(person.getVisitList()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(generateProfile);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            message.setText(\"A log has been successfully created.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    void mouseEnterExit(MouseEvent e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Label exitLabel \u003d (Label) e.getSource();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        exitLabel.setUnderline(true);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    void mouseLeaveExit(MouseEvent e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Label exitLabel \u003d (Label) e.getSource();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        exitLabel.setUnderline(false);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    void mouseClickExit(MouseEvent e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 215,
      "ReignOfComputer": 9,
      "gachia": 6
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/visitWindowIcon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 5,
      "-": 80,
      "gachia": 1
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/VisitCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * An UI component that displays information of a {@code VisitList}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class VisitCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final String FXML \u003d \"VisitListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public final VisitReport report;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private HBox visitCardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private Label remarks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitCard(VisitReport report, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.report \u003d report;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        name.setText(report.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "        date.setText(\"Visit Date: \" + report.date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (report.getRemarks() \u003d\u003d null || report.getRemarks().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "            remarks.setText(\"Remarks:\\nnone\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "            remarks.setText(\"Remarks:\\n\" + report.getRemarks());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (!(other instanceof VisitCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitCard card \u003d (VisitCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u0026\u0026 report.equals(card.report);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "SQwQ": 59,
      "gachia": 6
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/VisitListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Panel containing the list of Visit Reports."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class VisitListPanel extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final String FXML \u003d \"VisitListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private ListView\u003cVisitReport\u003e visitListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitListPanel(Stage root) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        setup(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Creates a new panel."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitListPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void setup(ObservableList\u003cVisitReport\u003e visitList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitListView.setItems(visitList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitListView.setCellFactory(listView -\u003e new VisitListViewCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    class VisitListViewCell extends ListCell\u003cVisitReport\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        protected void updateItem(VisitReport report, boolean empty) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            super.updateItem(report, empty);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            if (empty || report \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                setGraphic(new VisitCard(report, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        logger.fine(\"Showing report form.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        getRoot().setAlwaysOnTop(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        getRoot().addEventHandler(KeyEvent.KEY_RELEASED, (KeyEvent event) -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            if (KeyCode.ESCAPE \u003d\u003d event.getCode()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                this.hide();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "SQwQ": 111
    }
  },
  {
    "path": "src/main/java/unrealunity/visit/ui/VisitRecordWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.SaveVisitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Creates a new Form for user to enter visitation details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class VisitRecordWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final String FXML \u003d \"VisitRecordForm.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final int INVALID_REPORT_INDEX \u003d -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private TextArea medicine;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private TextArea diagnosis;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private TextArea remarks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private Button saveButton;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private int reportIdx;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String msg \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Creates a new VisitRecordWindow."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @param root Stage to use as the root of the VisitRecordWindow."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitRecordWindow(Stage root, EventHandler\u003cWindowEvent\u003e e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        root.setOnHidden(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Creates a new VisitRecordWindow."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitRecordWindow(EventHandler\u003cWindowEvent\u003e e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this(new Stage(), e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Shows the window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gachia"
        },
        "content": "        logger.fine(\"Showing Visit Record Window.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        getRoot().addEventHandler(KeyEvent.KEY_RELEASED, (KeyEvent event) -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            if (KeyCode.ESCAPE \u003d\u003d event.getCode()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                this.hide();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Returns true if the window is currently being shown."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Hides the window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Clears all text in textareas."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void clearFields() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        medicine.clear();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        diagnosis.clear();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        remarks.clear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Focuses on the window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Saves report and closes window"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    protected void saveReport(ActionEvent event) throws CommandException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        SaveVisitCommand save \u003d new SaveVisitCommand(index, reportIdx, date, medicine.getText(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    diagnosis.getText(), remarks.getText());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        CommandResult commandResult \u003d logic.execute(save);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.msg \u003d commandResult.getFeedbackToUser();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.hide();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.msg \u003d \"\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void setReportInfo(int idx, String date, Logic logic) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.index \u003d idx;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.reportIdx \u003d INVALID_REPORT_INDEX;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void setOldReportInfo(int idx, int reportIdx, VisitReport report, Logic logic) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.index \u003d idx;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.reportIdx \u003d reportIdx;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.date \u003d report.date;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        medicine.setText(report.getMedication());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        diagnosis.setText(report.getDiagnosis());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        remarks.setText(report.getRemarks());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        setSaveAccelerator(saveButton);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private void setSaveAccelerator(Button button) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (button \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            System.out.println(\"Button null!!\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Scene scene \u003d button.getScene();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        if (scene \u003d\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            throw new IllegalArgumentException(\"setSaveAccelerator must be called\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    + \"when a button is attached to a scene\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        scene.getAccelerators().put("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                KeyCombination.valueOf(\"F2\"),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new Runnable() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    @FXML public void run() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        button.fire();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        );"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 7,
      "SQwQ": 190,
      "gachia": 1
    }
  },
  {
    "path": "src/main/resources/view/AliasListWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cfx:root minWidth\u003d\"450\" resizable\u003d\"false\" title\u003d\"Alias List\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cImage url\u003d\"@/images/visitWindowIcon.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            \u003cVBox fx:id\u003d\"aliasListWindow\" prefHeight\u003d\"496.0\" prefWidth\u003d\"529.0\" styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "               \u003cHBox prefHeight\u003d\"38.0\" prefWidth\u003d\"185.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                     \u003cHBox prefHeight\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                                \u003c!-- Add Name Label --\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                                \u003cLabel contentDisplay\u003d\"RIGHT\" prefHeight\u003d\"38.0\" prefWidth\u003d\"571.0\" styleClass\u003d\"label-bright-header\" text\u003d\"List of existing aliases\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                                 \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    \u003c!-- Add Name Text Field --\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    \u003cTextArea fx:id\u003d\"aliasesGoesHere\" editable\u003d\"false\" prefHeight\u003d\"313.0\" prefWidth\u003d\"538.0\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                  \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                     \u003cInsets /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                  \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                     \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                  \u003c/VBox.margin\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "               \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"60.0\" prefWidth\u003d\"518.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                     \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"RIGHT\" styleClass\u003d\"label-bright-footnote\" text\u003d\"Press \u0027esc\u0027 to close\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                           \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"15.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "               \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "               \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Wingedevil": 70,
      "gachia": 2
    }
  },
  {
    "path": "src/main/resources/view/AppointmentListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003cHBox id\u003d\"appointmentCardPane\" fx:id\u003d\"appointmentCardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"15.0\" prefWidth\u003d\"130.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cImageView fx:id\u003d\"icon\" fitHeight\u003d\"24.0\" fitWidth\u003d\"24.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "              \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$title\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cInsets left\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cInsets top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 21,
      "gachia": 19
    }
  },
  {
    "path": "src/main/resources/view/AppointmentListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  \u003cListView fx:id\u003d\"appointmentListView\" styleClass\u003d\"grid-pane\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "gachia": 12
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cStackPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "           \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" prefHeight\u003d\"30.0\" promptText\u003d\"How may I help you?\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cFont name\u003d\"Gill Sans MT Italic\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/TextField\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cLabel prefHeight\u003d\"24.0\" prefWidth\u003d\"12.0\" text\u003d\"\u0026gt;\" StackPane.alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cInsets left\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cButton mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleCommandEntered\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003c/Button\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "gachia": 33
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".label-bright-footnote {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".label-bright-header {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-size: 18pt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-text-fill: #53aaf1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-border-color: derive(#5a5a5a, 10%);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-border-width: 0 0 2 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".label-header-title {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\t-fx-font-size: 18pt;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-text-fill: #53aaf1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".text-area-profile {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-text-inner-colour: #ffffff;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-control-inner-background: #121924;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "#helpMessage, #userGuideUrl, #quickGuide {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-line-spacing: 5px;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".text-field-visit {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: #121924;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: #2e3f64;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gachia"
        },
        "content": ".list-cell #visitCardPane {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-border-width: 0 0 0 5;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-border-color: #b4b4b4;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-border-insets: 10px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".profile-visit-view {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-border-radius: 4px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".profile-list-cell:even #profileVisitViewCell{"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-control-inner-background-color: #121924;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".profile-list-cell:odd #profileVisitViewCell{"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-control-inner-background-color: #2e3f64;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gachia"
        },
        "content": "/*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Disabled change of color upon mouse click"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gachia"
        },
        "content": ".list-cell:filled:selected #visitCardPane {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gachia"
        },
        "content": "*/"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-size: 17px;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".cell_med_label {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".cell_med_label_ul {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-underline: true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".cell_small_label_bold {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gachia"
        },
        "content": "     -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gachia"
        },
        "content": "     -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gachia"
        },
        "content": "     -fx-border-color: derive(#5a5a5a, 10%);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-border-color: derive(#5a5a5a, 25%);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".grid-pane-with-border {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gachia"
        },
        "content": ".anchor-pane {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: #121924"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: derive(#121924, 20%);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gachia"
        },
        "content": "     -fx-padding: 4 20 4 20;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "gachia"
        },
        "content": "     -fx-border-width: 1;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-radius: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gachia"
        },
        "content": "     -fx-font-family: \"Gill Sans MT\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/*"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Custom Button Class for Profile Generation"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ".profileButton {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-padding: 4 10 4 10;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-font-size: 7pt;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: #121924;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-font-family: \"Gill Sans MT\";"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "gachia"
        },
        "content": "    -fx-background-color: transparent, #121924, transparent, #121924;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 78,
      "-": 330,
      "gachia": 69
    }
  },
  {
    "path": "src/main/resources/view/EmptyVisitListWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        \u003cImage url\u003d\"@/images/info_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    \u003cLabel fx:id\u003d\"message\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    \u003cButton fx:id\u003d\"backButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#back\" text\u003d\"Back\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SQwQ": 39
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cVBox styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cLabel fx:id\u003d\"userGuideUrl\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cLabel fx:id\u003d\"quickGuide\" lineSpacing\u003d\"1.0\" text\u003d\"\\$quickGuide\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "gachia": 24
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.geometry.Rectangle2D?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"600\" onCloseRequest\u003d\"#handleExit\" title\u003d\"VISIT\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cVBox prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" minHeight\u003d\"45.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cMenu mnemonicParsing\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cgraphic\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003cImageView fitHeight\u003d\"24.0\" fitWidth\u003d\"24.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" smooth\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003cimage\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "                           \u003cImage url\u003d\"@../images/visitInAppIcon.png\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003c/image\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003c/graphic\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003c/Menu\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "              \u003cMenuItem fx:id\u003d\"messageMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleMotd\" text\u003d\"Message of the Day\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cGridPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"40.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"700.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "                   \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" GridPane.rowSpan\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" prefWidth\u003d\"178.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "                   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cVBox fx:id\u003d\"appointmentList\" prefWidth\u003d\"466.0\" styleClass\u003d\"pane-with-border\" GridPane.rowIndex\u003d\"1\" GridPane.rowSpan\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"reminderListPanelPlaceholder\" prefWidth\u003d\"100.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cHBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"label-header\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cVBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                    \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header-title\" text\u003d\"Patients\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                          \u003cInsets left\u003d\"10.0\" right\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cVBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                    \u003cImageView fitHeight\u003d\"32.0\" fitWidth\u003d\"32.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                       \u003cimage\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                          \u003cImage url\u003d\"@../images/patients.png\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                       \u003c/image\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                       \u003cviewport\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                          \u003cRectangle2D /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                       \u003c/viewport\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cHBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"label-header\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cVBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                    \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header-title\" text\u003d\"Appointments\"\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                          \u003cInsets left\u003d\"10.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cVBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                    \u003cImageView fitHeight\u003d\"24.0\" fitWidth\u003d\"24.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                       \u003cimage\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                          \u003cImage url\u003d\"@../images/appointments.png\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                       \u003c/image\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"120.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 39,
      "-": 43,
      "gachia": 76
    }
  },
  {
    "path": "src/main/resources/view/MotdWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Message of the Day\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cLabel fx:id\u003d\"motdMessage\" lineSpacing\u003d\"5.0\" styleClass\u003d\"label-bright\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 30,
      "gachia": 8
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cLabel fx:id\u003d\"visitList\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$visitList\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cInsets bottom\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "gachia": 31
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" styleClass\u003d\"grid-pane\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "gachia": 7
    }
  },
  {
    "path": "src/main/resources/view/ProfileVisitCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003cHBox fx:id\u003d\"profileVisitCardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        \u003cVBox id\u003d\"profileVisitViewCell\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"isProfile-list-cell\" GridPane.columnIndex\u003d\"0\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u003cLabel fx:id\u003d\"profileVisitDate\" maxWidth\u003d\"500.0\" styleClass\u003d\"cell_med_label_ul\" text\u003d\"\\$date\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"cell_small_label_bold\" text\u003d\"Diagnosis:\" underline\u003d\"true\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cLabel fx:id\u003d\"profileVisitDiagnosis\" maxWidth\u003d\"500.0\" styleClass\u003d\"text-field-visit\" text\u003d\"\\$diagnosis\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"cell_small_label_bold\" text\u003d\"Medication:\" underline\u003d\"true\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cLabel fx:id\u003d\"profileVisitMedication\" maxWidth\u003d\"500.0\" styleClass\u003d\"text-field-visit\" text\u003d\"\\$medication\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cInsets /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"cell_small_label_bold\" text\u003d\"Remarks:\" underline\u003d\"true\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cLabel fx:id\u003d\"profileVisitRemarks\" maxWidth\u003d\"500.0\" styleClass\u003d\"text-field-visit\" text\u003d\"\\$remarks\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 61,
      "SQwQ": 1
    }
  },
  {
    "path": "src/main/resources/view/ProfileWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003cfx:root alwaysOnTop\u003d\"true\" minHeight\u003d\"330.0\" minWidth\u003d\"570.0\" title\u003d\"Profile\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cImage url\u003d\"@/images/visitWindowIcon.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cVBox fx:id\u003d\"profilePanel\" minHeight\u003d\"330.0\" minWidth\u003d\"570.0\" prefHeight\u003d\"550.0\" prefWidth\u003d\"650.0\" styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cHBox maxHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"27.0\" prefWidth\u003d\"166.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                \u003c!-- Add Name Label --\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                \u003cLabel contentDisplay\u003d\"RIGHT\" styleClass\u003d\"label-header\" text\u003d\"Patient Profile\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cHBox alignment\u003d\"BOTTOM_LEFT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"27.0\" prefWidth\u003d\"137.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cButton fx:id\u003d\"generateButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#generateProfilePressed\" prefHeight\u003d\"20.0\" prefWidth\u003d\"130.0\" styleClass\u003d\"profileButton\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Generate Profile File\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cFont size\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/Button\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cHBox alignment\u003d\"BOTTOM_LEFT\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cLabel fx:id\u003d\"message\" prefHeight\u003d\"15.0\" prefWidth\u003d\"255.0\" styleClass\u003d\"label-bright-footnote\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cHBox alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"20.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"20.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cLabel fx:id\u003d\"exitButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"RIGHT\" onMouseClicked\u003d\"#mouseClickExit\" onMouseEntered\u003d\"#mouseEnterExit\" onMouseExited\u003d\"#mouseLeaveExit\" styleClass\u003d\"label-bright-footnote\" text\u003d\"[X]\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cFont size\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cInsets /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cVBox id\u003d\"attributes\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cHBox alignment\u003d\"CENTER_LEFT\" fillHeight\u003d\"false\" maxHeight\u003d\"25.0\" minHeight\u003d\"25.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cLabel contentDisplay\u003d\"RIGHT\" maxHeight\u003d\"25.0\" minHeight\u003d\"25.0\" minWidth\u003d\"70.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"145.0\" styleClass\u003d\"label-bright\" text\u003d\"Name: \"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cInsets /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"nameField\" editable\u003d\"false\" maxHeight\u003d\"23.0\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"23.0\" prefHeight\u003d\"23.0\" styleClass\u003d\"text-area-isProfile\" text\u003d\"-\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cFont size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cHBox alignment\u003d\"CENTER_LEFT\" fillHeight\u003d\"false\" maxHeight\u003d\"25.0\" minHeight\u003d\"25.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cLabel contentDisplay\u003d\"RIGHT\" maxHeight\u003d\"25.0\" minHeight\u003d\"25.0\" minWidth\u003d\"70.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"145.0\" styleClass\u003d\"label-bright\" text\u003d\"Tags:\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cInsets /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"tagField\" editable\u003d\"false\" maxHeight\u003d\"23.0\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"23.0\" prefHeight\u003d\"23.0\" styleClass\u003d\"text-area-isProfile\" text\u003d\"-\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cFont size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cInsets left\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cHBox alignment\u003d\"CENTER_LEFT\" fillHeight\u003d\"false\" maxHeight\u003d\"25.0\" minHeight\u003d\"25.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cLabel contentDisplay\u003d\"RIGHT\" maxHeight\u003d\"25.0\" minHeight\u003d\"25.0\" minWidth\u003d\"70.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"145.0\" styleClass\u003d\"label-bright\" text\u003d\"Phone:\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"phoneField\" editable\u003d\"false\" maxHeight\u003d\"23.0\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"23.0\" prefHeight\u003d\"23.0\" styleClass\u003d\"text-area-isProfile\" text\u003d\"-\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cFont size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cHBox alignment\u003d\"CENTER_LEFT\" fillHeight\u003d\"false\" maxHeight\u003d\"25.0\" minHeight\u003d\"25.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cLabel contentDisplay\u003d\"RIGHT\" maxHeight\u003d\"25.0\" minHeight\u003d\"25.0\" minWidth\u003d\"70.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"145.0\" styleClass\u003d\"label-bright\" text\u003d\"Email:\" /\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"emailField\" editable\u003d\"false\" maxHeight\u003d\"23.0\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"23.0\" prefHeight\u003d\"23.0\" styleClass\u003d\"text-area-isProfile\" text\u003d\"-\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cFont size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cHBox alignment\u003d\"CENTER_LEFT\" fillHeight\u003d\"false\" maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cLabel contentDisplay\u003d\"RIGHT\" maxHeight\u003d\"25.0\" minHeight\u003d\"25.0\" minWidth\u003d\"70.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"145.0\" styleClass\u003d\"label-bright\" text\u003d\"Address:\" /\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"addressField\" editable\u003d\"false\" maxHeight\u003d\"50.0\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" styleClass\u003d\"text-area-isProfile\" text\u003d\"-\" wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cFont size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Visitations:\"\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "               \u003cListView id\u003d\"profileVisitView\" fx:id\u003d\"profileVisitList\" styleClass\u003d\"isProfile-visit-view\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cInsets top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/ListView\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cHBox alignment\u003d\"CENTER\" maxHeight\u003d\"24.0\" prefHeight\u003d\"24.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"RIGHT\" styleClass\u003d\"label-bright-footnote\" text\u003d\"Press \u0027esc\u0027 to close\"\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cFont size\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"15.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 192,
      "SQwQ": 6,
      "gachia": 4
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "gachia": 2
    }
  },
  {
    "path": "src/main/resources/view/VisitListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cHBox id\u003d\"visitCardPane\" fx:id\u003d\"visitCardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cLabel fx:id\u003d\"remarks\" maxHeight\u003d\"50.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remarks\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SQwQ": 26,
      "gachia": 20
    }
  },
  {
    "path": "src/main/resources/view/VisitListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cfx:root minWidth\u003d\"450\" resizable\u003d\"false\" title\u003d\"Visitation List for Edit/Delete\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cImage url\u003d\"@/images/visitWindowIcon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cVBox styleClass\u003d\"background\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cLabel styleClass\u003d\"label-bright-header\" text\u003d\"List of Visits\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u003cListView fx:id\u003d\"visitListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SQwQ": 16,
      "gachia": 17
    }
  },
  {
    "path": "src/main/resources/view/VisitRecordForm.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cfx:root minWidth\u003d\"450.0\" resizable\u003d\"false\" title\u003d\"Add Visit Form\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cImage url\u003d\"@/images/visitWindowIcon.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"275.0\" minWidth\u003d\"308.0\" prefWidth\u003d\"503.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "               \u003cVBox fx:id\u003d\"visitRecordForm\" layoutY\u003d\"5.0\" styleClass\u003d\"background\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Prescription :\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003cTextArea fx:id\u003d\"medicine\" prefHeight\u003d\"65.0\" prefWidth\u003d\"483.0\" promptText\u003d\"Prescription given to the patient\" styleClass\u003d\"text-field-visit\" wrapText\u003d\"true\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "                           \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003c/VBox.margin\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Diagnosis :\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "                           \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003cTextArea fx:id\u003d\"diagnosis\" prefHeight\u003d\"65.0\" prefWidth\u003d\"483.0\" promptText\u003d\"Diagnosis of the patient\" styleClass\u003d\"text-field-visit\" wrapText\u003d\"true\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "                           \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003c/VBox.margin\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Remarks :\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "                           \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "                     \u003cTextArea fx:id\u003d\"remarks\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" promptText\u003d\"Any Additional Remarks\" styleClass\u003d\"text-field-visit\" wrapText\u003d\"true\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "                           \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "                        \u003c/VBox.margin\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cHBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cVBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"33.0\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"33.0\" minWidth\u003d\"205.0\" prefHeight\u003d\"33.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cLabel styleClass\u003d\"label-bright-footnote\" text\u003d\"SHIFT + Tab  -  Previous Field (Up)\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cLabel styleClass\u003d\"label-bright-footnote\" text\u003d\"CTRL + Tab  -  Next Field (Down)\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cInsets /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                 \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                              \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                           \u003cVBox maxHeight\u003d\"33.0\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"33.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"33.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "                           \u003cButton fx:id\u003d\"saveButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#saveReport\" text\u003d\"Save(F2)\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "                              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "                                 \u003cInsets /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "                              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "                           \u003c/Button\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "                           \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                  \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cInsets /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                  \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                     \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 33,
      "SQwQ": 23,
      "gachia": 31
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "-": 132
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 5,
      "-": 56
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            false, errorMessage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 7,
      "-": 31
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 103
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 8,
      "-": 108
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            \"typical sentence\", null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 9,
      "-": 136
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + CommandTestUtil.NAME_DESC_AMY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + CommandTestUtil.PHONE_DESC_AMY + CommandTestUtil.EMAIL_DESC_AMY + CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(TypicalPersons.AMY).withTags().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAppointmentList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void outputReminders_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(logic.outputReminders(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \"Reminders:\\nNo reminders found.\\n\\nFollow-ups:\\nNo follow-ups found.\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 34,
      "-": 136
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 10,
      "-": 34
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAppointment(int type, String description, int days) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void deleteAppointment(String description, int days) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void sortAppointments() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String outputAppointments() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void resetAppointments() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void addAlias(String alias, String aliasTo) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public boolean removeAlias(String alias) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public String applyAlias(String commandText) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public String getAliases(boolean reusable) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gachia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gachia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 41,
      "Wingedevil": 20,
      "-": 182,
      "gachia": 8
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/AddVisitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for AddVisitCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class AddVisitCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final String VALID_DATE \u003d \"12/12/2019\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final String VALID_DATE_2 \u003d \"11/12/2019\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        AddVisitCommand addVisitCommand \u003d new AddVisitCommand(outOfBoundIndex, VALID_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(addVisitCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        AddVisitCommand addVisitCommand \u003d new AddVisitCommand(outOfBoundIndex, VALID_DATE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(addVisitCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        final AddVisitCommand standardCommand \u003d new AddVisitCommand(TypicalIndexes.INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                VALID_DATE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AddVisitCommand commandWithSameValues \u003d new AddVisitCommand(TypicalIndexes.INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                VALID_DATE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(standardCommand.equals(new AddVisitCommand(TypicalIndexes.INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                VALID_DATE)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(standardCommand.equals(new AddVisitCommand(TypicalIndexes.INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                VALID_DATE_2)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 17,
      "SQwQ": 60
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/AliasCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class AliasCommandIntegrationTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void execute_createAliasUseAliasDeleteAlias_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String alias \u003d \"TEST ALIAS\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String aliasTo \u003d \"help\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        expectedModel.addAlias(alias.toLowerCase(), aliasTo.toLowerCase());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertCommandSuccess(new AliasCommand(alias, aliasTo), model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                String.format(AliasCommand.MESSAGE_SUCCESS, alias.toLowerCase(), aliasTo.toLowerCase()), expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertTrue(model.applyAlias(alias).equals(aliasTo));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        expectedModel.removeAlias(alias.toLowerCase());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertCommandSuccess(new UnaliasCommand(alias), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                String.format(UnaliasCommand.MESSAGE_SUCCESS, alias.toLowerCase()), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void execute_overridingExistingCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String alias \u003d \"help\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String aliasTo \u003d \"exit\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertCommandFailure(new AliasCommand(alias, aliasTo), model, AliasCommand.MESSAGE_ALIAS_FAILED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 7,
      "Wingedevil": 40
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/AliasCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AliasTable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class AliasCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void constructor_nullAlias_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AliasCommand(null, null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AliasCommand(\"Command\", null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AliasCommand(null, \"Alias\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void execute_correctAlias_aliasSuccessful() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        AliasCommandTest.ModelStubWithAliasTable modelStub \u003d new AliasCommandTest.ModelStubWithAliasTable();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        CommandResult commandResult \u003d new AliasCommand(\"test\", \"help\").execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertEquals(String.format(AliasCommand.MESSAGE_SUCCESS, \"test\", \"help\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                AliasTable.getDefaultAliasTable().addAlias(\"test\", \"help\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                modelStub.getUserPrefs().getAliasTable()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        AliasCommand aliasExitCommand \u003d new AliasCommand(\"test1\", \"exit\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        AliasCommand aliasHelpCommand \u003d new AliasCommand(\"test2\", \"help\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertTrue(aliasExitCommand.equals(aliasExitCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertTrue(aliasHelpCommand.equals(aliasHelpCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertFalse(aliasExitCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertFalse(aliasHelpCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertFalse(aliasExitCommand.equals(aliasHelpCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private class ModelStubWithAliasTable extends ModelStub {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        final UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            return userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void addAlias(String alias, String aliasTo) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            userPrefs.addAlias(alias, aliasTo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAppointment(int type, String description, int days) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void deleteAppointment(String description, int days) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void sortAppointments() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String outputAppointments() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void resetAppointments() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void addAlias(String alias, String aliasTo) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public boolean removeAlias(String alias) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public String applyAlias(String commandText) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public String getAliases(boolean reusable) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gachia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gachia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 30,
      "Wingedevil": 163,
      "gachia": 8
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/AliasListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class AliasListCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void execute_aliasList_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String expectedStringForDefaultAliasTable \u003d \"a ‚ü∂ add\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                + \"e ‚ü∂ exit\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                + \"h ‚ü∂ help\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedStringForDefaultAliasTable,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                false, false, false, false, false, false, false, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        System.out.println((new AliasListCommand().execute(model).getFeedbackToUser()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertCommandSuccess(new AliasListCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "Wingedevil": 21
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 9,
      "-": 23
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                false, false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different idx value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", 1, null)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different date value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", 0, \"true\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different idx value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", 1, null).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different date value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", 0, \"false\").hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void getters() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", false, false, false, false, false, false, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertEquals(commandResult.isAddVisit(), false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertEquals(commandResult.isShowVisitList(), false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertEquals(commandResult.isExit(), false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertEquals(commandResult.isShowHelp(), false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        CommandResult commandResult2 \u003d new CommandResult(\"feedback\", 3, \"12/12/2012\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertEquals(commandResult2.getIdx(), 3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertEquals(commandResult2.getDate(), \"12/12/2012\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 44,
      "SQwQ": 26
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Like skiing.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Favourite pastime: Eating\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(person.getName().fullName));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 1,
      "ReignOfComputer": 15,
      "-": 110,
      "SQwQ": 2
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/DeleteAppointmentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.AppointmentTable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class DeleteAppointmentCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void constructor_nullDescription_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteAppointmentCommand(null, 0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void execute_correctDeleteAppointment_deleteAppointmentSuccessful() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteAppointmentCommandTest.ModelStubWithAppointmentTable modelStub \u003d new DeleteAppointmentCommandTest"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .ModelStubWithAppointmentTable();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandResult commandResult \u003d new DeleteAppointmentCommand(\"test\", 1).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(String.format(DeleteAppointmentCommand.MESSAGE_SUCCESS), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                AppointmentTable.getDefaultAppointments().addAppointment(0, \"test\", 1)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .deleteAppointment(\"test\", 1),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                modelStub.getUserPrefs().getAppointmentTable()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(\"test1\", 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand2 \u003d new DeleteAppointmentCommand(\"test2\", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(deleteAppointmentCommand.equals(deleteAppointmentCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(deleteAppointmentCommand2.equals(deleteAppointmentCommand2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(deleteAppointmentCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(deleteAppointmentCommand2.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(deleteAppointmentCommand.equals(deleteAppointmentCommand2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private class ModelStubWithAppointmentTable extends ModelStub {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        final UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return userPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAppointment(int type, String description, int days) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            userPrefs.addAppointment(type, description, days);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void deleteAppointment(String description, int days) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            userPrefs.deleteAppointment(description, days);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            // Do Nothing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAppointment(int type, String description, int days) throws CommandException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void deleteAppointment(String description, int days) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void sortAppointments() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String outputAppointments() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void resetAppointments() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAlias(String alias, String aliasTo) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public boolean removeAlias(String alias) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String applyAlias(String commandText) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String getAliases(boolean reusable) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 212
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 23,
      "-": 83
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/DeleteVisitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalVisits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class DeleteVisitCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final int VALID_REPORT_INDEX \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final int INVALID_REPORT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void execute_deleteVisitCommand_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(TypicalIndexes.INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                .withVisitList(TypicalVisits.getLongTypicalVisitList(firstPerson.getName().toString())).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteVisitCommand deleteVisitCommand \u003d new DeleteVisitCommand(TypicalIndexes.INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                VALID_REPORT_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteVisitCommand.MESSAGE_DELETE_VISIT_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new CommandResult(expectedMessage, editedPerson.getVisitList().getObservableRecords());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            CommandResult result \u003d deleteVisitCommand.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void execute_invalidReportIndex_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteVisitCommand deleteVisitCommand \u003d new DeleteVisitCommand(TypicalIndexes.INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                INVALID_REPORT_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteVisitCommand deleteVisitCommand1 \u003d new DeleteVisitCommand(TypicalIndexes.INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                model.getFilteredPersonList()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        .get(TypicalIndexes.INDEX_SECOND_PERSON.getZeroBased()).getVisitList().getRecords().size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteVisitCommand, model, Messages.MESSAGE_INVALID_REPORT_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteVisitCommand1, model, Messages.MESSAGE_INVALID_REPORT_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteVisitCommand deleteFirstCommand \u003d new DeleteVisitCommand(TypicalIndexes.INDEX_FIRST_PERSON, 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteVisitCommand deleteSecondCommand \u003d new DeleteVisitCommand(TypicalIndexes.INDEX_SECOND_PERSON, 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteVisitCommand deleteFirstCommandCopy \u003d new DeleteVisitCommand(TypicalIndexes.INDEX_FIRST_PERSON, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteCommand deleteFirstCommandNoIndex \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteFirstCommandNoIndex));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 24,
      "SQwQ": 67
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Person editedPerson \u003d TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person editedPerson \u003d personInList.withName(CommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withPhone(CommandTestUtil.VALID_PHONE_BOB).withTags(CommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .get(TypicalIndexes.INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            TypicalIndexes.INDEX_FIRST_PERSON, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(standardCommand.equals("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            new EditCommand(TypicalIndexes.INDEX_SECOND_PERSON, CommandTestUtil.DESC_AMY)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(standardCommand.equals("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON, CommandTestUtil.DESC_BOB)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 52,
      "-": 119,
      "SQwQ": 1
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_AMY.equals(CommandTestUtil.DESC_AMY));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(CommandTestUtil.DESC_BOB));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withPhone(CommandTestUtil.VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withEmail(CommandTestUtil.VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withAddress(CommandTestUtil.VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withTags(CommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 56
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/EditVisitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for AddVisitCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class EditVisitCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final int EMPTY_VISITLIST_INDEX \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final int VISITLIST_INDEX_1 \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final int INVALID_REPORT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        EditVisitCommand editVisitCommand \u003d new EditVisitCommand(outOfBoundIndex, EMPTY_VISITLIST_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editVisitCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        EditVisitCommand editVisitCommand \u003d new EditVisitCommand(outOfBoundIndex, EMPTY_VISITLIST_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editVisitCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void execute_invalidReportIndex_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditVisitCommand editVisitCommand \u003d new EditVisitCommand(TypicalIndexes.INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                INVALID_REPORT_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditVisitCommand editVisitCommand1 \u003d new EditVisitCommand(TypicalIndexes.INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                model.getFilteredPersonList()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        .get(TypicalIndexes.INDEX_SECOND_PERSON.getZeroBased()).getVisitList().getRecords().size() + 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editVisitCommand, model, Messages.MESSAGE_INVALID_REPORT_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editVisitCommand1, model, Messages.MESSAGE_INVALID_REPORT_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        final EditVisitCommand standardCommand \u003d new EditVisitCommand(TypicalIndexes.INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                EMPTY_VISITLIST_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditVisitCommand commandWithSameValues \u003d new EditVisitCommand(TypicalIndexes.INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                EMPTY_VISITLIST_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different person index -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(standardCommand.equals(new EditVisitCommand(TypicalIndexes.INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                EMPTY_VISITLIST_INDEX)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different report remark -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(standardCommand.equals(new EditVisitCommand(TypicalIndexes.INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                VISITLIST_INDEX_1)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 22,
      "SQwQ": 69
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                false, false, false, false, false, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 5,
      "-": 14,
      "SQwQ": 2
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                new NameContainsKeywordsPredicate(\"first\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                new NameContainsKeywordsPredicate(\"second\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Gabriel\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Meier\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(Arrays.asList(TypicalPersons.BENSON, TypicalPersons.DANIEL), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return new NameContainsKeywordsPredicate(userInput);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 6,
      "ReignOfComputer": 11,
      "-": 63
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/FollowUpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class FollowUpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void constructor_nullDescription_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FollowUpCommand(null, 0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        FollowUpCommand followupCommand \u003d new FollowUpCommand(Index.fromZeroBased(1), 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        FollowUpCommand followupCommand2 \u003d new FollowUpCommand(Index.fromZeroBased(2), 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(followupCommand.equals(followupCommand));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(followupCommand2.equals(followupCommand2));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(followupCommand.equals(1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(followupCommand2.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(followupCommand.equals(followupCommand2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 33
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                true, false, false, false, false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 14,
      "SQwQ": 1
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 9,
      "-": 29
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/ReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.AppointmentTable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void constructor_nullDescription_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ReminderCommand(null, 0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void execute_correctReminder_reminderSuccessful() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        ReminderCommandTest.ModelStubWithAppointmentTable modelStub \u003d new ReminderCommandTest"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .ModelStubWithAppointmentTable();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandResult commandResult \u003d new ReminderCommand(\"test\", 1).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(String.format(ReminderCommand.MESSAGE_SUCCESS, \"test\", 1), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                AppointmentTable.getDefaultAppointments().addAppointment(0, \"test\", 1),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                modelStub.getUserPrefs().getAppointmentTable()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        ReminderCommand reminderCommand \u003d new ReminderCommand(\"test1\", 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        ReminderCommand reminderCommand2 \u003d new ReminderCommand(\"test2\", 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(reminderCommand.equals(reminderCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(reminderCommand2.equals(reminderCommand2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(reminderCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(reminderCommand2.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(reminderCommand.equals(reminderCommand2));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private class ModelStubWithAppointmentTable extends ModelStub {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        final UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAppointment(int type, String description, int days) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            userPrefs.addAppointment(type, description, days);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAppointment(int type, String description, int days) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void deleteAppointment(String description, int days) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void sortAppointments() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String outputAppointments() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void resetAppointments() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAlias(String alias, String aliasTo) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public boolean removeAlias(String alias) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String applyAlias(String commandText) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String getAliases(boolean reusable) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 201
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/SaveVisitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalVisits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class SaveVisitCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private static final int NEW_REPORT \u003d -1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private VisitReport report \u003d TypicalVisits.REPORT_2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void execute_saveVisitUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                .withVisitList(TypicalVisits.getLongTypicalVisitList(firstPerson.getName().toString())).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        SaveVisitCommand saveVisitCommand \u003d new SaveVisitCommand("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            TypicalIndexes.INDEX_FIRST_PERSON.getOneBased(), NEW_REPORT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                report.date, report.getMedication(), report.getDiagnosis(), report.getRemarks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        String expectedMessage \u003d String.format(SaveVisitCommand.MESSAGE_SAVE_VISIT_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(saveVisitCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        SaveVisitCommand saveVisitCommand \u003d new SaveVisitCommand(outOfBoundIndex.getOneBased(), NEW_REPORT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                report.date, report.getMedication(), report.getDiagnosis(), report.getRemarks());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(saveVisitCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        SaveVisitCommand saveVisitCommand \u003d new SaveVisitCommand(outOfBoundIndex.getOneBased(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                NEW_REPORT, report.date,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                report.getMedication(), report.getDiagnosis(), report.getRemarks());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandTestUtil.assertCommandFailure(saveVisitCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        SaveVisitCommand saveVisitCommand \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new SaveVisitCommand(1, NEW_REPORT, \"12/12/2012\", \"meds\", \"diagnosis\", \"remarks\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(saveVisitCommand.equals(saveVisitCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        SaveVisitCommand saveVisitCommand2 \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new SaveVisitCommand(1, NEW_REPORT, \"12/12/2012\", \"meds\", \"diagnosis\", \"remarks\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(saveVisitCommand.equals(saveVisitCommand2));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(saveVisitCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(saveVisitCommand2.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different idx -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        SaveVisitCommand saveVisitCommandIdx \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new SaveVisitCommand(2, NEW_REPORT, \"12/12/2012\", \"meds\", \"diagnosis\", \"remarks\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(saveVisitCommand2.equals(saveVisitCommandIdx));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        SaveVisitCommand saveVisitCommandDate \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new SaveVisitCommand(1, NEW_REPORT, \"13/12/2012\", \"meds\", \"diagnosis\", \"remarks\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(saveVisitCommand2.equals(saveVisitCommandDate));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        SaveVisitCommand saveVisitCommandMeds \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new SaveVisitCommand(1, NEW_REPORT, \"12/12/2012\", \"medicine\", \"diagnosis\", \"remarks\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(saveVisitCommand2.equals(saveVisitCommandMeds));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        SaveVisitCommand saveVisitCommandDiagnosis \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new SaveVisitCommand(1, NEW_REPORT, \"12/12/2012\", \"meds\", \"dg\", \"remarks\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(saveVisitCommand2.equals(saveVisitCommandDiagnosis));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        SaveVisitCommand saveVisitCommandRemark \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new SaveVisitCommand(1, NEW_REPORT, \"12/12/2012\", \"meds\", \"dg\", \"rm\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(saveVisitCommand2.equals(saveVisitCommandRemark));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 23,
      "SQwQ": 93
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/ShowCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class ShowCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void execute_correctShow_showSuccessful() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        ShowCommandTest.ModelStubWithAppointmentTable modelStub \u003d new ShowCommandTest"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .ModelStubWithAppointmentTable();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandResult commandResult \u003d new ShowCommand().execute(modelStub);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(String.format(ShowCommand.SHOWING_MOTD_MESSAGE), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private class ModelStubWithAppointmentTable extends ModelStub {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        final UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAppointment(int type, String description, int days) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void deleteAppointment(String description, int days) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void sortAppointments() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String outputAppointments() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void resetAppointments() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAlias(String alias, String aliasTo) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public boolean removeAlias(String alias) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String applyAlias(String commandText) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String getAliases(boolean reusable) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 170
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/SortAppointmentsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.AppointmentTable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class SortAppointmentsCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void execute_correctSort_sortSuccessful() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        SortAppointmentsCommandTest.ModelStubWithAppointmentTable modelStub \u003d new SortAppointmentsCommandTest"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .ModelStubWithAppointmentTable();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        new ReminderCommand(\"test\", 99).execute(modelStub);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        new ReminderCommand(\"test2\", 1).execute(modelStub);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandResult commandResult \u003d new SortAppointmentsCommand().execute(modelStub);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(String.format(SortAppointmentsCommand.MESSAGE_SUCCESS), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                AppointmentTable.getDefaultAppointments().addAppointment(0, \"test2\", 1)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .addAppointment(0, \"test\", 99),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                modelStub.getUserPrefs().getAppointmentTable()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private class ModelStubWithAppointmentTable extends ModelStub {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        final UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return userPrefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAppointment(int type, String description, int days) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            userPrefs.addAppointment(type, description, days);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void sortAppointments() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            userPrefs.sortAppointments();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            // Do Nothing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAppointment(int type, String description, int days) throws CommandException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void deleteAppointment(String description, int days) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void sortAppointments() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String outputAppointments() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void resetAppointments() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAlias(String alias, String aliasTo) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public boolean removeAlias(String alias) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String applyAlias(String commandText) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String getAliases(boolean reusable) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 192
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/commands/UnaliasCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AliasTable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.appointment.Appointment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class UnaliasCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void constructor_nullAlias_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UnaliasCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void execute_correctAlias_unaliasSuccessful() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        UnaliasCommandTest.ModelStubWithAliasTable modelStub \u003d new UnaliasCommandTest.ModelStubWithAliasTable();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        CommandResult commandResult \u003d new UnaliasCommand(\"h\").execute(modelStub);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        AliasTable expectedResult \u003d AliasTable.getDefaultAliasTable();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        expectedResult.removeAlias(\"h\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertEquals(String.format(UnaliasCommand.MESSAGE_SUCCESS, \"h\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                expectedResult,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                modelStub.getUserPrefs().getAliasTable()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        UnaliasCommand unaliasExitCommand \u003d new UnaliasCommand(\"test1\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        UnaliasCommand unaliasHelpCommand \u003d new UnaliasCommand(\"test2\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertTrue(unaliasExitCommand.equals(unaliasExitCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertTrue(unaliasHelpCommand.equals(unaliasHelpCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertFalse(unaliasExitCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertFalse(unaliasHelpCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        assertFalse(unaliasExitCommand.equals(unaliasHelpCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private class ModelStubWithAliasTable extends ModelStub {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        final UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            return userPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public boolean removeAlias(String alias) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            return userPrefs.removeAlias(alias);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void addAppointment(int type, String description, int days) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void deleteAppointment(String description, int days) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void sortAppointments() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public String outputAppointments() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void resetAppointments() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void addAlias(String alias, String aliasTo) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public boolean removeAlias(String alias) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public String applyAlias(String commandText) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public String getAliases(boolean reusable) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gachia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gachia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 30,
      "Wingedevil": 164,
      "gachia": 8
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(TypicalPersons.BOB)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withTags(CommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.PREAMBLE_WHITESPACE + CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + CommandTestUtil.ADDRESS_DESC_BOB + CommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_AMY + CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + CommandTestUtil.ADDRESS_DESC_BOB + CommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_BOB + CommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + CommandTestUtil.ADDRESS_DESC_BOB + CommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_BOB + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_AMY + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + CommandTestUtil.ADDRESS_DESC_BOB + CommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_BOB + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + CommandTestUtil.ADDRESS_DESC_BOB + CommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(TypicalPersons.BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withTags(CommandTestUtil.VALID_TAG_FRIEND, CommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_BOB + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + CommandTestUtil.TAG_DESC_HUSBAND + CommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(TypicalPersons.AMY).withTags().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_AMY + CommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_AMY + CommandTestUtil.ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.VALID_NAME_BOB + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_BOB + CommandTestUtil.VALID_PHONE_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_BOB + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.VALID_EMAIL_BOB + CommandTestUtil.ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_BOB + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.VALID_NAME_BOB + CommandTestUtil.VALID_PHONE_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.VALID_EMAIL_BOB + CommandTestUtil.VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.INVALID_NAME_DESC + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + CommandTestUtil.TAG_DESC_HUSBAND + CommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_BOB + CommandTestUtil.INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + CommandTestUtil.TAG_DESC_HUSBAND + CommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_BOB + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.INVALID_EMAIL_DESC + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + CommandTestUtil.TAG_DESC_HUSBAND + CommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_BOB + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + CommandTestUtil.TAG_DESC_HUSBAND + CommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.NAME_DESC_BOB + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + CommandTestUtil.INVALID_TAG_DESC + CommandTestUtil.VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.INVALID_NAME_DESC + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            CommandTestUtil.PREAMBLE_NON_EMPTY + CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB + CommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 168
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/AddVisitCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AddVisitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class AddVisitCommandParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private AddVisitCommandParser parser \u003d new AddVisitCommandParser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private String nonEmptyDate \u003d \"12/12/2012\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddVisitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, AddVisitCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            AddVisitCommand.COMMAND_WORD + \" \" + nonEmptyDate, expectedMessage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 22
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_VISIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AddVisitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + TypicalIndexes.INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(new DeleteCommand(TypicalIndexes.INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + TypicalIndexes.INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String keywords \u003d \"foo bar baz\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void parseCommand_addVisit() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        final String date \u003d \"12/12/2012\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        AddVisitCommand command \u003d (AddVisitCommand) parser.parseCommand(AddVisitCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + TypicalIndexes.INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_VISIT + date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(new AddVisitCommand(TypicalIndexes.INDEX_FIRST_PERSON, date), command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 2,
      "ReignOfComputer": 42,
      "-": 67,
      "SQwQ": 6
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/DeleteAppointmentCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class DeleteAppointmentCommandParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private DeleteAppointmentCommandParser parser \u003d new DeleteAppointmentCommandParser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parseTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"test d/7\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                new DeleteAppointmentCommand(\"test\", 7));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"test\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                new DeleteAppointmentCommand(\"test\", -1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 20
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\", new DeleteCommand(TypicalIndexes.INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 7,
      "-": 24
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/DeleteVisitCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_DELETE_VISIT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.DeleteVisitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class DeleteVisitCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private DeleteVisitCommandParser parser \u003d new DeleteVisitCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private final int nonEmptyIdx \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void parse_reportIndexSpecified_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // have report index"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_DELETE_VISIT + \"1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DeleteVisitCommand expectedCommand \u003d new DeleteVisitCommand(TypicalIndexes.INDEX_FIRST_PERSON, nonEmptyIdx);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // no report index"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_DELETE_VISIT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        expectedCommand \u003d new DeleteVisitCommand(TypicalIndexes.INDEX_FIRST_PERSON, -1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 9,
      "SQwQ": 21
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-5\" + CommandTestUtil.NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"0\" + CommandTestUtil.NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \"1\" + CommandTestUtil.INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \"1\" + CommandTestUtil.INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \"1\" + CommandTestUtil.INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \"1\" + CommandTestUtil.INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.INVALID_PHONE_DESC + CommandTestUtil.EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB + CommandTestUtil.INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND + CommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND + TAG_EMPTY + CommandTestUtil.TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + TAG_EMPTY + CommandTestUtil.TAG_DESC_FRIEND + CommandTestUtil.TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        + CommandTestUtil.INVALID_NAME_DESC + CommandTestUtil.INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        + CommandTestUtil.VALID_ADDRESS_AMY + CommandTestUtil.VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_AMY + CommandTestUtil.ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.NAME_DESC_AMY + CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withPhone(CommandTestUtil.VALID_PHONE_BOB).withEmail(CommandTestUtil.VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withAddress(CommandTestUtil.VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_HUSBAND, CommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PHONE_DESC_BOB + CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withEmail(CommandTestUtil.VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(CommandTestUtil.VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(CommandTestUtil.VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(CommandTestUtil.VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(CommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_AMY + CommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND + CommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_AMY + CommandTestUtil.EMAIL_DESC_AMY + CommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withEmail(CommandTestUtil.VALID_EMAIL_BOB).withAddress(CommandTestUtil.VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_FRIEND, CommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withPhone(CommandTestUtil.VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.INVALID_PHONE_DESC + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withEmail(CommandTestUtil.VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withAddress(CommandTestUtil.VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 216
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(\"Alice Bob\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 28
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/FollowUpCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.FollowUpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class FollowUpCommandParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private FollowUpCommandParser parser \u003d new FollowUpCommandParser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parseTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1 d/7\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                new FollowUpCommand(Index.fromOneBased(1), 7));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                new FollowUpCommand(Index.fromOneBased(1), 7));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 21
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 26,
      "-": 170
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/logic/parser/ReminderCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class ReminderCommandParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private ReminderCommandParser parser \u003d new ReminderCommandParser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void parseTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"test d/7\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                new ReminderCommand(\"test\", 7));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"test\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                new ReminderCommand(\"test\", 7));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 20
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AddressBook newData \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(TypicalPersons.ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(addressBook.hasPerson(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        addressBook.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(addressBook.hasPerson(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        addressBook.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 22,
      "-": 81
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(modelManager.hasPerson(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        modelManager.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(modelManager.hasPerson(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            modelManager.getFilteredAppointmentList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withPerson(TypicalPersons.ALICE).withPerson(TypicalPersons.BENSON).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String keywords \u003d TypicalPersons.ALICE.getName().fullName;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        modelManager.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 1,
      "ReignOfComputer": 26,
      "-": 114
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setAppointmentsTable_nullAppointmentsTable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setAppointmentsTable(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void getAppointmentListTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UserPrefs userPref2 \u003d new UserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(userPref.getAppointmentList(), userPref2.getAppointmentList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void addAppointmentTest() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UserPrefs userPref2 \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        int type \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String description \u003d \"test\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        int days \u003d 7;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(type, description, days);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref2.addAppointment(type, description, days);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(userPref.outputAppointments(), userPref2.outputAppointments());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void sortAppointmentsTest() throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(0, \"TestA\", 5);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(0, \"TestB\", 99);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(0, \"TestC\", 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(1, \"TestX\", 5);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(1, \"TestY\", 99);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(1, \"TestZ\", 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.sortAppointments();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String expected \u003d \"Reminders:\\nTestC: for 1 days\\nTestA: for 5 days\\nTestB: for 99 days\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + \"\\n\\nFollow-ups:\\nTestZ: in 1 days\\nTestX: in 5 days\\nTestY: in 99 days\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(userPref.outputAppointments(), expected);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void outputAppointmentsTest() throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(0, \"TestA\", 5);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(0, \"TestB\", 99);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(0, \"TestC\", 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(1, \"TestX\", 5);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(1, \"TestY\", 99);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(1, \"TestZ\", 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String expected \u003d \"Reminders:\\nTestA: for 5 days\\nTestC: for 1 days\\nTestB: for 99 days\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + \"\\n\\nFollow-ups:\\nTestZ: in 1 days\\nTestY: in 99 days\\nTestX: in 5 days\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(userPref.outputAppointments(), expected);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void resetAppointmentsTest() throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(0, \"TestA\", 5);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(0, \"TestB\", 99);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(0, \"TestC\", 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(1, \"TestX\", 5);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(1, \"TestY\", 99);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.addAppointment(1, \"TestZ\", 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        userPref.resetAppointments();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(userPref.getAppointmentTable(), new UserPrefs().getAppointmentTable());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void getLastUpdateTest() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(userPref.getLastUpdate(), LocalDate.now());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 82,
      "-": 17
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/appointment/AppointmentListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class AppointmentListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new AppointmentList(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void asUnmodifiableObservableListTest() throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Test\", 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentList apptList1 \u003d new AppointmentList(apptTable.getAppointmentList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentList apptList2 \u003d new AppointmentList(apptTable.getAppointmentList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(apptList1.asUnmodifiableObservableList().get(0).toString()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .equals(apptList2.asUnmodifiableObservableList().get(0).toString()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void addAppointmentTest() throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Test\", 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentList apptList1 \u003d new AppointmentList(apptTable.getAppointmentList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentList apptList2 \u003d new AppointmentList(apptTable.getAppointmentList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList1.addAppointment(0, \"Tester\", 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList2.addAppointment(0, \"Tester\", 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(apptList1.asUnmodifiableObservableList().get(1).toString()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .equals(apptList2.asUnmodifiableObservableList().get(1).toString()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void internalAddWithCheckTest() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Test\", 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentList apptList1 \u003d new AppointmentList(apptTable.getAppointmentList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentList apptList2 \u003d new AppointmentList(apptTable.getAppointmentList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList1.addAppointment(0, \"Test\", 3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList2.addAppointment(0, \"Test\", 3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(apptList1.asUnmodifiableObservableList().get(0).toString()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .equals(apptList2.asUnmodifiableObservableList().get(0).toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(3, apptList2.asUnmodifiableObservableList().get(0).getDays());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void deleteAppointmentTest() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Test\", 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentList apptList1 \u003d new AppointmentList(apptTable.getAppointmentList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentList apptList2 \u003d new AppointmentList(apptTable.getAppointmentList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList1.addAppointment(0, \"Tester\", 3);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList2.addAppointment(0, \"Tester\", 3);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList1.deleteAppointment(\"Tester\", -1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList2.deleteAppointment(\"Tester\", -1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(apptList1.asUnmodifiableObservableList().size()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                \u003d\u003d apptList2.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(1, apptList1.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void antiDuplicateApptTest() throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Test\", 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentList apptList1 \u003d new AppointmentList(apptTable.getAppointmentList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment toCheck1 \u003d new Appointment(\"[R] Test\", 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment toCheck2 \u003d new Appointment(\"[R] Nope\", 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(apptList1.antiDuplicate(toCheck1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(apptList1.antiDuplicate(toCheck2));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void antiDuplicateDescTest() throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Test\", 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentList apptList1 \u003d new AppointmentList(apptTable.getAppointmentList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(apptList1.antiDuplicate(\"[R] Test\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(apptList1.antiDuplicate(\"[R] Nope\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void sortAppointmentsTest() throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Test\", 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentList apptList1 \u003d new AppointmentList(apptTable.getAppointmentList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList1.addAppointment(0, \"TestA\", 5);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList1.addAppointment(0, \"TestB\", 99);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList1.addAppointment(0, \"TestC\", 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList1.addAppointment(1, \"TestX\", 5);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList1.addAppointment(1, \"TestY\", 99);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList1.addAppointment(1, \"TestZ\", 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList1.sortAppointments();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String expected \u003d \"[F] TestY\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expected, apptList1.asUnmodifiableObservableList().get(2).getDescription());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void resetAppointmentsTest() throws CommandException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Test\", 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentList apptList1 \u003d new AppointmentList(apptTable.getAppointmentList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptList1.resetAppointments();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(0, apptList1.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 114
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/appointment/AppointmentTableTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class AppointmentTableTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void getDefaultAppointmentsTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d AppointmentTable.getDefaultAppointments();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String expected \u003d \"Reminders:\\nNo reminders found.\\n\\nFollow-ups:\\nNo follow-ups found.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expected, apptTable.outputAppointments());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void addAppointmentTest() throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Test\", 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            apptTable.addAppointment(0, \"Test\", 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Tester\", 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String expected \u003d \"Reminders:\\nTester: for 1 days\\nTest: for 1 days\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"\\n\\nFollow-ups:\\nNo follow-ups found.\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expected, apptTable.outputAppointments());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void deleteAppointmentTest() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Test\", 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Tester\", 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.deleteAppointment(\"Test\", 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String expected \u003d \"Reminders:\\nTester: for 1 days\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + \"\\n\\nFollow-ups:\\nNo follow-ups found.\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expected, apptTable.outputAppointments());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.deleteAppointment(\"Tester\", -1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String expected2 \u003d \"Reminders:\\nNo reminders found.\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + \"\\n\\nFollow-ups:\\nNo follow-ups found.\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expected2, apptTable.outputAppointments());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void sortAppointmentsTest() throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"TestA\", 5);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"TestB\", 99);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"TestC\", 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(1, \"TestX\", 5);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(1, \"TestY\", 99);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(1, \"TestZ\", 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.sortAppointments();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String expected \u003d \"Reminders:\\nTestC: for 1 days\\nTestA: for 5 days\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"TestB: for 99 days\\n\\nFollow-ups:\\nTestZ: in 1 days\\nTestX: in 5 days\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            + \"TestY: in 99 days\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expected, apptTable.outputAppointments());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void cascadeDayTest() throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"TestA\", 5);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"TestB\", 99);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"TestC\", 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(1, \"TestX\", 5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(1, \"TestY\", 99);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(1, \"TestZ\", 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.cascadeDay(3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String expected \u003d \"Reminders:\\nTestA: for 2 days\\nTestB: for 96 days\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                + \"\\nFollow-ups:\\nTestY: in 96 days\\nTestX: in 2 days\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expected, apptTable.outputAppointments());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void outputAppointmentsTest() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AppointmentTable apptTable \u003d new AppointmentTable();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        apptTable.addAppointment(0, \"Test\", 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String expected \u003d \"Reminders:\\nTest: for 1 days\\n\\nFollow-ups:\\nNo follow-ups found.\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expected, apptTable.outputAppointments());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 87
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/appointment/AppointmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Appointment(null, 0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void getDescriptionTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String testDesc \u003d \"[R] test\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt1 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt2 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(appt1.getDescription(), appt2.getDescription());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(testDesc, appt1.getDescription());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void getDescriptionRawTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String testDesc \u003d \"[R] test\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt1 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt2 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(appt1.getDescriptionRaw(), appt2.getDescriptionRaw());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(testDesc.substring(4), appt1.getDescriptionRaw());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void getTypeTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String testDesc \u003d \"[R] test\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt1 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt2 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(appt1.getType(), appt2.getType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(testDesc.substring(0, 3), appt1.getType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void getDaysTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String testDesc \u003d \"[R] test\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt1 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt2 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(appt1.getDays(), appt2.getDays());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(1, appt1.getDays());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setDaysTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String testDesc \u003d \"[R] test\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt1 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt2 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appt1.setDays(2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        appt2.setDays(2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(appt1.getDays(), appt2.getDays());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(2, appt1.getDays());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void getDaysStringTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String testDesc \u003d \"[R] test\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt1 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt2 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(appt1.getDaysString(), appt2.getDaysString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(\"1\", appt1.getDaysString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void isSameAppointmentApptTest() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String testDesc \u003d \"[R] test\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt1 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt2 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt3 \u003d new Appointment(testDesc, 2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(appt1.isSameAppointment((appt2)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(appt1.isSameAppointment((appt3)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void isSameAppointmentDescTest() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        String testDesc \u003d \"[R] test\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt1 \u003d new Appointment(testDesc, 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Appointment appt2 \u003d new Appointment(testDesc + \"a\", 2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(appt1.isSameAppointment((testDesc.substring(4))));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(appt2.isSameAppointment((testDesc.substring(4))));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 93
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/person/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/person/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 56
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String firstPredicateKeywordList \u003d \"first\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String secondPredicateKeywordList \u003d \"first second\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(\"Alice\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(\"Alice Bob\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Only partial keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(\"arol\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(\"aLIce bOB\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Whitespace between keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(\"Alice  Bob\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(\"Carol\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Keywords match phone, but does not match name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(\"12345\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Keywords match email, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(\"alice@email.com\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Keywords match address, but does not match name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(\"Main Street\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 23,
      "ReignOfComputer": 2,
      "-": 56
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 35
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(TypicalPersons.ALICE.isSamePerson(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(TypicalPersons.ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(TypicalPersons.ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(TypicalPersons.ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(TypicalPersons.ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(TypicalPersons.ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(TypicalPersons.ALICE.equals(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(TypicalPersons.BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 96
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/person/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 35
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertFalse(uniquePersonList.contains(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(uniquePersonList.contains(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(TypicalPersons.ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(PersonNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            uniquePersonList.setPerson(TypicalPersons.ALICE, TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.setPerson(TypicalPersons.ALICE, TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        expectedUniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.setPerson(TypicalPersons.ALICE, editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.setPerson(TypicalPersons.ALICE, TypicalPersons.BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        expectedUniquePersonList.add(TypicalPersons.BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.add(TypicalPersons.BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(DuplicatePersonException.class, () -\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            uniquePersonList.setPerson(TypicalPersons.ALICE, TypicalPersons.BOB));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.remove(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        expectedUniquePersonList.add(TypicalPersons.BOB);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.add(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(TypicalPersons.BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        expectedUniquePersonList.add(TypicalPersons.BOB);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(TypicalPersons.ALICE, TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(DuplicatePersonException.class, () -\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 174
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/person/VisitListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalVisits;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class VisitListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitList visitList \u003d TypicalVisits.getLongTypicalVisitList(\"peter\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(visitList.equals(visitList));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitList visitListCopy \u003d new VisitList(visitList.getRecords());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(visitList.equals(visitListCopy));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(visitList.equals(1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(visitList.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different visitList -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitList differentVisitList \u003d TypicalVisits.getShortTypicalVisitList(\"peter\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(visitList.equals(differentVisitList));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "SQwQ": 31
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/person/VisitReportTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalVisits;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class VisitReportTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitReport visitReport \u003d TypicalVisits.REPORT_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(visitReport.equals(visitReport));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitReport visitReportCopy \u003d new VisitReport(visitReport.date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitReportCopy.setDetails(visitReport.getMedication(), visitReport.getDiagnosis(), visitReport.getRemarks());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitReportCopy.setName(new Name(visitReport.getName()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertTrue(visitReport.equals(visitReportCopy));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(visitReport.equals(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(visitReport.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        // different visitList -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitReport differentVisitReport \u003d TypicalVisits.REPORT_2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        assertFalse(visitReport.equals(differentVisitReport));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "SQwQ": 32
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 20
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final String VALID_NAME \u003d TypicalPersons.BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final String VALID_PHONE \u003d TypicalPersons.BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final String VALID_EMAIL \u003d TypicalPersons.BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final String VALID_ADDRESS \u003d TypicalPersons.BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final List\u003cJsonAdaptedVisit\u003e VALID_VISIT_LIST \u003d TypicalPersons.BENSON"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        .getVisitList().getRecords().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .map(JsonAdaptedVisit::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d TypicalPersons.BENSON.getTags().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(TypicalPersons.BENSON, person.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        VALID_ADDRESS, VALID_VISIT_LIST, VALID_TAGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        VALID_ADDRESS, VALID_VISIT_LIST, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        VALID_ADDRESS, VALID_VISIT_LIST, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        VALID_ADDRESS, VALID_VISIT_LIST, VALID_TAGS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        VALID_ADDRESS, VALID_VISIT_LIST, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        VALID_ADDRESS, VALID_VISIT_LIST, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        INVALID_ADDRESS, VALID_VISIT_LIST, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_VISIT_LIST, VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "                        VALID_ADDRESS, VALID_VISIT_LIST, invalidTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 27,
      "-": 76,
      "SQwQ": 24
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AddressBook original \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        original.addPerson(TypicalPersons.HOON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        original.removePerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        original.addPerson(TypicalPersons.IDA);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 17,
      "-": 91
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 8,
      "-": 39
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 9,
      "-": 113
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AddressBook original \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 7,
      "-": 61
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "-": 31
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 8,
      "-": 79
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitList DEFAULT_VISIT_LIST \u003d TypicalVisits.getShortTypicalVisitList(DEFAULT_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private VisitList visitList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitList \u003d DEFAULT_VISIT_LIST;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        visitList \u003d personToCopy.getVisitList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Sets the {@code VisitList} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public PersonBuilder withVisitList(VisitList lst) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.visitList \u003d lst;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new Person(name, phone, email, address, visitList, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 9,
      "-": 84,
      "SQwQ": 13
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 10,
      "-": 52
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "-": 51
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static unrealunity.visit.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withPhone(\"94351253\").withVisitList(TypicalVisits.getShortTypicalVisitList(\"Alice Pauline\"))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withVisitList(TypicalVisits.getLongestTypicalVisitList(\"Benson Meier\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 13,
      "-": 62,
      "SQwQ": 2
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/testutil/TypicalVisits.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * A utility class containing a list of {@code VisitReport} and  {@code VisitList} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class TypicalVisits {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitReport REPORT_1 \u003d new VisitReportBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDate(\"31/12/2012\").withPrescription(\"2 day MC\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDiagnosis(\"Flu\").withRemark(\"Your\u0027re going to die.\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitReport REPORT_2 \u003d new VisitReportBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDate(\"30/11/2012\").withPrescription(\"1 packet of condom\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDiagnosis(\"HPV\").withRemark(\"Try not to spread the love.\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitReport REPORT_3 \u003d new VisitReportBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDate(\"31/10/2012\").withPrescription(\"JavaFX\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDiagnosis(\"Brain cancer\").withRemark(\"You\u0027ll be cured in no time\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitReport REPORT_4 \u003d new VisitReportBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDate(\"01/03/2016\").withPrescription(\"3 packets of cigs\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDiagnosis(\"Lung Cancer\").withRemark(\"Life is too short to not smoke\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitReport REPORT_5 \u003d new VisitReportBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDate(\"12/7/1999\").withPrescription(\"1 day MC\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDiagnosis(\"Eye Cancer, Mouth Cancer, Face Cancer\").withRemark(\"You\u0027ll be fine in no time\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitReport REPORT_6 \u003d new VisitReportBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDate(\"26/8/2011\").withPrescription(\"antidepressants\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDiagnosis(\"depression!!!\").withRemark(\"Stay away from windows\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final VisitReport REPORT_7 \u003d new VisitReportBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDate(\"31/12/2012\").withPrescription(\"1 watermelon\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            .withDiagnosis(\"stomach ache\").withRemark(\"not enough can always increase the dosage\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static VisitList getLongestTypicalVisitList(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        ArrayList\u003cVisitReport\u003e typicalList \u003d new ArrayList\u003cVisitReport\u003e(Arrays.asList(REPORT_1, REPORT_2, REPORT_3));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        for (VisitReport v : typicalList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            v.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new VisitList(typicalList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static VisitList getShortTypicalVisitList(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        ArrayList\u003cVisitReport\u003e typicalList \u003d new ArrayList\u003cVisitReport\u003e(Arrays.asList(REPORT_1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        for (VisitReport v : typicalList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            v.setName(new Name(name));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new VisitList(typicalList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static VisitList getLongTypicalVisitList(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        ArrayList\u003cVisitReport\u003e typicalList \u003d new ArrayList\u003cVisitReport\u003e(Arrays.asList(REPORT_1, REPORT_2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        for (VisitReport v : typicalList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "            v.setName(new Name(name));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return new VisitList(typicalList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "SQwQ": 62
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/testutil/VisitReportBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.model.person.VisitReport;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " * A utility class to build Visit Reports for tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SQwQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "public class VisitReportBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"31/12/2012\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String DEFAULT_PRESCRIPTION \u003d \"2 day MC\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String DEFAULT_DIAGNOSIS \u003d \"Flu\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Your\u0027re going to die.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String prescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String diagnosis;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    private String remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitReportBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        date \u003d DEFAULT_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        prescription \u003d DEFAULT_PRESCRIPTION;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        diagnosis \u003d DEFAULT_DIAGNOSIS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        remark \u003d DEFAULT_REMARK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Initializes the VisitReportBuilder with the data of {@code ToCopyToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitReportBuilder(VisitReport reportToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        name \u003d reportToCopy.getName();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        date \u003d reportToCopy.date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        prescription \u003d reportToCopy.getMedication();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        diagnosis \u003d reportToCopy.getDiagnosis();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        remark \u003d reportToCopy.getRemarks();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Sets the {@code Name} of the {@code VisitReport} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitReportBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Sets the {@code date} of the {@code VisitReport} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitReportBuilder withDate(String date) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Sets the {@code prescription} of the {@code VisitReport} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitReportBuilder withPrescription(String prescription) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.prescription \u003d prescription;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Sets the {@code diagnosis} of the {@code VisitReport} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitReportBuilder withDiagnosis(String diagnosis) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.diagnosis \u003d diagnosis;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Sets the {@code remark} of the {@code VisitReport} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitReportBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SQwQ"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     * Builds new report."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    public VisitReport build() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        VisitReport report \u003d new VisitReport(date);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        report.setName(new Name(name));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        report.setDetails(prescription, diagnosis, remark);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "        return report;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SQwQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 3,
      "SQwQ": 89
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/unrealunity/visit/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package unrealunity.visit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import unrealunity.visit.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 15,
      "-": 99
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003c?import unrealunity.visit.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "\u003cfx:root type\u003d\"unrealunity.visit.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 5
    }
  }
]
