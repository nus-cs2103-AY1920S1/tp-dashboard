[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "//test"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    testImplementation group: \u0027com.github.javafaker\u0027, name: \u0027javafaker\u0027, version: \u00271.0.1\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    archiveName \u003d \u0027guiltTrip().jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        \u0027site-name\u0027: \u0027guitTrip()\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://ay1920s1-cs2103-t16-4.github.io/main/\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 2,
      "yuhongtay": 3,
      "Dandford": 1,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            SampleDataUtil.addCategories(initialData);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            SampleDataUtil.addCategories(initialData);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 3,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 1180;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 640;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final String font \u003d \"Segoe UI\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 3,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_INVALID_ARGUMENT_FORMAT \u003d \"Invalid arguments! %1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_INVALID_CATEGORY \u003d \"The category provided is invalid. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                                                            + \"Create the category using addCategory.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_CATEGORY \u003d \"The category modified is non-existent\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_EXISTING_ENTRIES_CATEGORY \u003d \"The category deleted has existing entries. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                                                            + \"Delete those entries first.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX \u003d \"The entry index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_ENTRIES_LISTED_OVERVIEW \u003d \"%1$d entries listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_WISHES_LISTED_OVERVIEW \u003d \"%1$d wishes listed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_BUDGETS_LISTED_OVERVIEW \u003d \"%1$d budgets listed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 1,
      "Dandford": 6,
      "rongrongrr": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/InvalidationListenerManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Manages a list of {@link InvalidationListener}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class InvalidationListenerManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final ArrayList\u003cInvalidationListener\u003e listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Calls {@link InvalidationListener#invalidated(Observable)} on all added listeners."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Any modifications to the listeners list during the invocation of this method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @param observable The {@code Observable} that became invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void callListeners(Observable observable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // Make a copy of listeners such that any modifications to the listeners list during"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // the invocation of this method will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        ArrayList\u003cInvalidationListener\u003e listenersCopy \u003d new ArrayList\u003c\u003e(listeners);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        for (InvalidationListener listener : listenersCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            listener.invalidated(observable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Adds {@code listener} to the list of listeners."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * If the same listener is added more that once, then it will be notified more than once."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        listeners.add(listener);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Removes {@code listener} from the list of listeners."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * If the given listener was not previously added, then this method call is a no-op."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * If the given listener was added more than once, then only the first occurrence in the list will be removed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        listeners.remove(listener);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredEntryList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredExpenseAndIncomeList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    ObservableList\u003cWish\u003e getFilteredWishList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgetList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    ObservableList\u003cExpenseReminder\u003e getFilteredExpenseReminderList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 1,
      "Dandford": 3,
      "jessicax941": 10,
      "rongrongrr": 5,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        //Set addressBookModified to true whenever the models\u0027 addressbook is modified."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, IllegalArgumentException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            logger.info(\"Finance tracker modified, saving to file\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return model.getFilteredEntryList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredExpenseAndIncomeList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return model.getFilteredExpensesAndIncomes();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ObservableList\u003cWish\u003e getFilteredWishList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return model.getFilteredWishes();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return model.getFilteredBudgets();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ObservableList\u003cExpenseReminder\u003e getFilteredExpenseReminderList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return model.getFilteredExpenseReminders();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 7,
      "jessicax941": 20,
      "rongrongrr": 16,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAutoExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREQ;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.AutoExpense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class AddAutoExpenseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addAutoExp\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a auto expense to the finance tracker. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            + \"Parameters: \" + PREFIX_DESC + \"DESCRIPTION \" + PREFIX_AMOUNT + \"AMOUNT \" + \"[\" + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            + PREFIX_TAG + \"TAG]...\\n\" + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_DESC + \"Mala \" + PREFIX_AMOUNT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            + \"5.50 \" + PREFIX_FREQ + \"daily \" + PREFIX_DATE + \"2019-09-09 \" + PREFIX_TAG + \"food \" + PREFIX_TAG"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            + \"indulgence\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New auto expense added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private final AutoExpense toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Creates an AddAutoExpenseCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AddAutoExpenseCommand(AutoExpense autoExpense) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        requireNonNull(autoExpense);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        toAdd \u003d autoExpense;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        model.addAutoExpense(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                || (other instanceof AddAutoExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                        \u0026\u0026 toAdd.equals(((AddAutoExpenseCommand) other).toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCategoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Adds a Category to guiltTrip."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class AddCategoryCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addCategory\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a category to the finance tracker. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY TYPE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_DESC + \"DESCRIPTION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_CATEGORY + \"Expense \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_DESC + \"Spicy Food \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New category added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final Category toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public AddCategoryCommand(Category entry) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        toAdd \u003d entry;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Creates an AddCategoryCommand to add to the existing categories. Model will handle the check if the category is"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * already present in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        model.addCategory(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                || (other instanceof AddCategoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCategoryCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Dandford": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Adds a entry to guiltTrip."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_CATEGORY \u003d \"Call the command listCategories for the list of Categories.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a entry to the finance tracker. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + PREFIX_DESC + \"DESCRIPTION \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + PREFIX_DATE + \"TIME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_TYPE + \"Expense \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_DESC + \"Mala \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + PREFIX_AMOUNT + \"5.50 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + PREFIX_DATE + \"2019 09 09 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + PREFIX_TAG + \"food \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_TAG + \"indulgence.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + MESSAGE_CATEGORY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New entry added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final Entry toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public AddCommand(Entry entry) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        toAdd \u003d entry;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String type \u003d toAdd.getType().toLowerCase();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"expense\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            model.addExpense((Expense) toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"income\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            model.addIncome((Income) toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case \"wish\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            model.addWish((Wish) toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        case \"budget\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            model.addBudget((Budget) toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new CommandException(\"command not found\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 4,
      "Dandford": 16,
      "rongrongrr": 7,
      "jessicax941": 24,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddExpenseReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class AddExpenseReminderCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addExpenseReminder\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an Expense Reminder to reminders list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + PREFIX_DESC + \"REMINDER_MESSAGE\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + PREFIX_AMOUNT + \"QUOTA \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + PREFIX_DESC + \"fat \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + PREFIX_AMOUNT + \"5.50 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + PREFIX_TAG + \"food \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + PREFIX_TAG + \"mala\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ExpenseReminder added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final ExpenseReminder toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public AddExpenseReminderCommand(ExpenseReminder reminder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        toAdd \u003d reminder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.addExpenseReminder(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || (other instanceof AddExpenseReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddExpenseReminderCommand) other).toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 56,
      "rongrongrr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BudgetListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUDGETS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class BudgetListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"budgetList\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all budgets\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.updateFilteredBudgets(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ChangeFontCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.ui.FontName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Changes the font of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class ChangeFontCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"changeFont\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the application font to specified font. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"PARAMETERS: (case sensitive; type listFont to see available fonts) \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"EXAMPLE: \" + COMMAND_WORD + \" verdana\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Changed font to %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final FontName fontName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ChangeFontCommand(FontName fontName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.fontName \u003d fontName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, fontName), fontName, false, true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 3,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.PanelName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.ui.FontName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /** For toggling the panels. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final PanelName panelName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final boolean togglePanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /** For changing the font. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final FontName fontName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final boolean listFonts;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final boolean changeFont;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.panelName \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.togglePanel \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.fontName \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.listFonts \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.changeFont \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields, and other fields are set to their default value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public CommandResult(String feedbackToUser, PanelName panelName, boolean togglePanel) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.panelName \u003d panelName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.togglePanel \u003d togglePanel;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.fontName \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.listFonts \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.changeFont \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields, and other fields are set to their default value."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public CommandResult(String feedbackToUser, FontName fontName, boolean listFonts, boolean changeFont) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.panelName \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.togglePanel \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.fontName \u003d fontName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.listFonts \u003d listFonts;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.changeFont \u003d changeFont;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean isTogglePanel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return togglePanel;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public PanelName getPanelName() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.panelName;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean isChangeFont() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return changeFont;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean isListFonts() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return listFonts;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public FontName getFontName() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return fontName;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 panelName \u003d\u003d otherCommandResult.panelName"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 togglePanel \u003d\u003d otherCommandResult.togglePanel"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 fontName \u003d\u003d otherCommandResult.fontName"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 listFonts \u003d\u003d otherCommandResult.listFonts"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 changeFont \u003d\u003d otherCommandResult.changeFont;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, panelName, togglePanel, fontName, listFonts, changeFont);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 72,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Deletes a Budget identified using its displayed index from the finance tracker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class DeleteBudgetCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteBudget\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \": Deletes the budget identified by the index number used in the displayed budget list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted Budget: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public DeleteBudgetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgets();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        Budget entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.deleteBudget(entryToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                || (other instanceof DeleteBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteBudgetCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCategoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Deletes a category from guiltTrip();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DeleteCategoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteCategory\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \": Deletes the category from guiltTrip\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY TYPE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_DESC + \"DESCRIPTION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_CATEGORY + \"Expense \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_DESC + \"Spicy Food \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_DELETE_CATEGORY_SUCCESS \u003d \"Deleted Category: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final Category targetCategory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DeleteCategoryCommand(Category category) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.targetCategory \u003d category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        model.deleteCategory(targetCategory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CATEGORY_SUCCESS, targetCategory));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                || (other instanceof DeleteCategoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 targetCategory.equals(((DeleteCategoryCommand) other).targetCategory)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \": Deletes the entry identified by the index number used in the displayed entry list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted Entry: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Entry entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        model.deleteEntry(entryToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 6,
      "jessicax941": 5,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteExpenseReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DeleteExpenseReminderCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteExpenseReminder\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \": Deletes the expense reminder identified by the index number used in the displayed reminder list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted Reminder: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DeleteExpenseReminderCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        List\u003cExpenseReminder\u003e lastShownList \u003d model.getFilteredExpenseReminders();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ExpenseReminder entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.deleteExpenseReminder(entryToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || (other instanceof DeleteExpenseReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteExpenseReminderCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 52,
      "rongrongrr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteWishCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DeleteWishCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteWish\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \": Deletes the wish identified by the index number used in the displayed wish list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted Wish: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DeleteWishCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        List\u003cWish\u003e lastShownList \u003d model.getFilteredWishes();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Wish entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.deleteWish(entryToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || (other instanceof DeleteWishCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteWishCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 51,
      "rongrongrr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUDGETS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Edits the details of an existing budget in the finance tracker."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class EditBudgetCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editBudget\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Budget identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \"by the index number used in the displayed Budget list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \"[\" + PREFIX_DESC + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + PREFIX_AMOUNT + \"5.60\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_EDIT_ENTRY_SUCCESS \u003d \"Edited Budget: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final EditBudgetDescriptor editEntryDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @param editEntryDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public EditBudgetCommand(Index index, EditBudgetDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(editEntryDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        this.editEntryDescriptor \u003d new EditBudgetDescriptor(editEntryDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgets();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        Budget entryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        Budget editedEntry \u003d createEditedBudget(entryToEdit, editEntryDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!entryToEdit.isSameEntry(editedEntry) \u0026\u0026 model.hasEntry(editedEntry)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.setEntry(entryToEdit, editedEntry);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.updateFilteredBudgets(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private static Budget createEditedBudget(Budget budgetToEdit, EditBudgetDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        assert budgetToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Category updatedCategory \u003d editEntryDescriptor.getCategory().orElse(budgetToEdit.getCategory());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        Description updatedName \u003d editEntryDescriptor.getDesc().orElse(budgetToEdit.getDesc());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        Date updatedDate \u003d editEntryDescriptor.getDate().orElse(budgetToEdit.getDate());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        Amount updatedAmount \u003d editEntryDescriptor.getAmount().orElse(budgetToEdit.getAmount());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEntryDescriptor.getTags().orElse(budgetToEdit.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Budget(updatedCategory, updatedName, updatedDate, updatedAmount, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!(other instanceof EditBudgetCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        EditBudgetCommand e \u003d (EditBudgetCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                \u0026\u0026 editEntryDescriptor.equals(e.editEntryDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static class EditBudgetDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        private Description desc;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        private Amount amt;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        public EditBudgetDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        public EditBudgetDescriptor(EditBudgetDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            setDesc(toCopy.desc);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            setAmount(toCopy.amt);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return CollectionUtil.isAnyNonNull(category, desc, date, amt, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public void setCategory(Category cat) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            this.category \u003d cat;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        public void setDesc(Description desc) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            this.desc \u003d desc;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        public Optional\u003cDescription\u003e getDesc() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return Optional.ofNullable(desc);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        public void setAmount(Amount amt) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            this.amt \u003d amt;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return Optional.ofNullable(amt);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            if (!(other instanceof EditBudgetDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            EditBudgetDescriptor e \u003d (EditBudgetDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return getDesc().equals(e.getDesc())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 14,
      "rongrongrr": 210,
      "jessicax941": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCategoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Edits a category from guiltTrip();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class EditCategoryCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editCategory\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Category specified \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"by the name of the Category as well as the type of category whether it is expense or income. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_TYPE + \"TYPE OF CATEGORY \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_DESC + \"NEW NAME FOR CATEGORY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_TYPE + \"Expense \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_DESC + \"Food And Drink \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_EDIT_ENTRY_SUCCESS \u003d \"Edited Category: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Field to edit must be provided.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY \u003d \"This category already exists in guiltTrip.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_CATEGORY \u003d \"This category does not exists in the %1$s List \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                                                                + \"of guiltTrip.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final Category toEditCategory;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final EditCategoryDescriptor editCategoryDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param index               of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param editEntryDescriptor details to edit the person with"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public EditCategoryCommand(Category toEditCategory, EditCategoryDescriptor editCategoryDescriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(toEditCategory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(editCategoryDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.toEditCategory \u003d toEditCategory;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.editCategoryDescriptor \u003d new EditCategoryDescriptor(editCategoryDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!model.hasCategory(toEditCategory)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NONEXISTENT_CATEGORY, toEditCategory.categoryType));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ObservableList\u003cCategory\u003e typeOfCategoryList \u003d model.getCategoryList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .determineWhichList(editCategoryDescriptor.getCategoryType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        int indexOfEdit \u003d typeOfCategoryList.indexOf(toEditCategory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Category categoryToEdit \u003d typeOfCategoryList.get(indexOfEdit);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        //tbh alr checks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Category editedCategory \u003d createEditedCategory(categoryToEdit, editCategoryDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        //TODO possible if doesn\u0027t work properly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!categoryToEdit.isSameCategory(editedCategory) || model.hasCategory(editedCategory)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CATEGORY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        model.setCategory(categoryToEdit, editedCategory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENTRY_SUCCESS, editedCategory));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static Category createEditedCategory(Category categoryToEdit,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                                                 EditCategoryDescriptor editCategoryDescriptor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assert categoryToEdit !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String newCategoryName \u003d editCategoryDescriptor.getCategoryName();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String newCategoryType \u003d editCategoryDescriptor.getCategoryType();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Category(newCategoryName, newCategoryType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!(other instanceof EditCategoryCommand)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        EditCategoryCommand e \u003d (EditCategoryCommand) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return toEditCategory.equals(e.toEditCategory)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 editCategoryDescriptor.equals(e.editCategoryDescriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static class EditCategoryDescriptor {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        private String categoryName;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        private String categoryType;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public EditCategoryDescriptor() {}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dandford"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dandford"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dandford"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public EditCategoryDescriptor(EditCategoryDescriptor toCopy) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            setCategoryName(toCopy.categoryName);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            setCategoryType(toCopy.categoryType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dandford"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dandford"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public void setCategoryName(String catName) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            this.categoryName \u003d catName;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public void setCategoryType(String catType) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            this.categoryType \u003d catType;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public String getCategoryName() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return categoryName;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public String getCategoryType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return categoryType;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (!(other instanceof EditCategoryDescriptor)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            EditCategoryDescriptor e \u003d (EditCategoryDescriptor) other;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return getCategoryName().equals(e.getCategoryName())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    \u0026\u0026 getCategoryType().equals(e.getCategoryType());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the entry identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + PREFIX_TYPE + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"[\" + PREFIX_DESC + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"TIME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + PREFIX_AMOUNT + \"5.60\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_EDIT_ENTRY_SUCCESS \u003d \"Edited Entry: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the finance app.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final EditEntryDescriptor editEntryDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param editEntryDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public EditCommand(Index index, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(editEntryDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.editEntryDescriptor \u003d new EditEntryDescriptor(editEntryDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Entry entryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Entry editedEntry \u003d createEditedEntry(entryToEdit, editEntryDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!entryToEdit.isSameEntry(editedEntry) \u0026\u0026 model.hasEntry(editedEntry)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        model.setEntry(entryToEdit, editedEntry);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static Entry createEditedEntry(Entry entryToEdit, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assert entryToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Category updatedCategory \u003d editEntryDescriptor.getCategory().orElse(entryToEdit.getCategory());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Description updatedName \u003d editEntryDescriptor.getDesc().orElse(entryToEdit.getDesc());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Date updatedDate \u003d editEntryDescriptor.getDate().orElse(entryToEdit.getDate());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Amount updatedAmount \u003d editEntryDescriptor.getAmount().orElse(entryToEdit.getAmount());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEntryDescriptor.getTags().orElse(entryToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Entry(updatedCategory, updatedName, updatedDate, updatedAmount, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 editEntryDescriptor.equals(e.editEntryDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static class EditEntryDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        private Description desc;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Date time;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        private Amount amt;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        public EditEntryDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        public EditEntryDescriptor(EditEntryDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            setDesc(toCopy.desc);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            setAmount(toCopy.amt);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setDate(toCopy.time);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return CollectionUtil.isAnyNonNull(category, desc, time, amt, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public void setCategory(Category cat) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            this.category \u003d cat;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        public void setDesc(Description desc) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            this.desc \u003d desc;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        public Optional\u003cDescription\u003e getDesc() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return Optional.ofNullable(desc);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setDate(Date time) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        public void setAmount(Amount amt) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            this.amt \u003d amt;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return Optional.ofNullable(amt);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (!(other instanceof EditEntryDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            EditEntryDescriptor e \u003d (EditEntryDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return getDesc().equals(e.getDesc())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 9,
      "Dandford": 11,
      "jessicax941": 53,
      "rongrongrr": 4,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EditExpenseCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editExpense\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Expense identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"by the index number used in the displayed Expenses list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"[\" + PREFIX_DESC + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"TIME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + PREFIX_AMOUNT + \"5.60\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_EDIT_ENTRY_SUCCESS \u003d \"Edited Expense: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the address book.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final EditExpenseDescriptor editEntryDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param editEntryDescriptor details to edit the person with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public EditExpenseCommand(Index index, EditExpenseDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(editEntryDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.editEntryDescriptor \u003d new EditExpenseDescriptor(editEntryDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenses();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Expense entryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Expense editedEntry \u003d createEditedExpense(entryToEdit, editEntryDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!entryToEdit.isSameEntry(editedEntry) \u0026\u0026 model.hasEntry(editedEntry)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.setEntry(entryToEdit, editedEntry);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.updateFilteredExpenses(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Category updatedCategory \u003d editEntryDescriptor.getCategory().orElse(expenseToEdit.getCategory());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Description updatedName \u003d editEntryDescriptor.getDesc().orElse(expenseToEdit.getDesc());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Date updatedTime \u003d editEntryDescriptor.getTime().orElse(expenseToEdit.getDate());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Amount updatedAmount \u003d editEntryDescriptor.getAmount().orElse(expenseToEdit.getAmount());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEntryDescriptor.getTags().orElse(expenseToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Expense(updatedCategory, updatedName, updatedTime, updatedAmount, updatedTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!(other instanceof EditExpenseCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        EditExpenseCommand e \u003d (EditExpenseCommand) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 editEntryDescriptor.equals(e.editEntryDescriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Description desc;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Amount amt;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public EditExpenseDescriptor() {}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setDesc(toCopy.desc);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setTime(toCopy.date);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setAmount(toCopy.amt);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return CollectionUtil.isAnyNonNull(category, desc, date, amt, tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public void setCategory(Category cat) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            this.category \u003d cat;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setDesc(Description desc) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.desc \u003d desc;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cDescription\u003e getDesc() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.ofNullable(desc);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setTime(Date time) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.date \u003d time;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cDate\u003e getTime() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setAmount(Amount amt) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.amt \u003d amt;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.ofNullable(amt);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return getDesc().equals(e.getDesc())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 205,
      "Dandford": 14,
      "jessicax941": 2,
      "rongrongrr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditExpenseReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSE_REMINDERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseContainsTagPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EditExpenseReminderCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editExpenseReminder\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Expense identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"by the index number used in the displayed Expenses list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + PREFIX_DESC + \"REMINDER_MESSAGE\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + PREFIX_AMOUNT + \"QUOTA \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + PREFIX_AMOUNT + \"5.60\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_EDIT_ENTRY_SUCCESS \u003d \"Edited Expense Reminder: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the address book.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final EditReminderDescriptor editReminderDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index of the expenseReminder in the filtered expense reminder list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param editReminderDescriptor details to edit the person with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public EditExpenseReminderCommand(Index index, EditReminderDescriptor editReminderDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(editReminderDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.editReminderDescriptor \u003d new EditReminderDescriptor(editReminderDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        List\u003cExpenseReminder\u003e lastShownList \u003d model.getFilteredExpenseReminders();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ExpenseReminder entryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ExpenseReminder editedEntry \u003d createEditedExpenseReminder(entryToEdit, editReminderDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!entryToEdit.isSameReminder(editedEntry) \u0026\u0026 model.hasExpenseReminder(editedEntry)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.setExpenseReminder(entryToEdit, editedEntry);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.updateFilteredExpenseReminders(PREDICATE_SHOW_ALL_EXPENSE_REMINDERS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static ExpenseReminder createEditedExpenseReminder(ExpenseReminder expenseToEdit,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                                                               EditReminderDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String updatedMessage \u003d editEntryDescriptor.getDesc().orElse(expenseToEdit.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Long updatedAmount \u003d editEntryDescriptor.getAmount().orElse(expenseToEdit.getQuota());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEntryDescriptor.getTags()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                .orElse(expenseToEdit.getTracker().getPredicate().getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ExpenseTracker tracker \u003d new ExpenseTracker(new ExpenseContainsTagPredicate(updatedTags));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new ExpenseReminder(updatedMessage, updatedAmount, tracker);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!(other instanceof EditExpenseReminderCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        EditExpenseReminderCommand e \u003d (EditExpenseReminderCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 editReminderDescriptor.equals(e.editReminderDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static class EditReminderDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private String desc;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Long amt;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public EditReminderDescriptor() {}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public EditReminderDescriptor(EditReminderDescriptor toCopy) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setDesc(toCopy.desc);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setAmount(toCopy.amt);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(desc, amt, tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setDesc(String desc) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.desc \u003d desc;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cString\u003e getDesc() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.ofNullable(desc);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setAmount(Long amt) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.amt \u003d amt;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cLong\u003e getAmount() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.ofNullable(amt);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (!(other instanceof EditReminderDescriptor)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            EditReminderDescriptor e \u003d (EditReminderDescriptor) other;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return getDesc().equals(e.getDesc())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 196,
      "rongrongrr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INCOMES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EditIncomeCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editIncome\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Income identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"by the index number used in the displayed Incomes list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"[\" + PREFIX_DESC + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"TIME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + PREFIX_AMOUNT + \"5.60\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_EDIT_ENTRY_SUCCESS \u003d \"Edited Income: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the address book.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final EditIncomeDescriptor editEntryDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param editEntryDescriptor details to edit the person with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public EditIncomeCommand(Index index, EditIncomeDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(editEntryDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.editEntryDescriptor \u003d new EditIncomeDescriptor(editEntryDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        List\u003cIncome\u003e lastShownList \u003d model.getFilteredIncomes();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Income entryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Income editedEntry \u003d createEditedIncome(entryToEdit, editEntryDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!entryToEdit.isSameEntry(editedEntry) \u0026\u0026 model.hasEntry(editedEntry)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.setEntry(entryToEdit, editedEntry);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.updateFilteredIncomes(PREDICATE_SHOW_ALL_INCOMES);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static Income createEditedIncome(Income incomeToEdit, EditIncomeDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert incomeToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Category updatedCategory \u003d editEntryDescriptor.getCategory().orElse(incomeToEdit.getCategory());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Description updatedName \u003d editEntryDescriptor.getDesc().orElse(incomeToEdit.getDesc());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Date updatedTime \u003d editEntryDescriptor.getTime().orElse(incomeToEdit.getDate());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Amount updatedAmount \u003d editEntryDescriptor.getAmount().orElse(incomeToEdit.getAmount());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEntryDescriptor.getTags().orElse(incomeToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Income(updatedCategory, updatedName, updatedTime, updatedAmount, updatedTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!(other instanceof EditIncomeCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        EditIncomeCommand e \u003d (EditIncomeCommand) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 editEntryDescriptor.equals(e.editEntryDescriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static class EditIncomeDescriptor {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Description desc;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Amount amt;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public EditIncomeDescriptor() {}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public EditIncomeDescriptor(EditIncomeDescriptor toCopy) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setDesc(toCopy.desc);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setTime(toCopy.date);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setAmount(toCopy.amt);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return CollectionUtil.isAnyNonNull(category, desc, date, amt, tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public void setCategory(Category cat) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            this.category \u003d cat;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setDesc(Description desc) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.desc \u003d desc;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cDescription\u003e getDesc() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.ofNullable(desc);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setTime(Date time) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.date \u003d time;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cDate\u003e getTime() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setAmount(Amount amt) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.amt \u003d amt;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.ofNullable(amt);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (!(other instanceof EditIncomeDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            EditIncomeDescriptor e \u003d (EditIncomeDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return getDesc().equals(e.getDesc())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 205,
      "Dandford": 14,
      "jessicax941": 2,
      "rongrongrr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditWishCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_WISHES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EditWishCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editWish\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Wish identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"by the index number used in the displayed Wishes list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"[\" + PREFIX_DESC + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"TIME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + PREFIX_AMOUNT + \"5.60\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_EDIT_ENTRY_SUCCESS \u003d \"Edited Wish: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final EditWishDescriptor editEntryDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param editEntryDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public EditWishCommand(Index index, EditWishDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(editEntryDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.editEntryDescriptor \u003d new EditWishDescriptor(editEntryDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        List\u003cWish\u003e lastShownList \u003d model.getFilteredWishes();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Wish entryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Wish editedEntry \u003d createEditedWish(entryToEdit, editEntryDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!entryToEdit.isSameEntry(editedEntry) \u0026\u0026 model.hasEntry(editedEntry)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.setEntry(entryToEdit, editedEntry);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.updateFilteredWishes(PREDICATE_SHOW_ALL_WISHES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static Wish createEditedWish(Wish wishToEdit, EditWishDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert wishToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Category updatedCategory \u003d editEntryDescriptor.getCategory().orElse(wishToEdit.getCategory());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Description updatedName \u003d editEntryDescriptor.getDesc().orElse(wishToEdit.getDesc());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Date updatedTime \u003d editEntryDescriptor.getDate().orElse(wishToEdit.getDate());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Amount updatedAmount \u003d editEntryDescriptor.getAmount().orElse(wishToEdit.getAmount());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEntryDescriptor.getTags().orElse(wishToEdit.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Wish(updatedCategory, updatedName, updatedTime, updatedAmount, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!(other instanceof EditWishCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        EditWishCommand e \u003d (EditWishCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 editEntryDescriptor.equals(e.editEntryDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static class EditWishDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Description desc;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Amount amt;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public EditWishDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public EditWishDescriptor(EditWishDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setDesc(toCopy.desc);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setAmount(toCopy.amt);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return CollectionUtil.isAnyNonNull(category, desc, date, amt, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public void setCategory(Category cat) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            this.category \u003d cat;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setDesc(Description desc) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.desc \u003d desc;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cDescription\u003e getDesc() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.ofNullable(desc);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setDate(Date time) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.date \u003d time;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setAmount(Amount amt) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.amt \u003d amt;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.ofNullable(amt);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (!(other instanceof EditWishDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            EditWishDescriptor e \u003d (EditWishDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return getDesc().equals(e.getDesc())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 206,
      "Dandford": 14,
      "jessicax941": 2,
      "rongrongrr": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting guiltTrip() as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.BudgetDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Finds and lists all budgets in finance tracker with description containing any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class FindBudgetCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findBudget\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all budgets whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" mala computer CAP_5.0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final BudgetDescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public FindBudgetCommand(BudgetDescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.updateFilteredBudgets(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                String.format(Messages.MESSAGE_ENTRIES_LISTED_OVERVIEW, model.getFilteredBudgets().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                || (other instanceof FindBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindBudgetCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" mala fish food\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public FindCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        model.updateFilteredEntryList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                String.format(Messages.MESSAGE_ENTRIES_LISTED_OVERVIEW, model.getFilteredEntryList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 1,
      "rongrongrr": 3,
      "jessicax941": 4,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindWishCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.WishDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class FindWishCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findWish\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all wishes whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" mala computer CAP_5.0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final WishDescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public FindWishCommand(WishDescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.updateFilteredWishes(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                String.format(Messages.MESSAGE_ENTRIES_LISTED_OVERVIEW, model.getFilteredWishes().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || (other instanceof FindWishCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindWishCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 40,
      "rongrongrr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Dandford": 1,
      "rongrongrr": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCategoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Lists the available Categories in guiltTrip."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class ListCategoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listCategory\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all categories \\n Income: %1$s \\n Expense: %2$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ObservableList\u003cCategory\u003e incomeCategory \u003d model.getIncomeCategoryList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String incomeCategoryString \u003d incomeCategory.stream().map(e -\u003e e.toString()).collect(Collectors.joining(\",\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ObservableList\u003cCategory\u003e expenseCategory \u003d model.getExpenseCategoryList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String expenseCategoryString \u003d expenseCategory.stream().map(e -\u003e e.toString()).collect(Collectors.joining(\",\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, incomeCategoryString, expenseCategoryString));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all entries\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 3,
      "rongrongrr": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListFontCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Lists all available fonts."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class ListFontCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listFont\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all fonts\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ListFontCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, null, true, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Reverts the {@code model}\u0027s finance tracker to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEQUENCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortSequence;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Sorts the list according to sortType and sortSequence"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an entry to guiltTrip(). \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_SEQUENCE + \"SEQUENCE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_TYPE + \"Time \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_SEQUENCE + \"Ascending \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all entries by %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final SortType type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final SortSequence sequence;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public SortCommand(SortType type, SortSequence sequence) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.sequence \u003d sequence;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        model.sortFilteredEntry(type, sequence);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, type));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 41,
      "rongrongrr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StatisticsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Obtains information about the statistics from Model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class StatisticsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ViewHistory\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Looks up your entries history in guiltTrip(). \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_PERIOD + \"PERIOD \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_TYPE + \"Expense \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            + PREFIX_PERIOD + \"11/9/2019, 21/9/2019 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Display all statistics by %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private ArrayList\u003cDate\u003e listOfPeriods;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public StatisticsCommand(String type) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.listOfPeriods \u003d new ArrayList\u003cDate\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public StatisticsCommand(String type, ArrayList\u003cDate\u003e period) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.listOfPeriods \u003d period;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        //TODO Call Model\u0027s Statistics Method"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, type));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TogglePanelCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.PanelName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Toggles the visibility of a specified panel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class TogglePanelCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"toggle\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggles the visibility the specified panel. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"PARAMETERS: (wishlist) wishlist/wishes/wish/w, (budget) budget/budgets/b \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"or (reminder) reminder/reminders/r. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"EXAMPLE: \" + COMMAND_WORD + \" wishlist\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Toggled visibility of %1$s panel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final PanelName panelName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public TogglePanelCommand(PanelName panelName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.panelName \u003d panelName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, panelName), panelName, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Reverts the {@code model}\u0027s finance tracker to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/WishListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_WISHES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class WishListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"wishList\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all wishes\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        model.updateFilteredWishes(PREDICATE_SHOW_ALL_WISHES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 23,
      "rongrongrr": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAutoExpenseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREQ;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.logic.commands.AddAutoExpenseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.AutoExpense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.util.Frequency;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * Parses input arguments and creates a new AddAutoExpenseCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class AddAutoExpenseCommandParser implements Parser\u003cAddAutoExpenseCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * AddAutoExpenseCommand and returns an AddAutoExpenseCommand object for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AddAutoExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // must haves: desc, freq, amount"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // optional: tag, date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DESC, PREFIX_FREQ, PREFIX_AMOUNT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FREQ, PREFIX_DESC, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAutoExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Description desc \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESC).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Frequency freq \u003d ParserUtil.parseFrequency(argMultimap.getValue(PREFIX_FREQ).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Amount amt \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String categoryName \u003d argMultimap.getValue(PREFIX_CATEGORY).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Date date \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_DATE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        AutoExpense autoExpense \u003d new AutoExpense(new Category(categoryName, \"Expense\"), desc, amt, tagList, freq,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new AddAutoExpenseCommand(autoExpense);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCategoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.AddCategoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Parses input arguments and creates a new AddCategoryCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class AddCategoryCommandParser implements Parser\u003cAddCategoryCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * and returns an AddCategoryCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public AddCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_DESC);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CATEGORY, PREFIX_DESC)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String categoryType \u003d argMultimap.getValue(PREFIX_CATEGORY).get().toLowerCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String categoryName \u003d argMultimap.getValue(PREFIX_DESC).get().toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Category categoryToCreate \u003d new Category(categoryName, categoryType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new AddCategoryCommand(categoryToCreate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_CATEGORY, PREFIX_DESC, PREFIX_AMOUNT, PREFIX_DATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                                            PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE, PREFIX_CATEGORY, PREFIX_DESC, PREFIX_AMOUNT, PREFIX_DATE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String type \u003d argMultimap.getValue(PREFIX_TYPE).get().toLowerCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String categoryName \u003d argMultimap.getValue(PREFIX_CATEGORY).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Description desc \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESC).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Amount amt \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Entry entry;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"expense\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            entry \u003d new Expense(new Category(categoryName, \"Expense\"), desc, date, amt, tagList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"income\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            entry \u003d new Income(new Category(categoryName, \"Income\"), desc, date, amt, tagList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case \"wish\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            entry \u003d new Wish(new Category(categoryName, \"Expense\"), desc, date, amt, tagList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        case \"budget\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            entry \u003d new Budget(new Category(categoryName, \"Expense\"), desc, date, amt, tagList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new ParseException(\"Invalid command\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new AddCommand(entry);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            Prefix... prefixes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 7,
      "yuhongtay": 5,
      "Dandford": 9,
      "jessicax941": 23,
      "rongrongrr": 3,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddExpenseReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.AddExpenseReminderCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseContainsTagPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class AddExpenseReminderCommandParser implements Parser\u003cAddExpenseReminderCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public AddExpenseReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESC, PREFIX_AMOUNT, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESC, PREFIX_AMOUNT, PREFIX_TAG)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    AddExpenseReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Description desc \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESC).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Amount amt \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ExpenseContainsTagPredicate predicate \u003d new ExpenseContainsTagPredicate(tagList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ExpenseTracker tracker \u003d new ExpenseTracker(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ExpenseReminder newreminder \u003d new ExpenseReminder(desc.toString(), (long) amt.value, tracker);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new AddExpenseReminderCommand(newreminder);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.logic.commands.AddAutoExpenseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.logic.commands.AddCategoryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.AddExpenseReminderCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.BudgetListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.logic.commands.ChangeFontCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.DeleteBudgetCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenseReminderCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.DeleteWishCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.EditBudgetCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.EditCategoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.EditExpenseReminderCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.EditIncomeCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.EditWishCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.FindBudgetCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.FindWishCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.ListCategoryCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.logic.commands.ListFontCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.TogglePanelCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.WishListCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, IllegalArgumentException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case AddCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new AddCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case EditCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new EditCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case EditExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return new EditExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case EditIncomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return new EditIncomeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case EditWishCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return new EditWishCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        case EditBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return new EditBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case DeleteCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new DeleteCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case DeleteWishCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return new DeleteWishCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        case DeleteBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return new DeleteBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case FindWishCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return new FindWishCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        case FindBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return new FindBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case ListCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new ListCategoryCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case ListFontCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return new ListFontCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case WishListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return new WishListCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        case BudgetListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return new BudgetListCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case AddExpenseReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return new AddExpenseReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case EditExpenseReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return new EditExpenseReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case DeleteExpenseReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return new DeleteExpenseReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        case AddAutoExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return new AddAutoExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new StatisticsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case TogglePanelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return new TogglePanelCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case ChangeFontCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return new ChangeFontCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 5,
      "yuhongtay": 27,
      "Dandford": 42,
      "jessicax941": 11,
      "rongrongrr": 20,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ChangeFontCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.logic.commands.ChangeFontCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.ui.FontName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Parses input argument and creates a new ChangeFontCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class ChangeFontCommandParser implements Parser\u003cChangeFontCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of ChangeFontCommand and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * returns a ChangeFontCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws ParseException if the user does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ChangeFontCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        FontName fontName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fontName \u003d ParserUtil.parseFontName(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeFontCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new ChangeFontCommand(fontName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * commands"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"typ/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final Prefix PREFIX_DESC \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"cat/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"amt/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final Prefix PREFIX_SEQUENCE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tg/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final Prefix PREFIX_PERIOD \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final Prefix PREFIX_FREQ \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 3,
      "Dandford": 6,
      "jessicax941": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.commands.DeleteBudgetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Parses input arguments and creates a new DeleteBudgetCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class DeleteBudgetCommandParser implements Parser\u003cDeleteBudgetCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteBudgetCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * and returns a DeleteBudgetCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public DeleteBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return new DeleteBudgetCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBudgetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCategoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Parses input arguments and creates a new DeleteCategoryCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DeleteCategoryCommandParser implements Parser\u003cDeleteCategoryCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCategoryCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * and returns a DeleteCategoryCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DeleteCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_DESC);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CATEGORY, PREFIX_DESC)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                                        DeleteCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String categoryType \u003d argMultimap.getValue(PREFIX_CATEGORY).get().toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String categoryName \u003d argMultimap.getValue(PREFIX_DESC).get().toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        //will check if category exist when creating new category"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new DeleteCategoryCommand(new Category(categoryName, categoryType));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteExpenseReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenseReminderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DeleteExpenseReminderCommandParser implements Parser\u003cDeleteExpenseReminderCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DeleteExpenseReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return new DeleteExpenseReminderCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExpenseReminderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteWishCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.DeleteWishCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DeleteWishCommandParser implements Parser\u003cDeleteWishCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DeleteWishCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return new DeleteWishCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteWishCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.commands.EditBudgetCommand.EditBudgetDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.commands.EditBudgetCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Parses input arguments and creates a new EditBudgetCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class EditBudgetCommandParser implements Parser\u003cEditBudgetCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditBudgetCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * and returns an EditBudgetCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public EditBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESC, PREFIX_DATE, PREFIX_AMOUNT, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new ParseException(String.format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                    (MESSAGE_INVALID_COMMAND_FORMAT, EditBudgetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        EditBudgetCommand.EditBudgetDescriptor editBudgetDescriptor \u003d new EditBudgetDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESC).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            editBudgetDescriptor.setDesc(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESC).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            editBudgetDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            editBudgetDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editBudgetDescriptor::setTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!editBudgetDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new ParseException(EditBudgetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return new EditBudgetCommand(index, editBudgetDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 77,
      "jessicax941": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCategoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.EditCategoryCommand.EditCategoryDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.EditCategoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Parses input arguments and creates a new EditCategoryCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class EditCategoryCommandParser implements Parser\u003cEditCategoryCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditExpenseCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * and returns an EditExpenseCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public EditCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_CATEGORY, PREFIX_DESC);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE, PREFIX_CATEGORY, PREFIX_DESC)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String typeOfCategory \u003d argMultimap.getValue(PREFIX_TYPE).get().toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String categoryName \u003d argMultimap.getValue(PREFIX_CATEGORY).get().toLowerCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String newCategoryName \u003d argMultimap.getValue(PREFIX_DESC).get().toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Category categoryToEdit \u003d new Category(categoryName, typeOfCategory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        EditCategoryDescriptor editCategoryDescriptor \u003d new EditCategoryDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        editCategoryDescriptor.setCategoryName(newCategoryName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        editCategoryDescriptor.setCategoryType(typeOfCategory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new EditCategoryCommand(categoryToEdit, editCategoryDescriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_DESC, PREFIX_DATE, PREFIX_AMOUNT, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        EditEntryDescriptor editEntryDescriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESC).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            editEntryDescriptor.setDesc(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESC).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            editEntryDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            editEntryDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            editEntryDescriptor.setDesc(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEntryDescriptor::setTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!editEntryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new EditCommand(index, editEntryDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 15,
      "jessicax941": 20,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditExpenseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Parses input arguments and creates a new EditExpenseCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EditExpenseCommandParser implements Parser\u003cEditExpenseCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditExpenseCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * and returns an EditExpenseCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public EditExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESC, PREFIX_DATE, PREFIX_AMOUNT, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new ParseException(String.format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    (MESSAGE_INVALID_COMMAND_FORMAT, EditExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESC).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            editExpenseDescriptor.setDesc(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESC).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            editExpenseDescriptor.setTime(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            editExpenseDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editExpenseDescriptor::setTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new ParseException(EditExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new EditExpenseCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 77,
      "jessicax941": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditExpenseReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.EditExpenseReminderCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Parses input arguments and creates a new EditExpenseCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EditExpenseReminderCommandParser implements Parser\u003cEditExpenseReminderCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditExpenseCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * and returns an EditExpenseCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public EditExpenseReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESC, PREFIX_AMOUNT, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new ParseException(String.format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    (MESSAGE_INVALID_COMMAND_FORMAT, EditExpenseReminderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        EditExpenseReminderCommand.EditReminderDescriptor editReminderDescriptor \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                new EditExpenseReminderCommand.EditReminderDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESC).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            editReminderDescriptor.setDesc("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESC).get()).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            editReminderDescriptor.setAmount("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    (long) ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()).value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editReminderDescriptor::setTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!editReminderDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new ParseException(EditExpenseReminderCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new EditExpenseReminderCommand(index, editReminderDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditIncomeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.EditIncomeCommand.EditIncomeDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.EditIncomeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Parses input arguments and creates a new EditIncomeCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EditIncomeCommandParser implements Parser\u003cEditIncomeCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditIncomeCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * and returns an EditIncomeCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public EditIncomeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESC, PREFIX_DATE, PREFIX_AMOUNT, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new ParseException(String.format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    (MESSAGE_INVALID_COMMAND_FORMAT, EditIncomeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        EditIncomeCommand.EditIncomeDescriptor editIncomeDescriptor \u003d new EditIncomeDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESC).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            editIncomeDescriptor.setDesc(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESC).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            editIncomeDescriptor.setTime(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            editIncomeDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editIncomeDescriptor::setTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!editIncomeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new ParseException(EditIncomeCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new EditIncomeCommand(index, editIncomeDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 77,
      "jessicax941": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditWishCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.EditWishCommand.EditWishDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.EditWishCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Parses input arguments and creates a new EditWishCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EditWishCommandParser implements Parser\u003cEditWishCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditWishCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * and returns an EditWishCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public EditWishCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESC, PREFIX_DATE, PREFIX_AMOUNT, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new ParseException(String.format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    (MESSAGE_INVALID_COMMAND_FORMAT, EditWishCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        EditWishCommand.EditWishDescriptor editWishDescriptor \u003d new EditWishDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESC).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            editWishDescriptor.setDesc(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESC).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            editWishDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            editWishDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editWishDescriptor::setTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!editWishDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new ParseException(EditWishCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new EditWishCommand(index, editWishDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 77,
      "jessicax941": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.commands.FindBudgetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.BudgetDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Parses input arguments and creates a new FindBudgetCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class FindBudgetCommandParser implements Parser\u003cFindBudgetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindBudgetCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * and returns a FindBudgetCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public FindBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return new FindBudgetCommand(new BudgetDescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindWishCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.commands.FindWishCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.WishDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class FindWishCommandParser implements Parser\u003cFindWishCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindWishCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * and returns a FindWishCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public FindWishCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindWishCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new FindWishCommand(new WishDescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.PanelName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortSequence;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.util.Frequency;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.ui.FontManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.ui.FontName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * and trailing whitespaces will be trimmed. if the specified index is invalid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static Description parseDescription(String desc) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(desc);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String trimmedDesc \u003d desc.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!Description.isValidDescription(trimmedDesc)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new Description(trimmedDesc);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Parses a stringAmt into an Amount."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param stringAmt the amount as a String."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return an Amount."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static Amount parseAmount(String stringAmt) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(stringAmt);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        double amt \u003d Double.parseDouble(stringAmt);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new Amount(amt);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Parses a date in String to Date."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param date the date as a String."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return the specified date as Date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static Date parseDate(String date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new Date(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Parses a time in {@code Optional}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param time the time as a String."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return the specified time as Time."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static Date parseTime(Optional\u003cString\u003e time) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return time.isPresent() ? new Date(time.get()) : Date.now();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Parses a time in String to ArrayList."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param period the time as a String."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the specified time as Date."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static ArrayList\u003cDate\u003e parsePeriod(String period) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(period);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String[] splitStartAndEnd \u003d period.split(\",\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ArrayList\u003cDate\u003e listOfPeriods \u003d new ArrayList\u003cDate\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (splitStartAndEnd.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            listOfPeriods.add(new Date(period));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else if (splitStartAndEnd.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            listOfPeriods.add(new Date(splitStartAndEnd[0]));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            listOfPeriods.add(new Date(splitStartAndEnd[1]));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            //TODO"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return listOfPeriods;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Parses a frequency from String to Frequency."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param stringFreq the frequency as a String."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return the specified frequency as Frequency."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static Frequency parseFrequency(String stringFreq) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        requireNonNull(stringFreq);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return Frequency.parse(stringFreq);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Parses a type of sorting in String to SortType."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param type the time as a String."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the specified time as SortType."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static SortType parseSortType(String type) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new SortType(type);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Parses a type of sequencesorting in String to SortSequence."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param sequence the sequence of sorting as a String."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the specified time as SortSequence."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static SortSequence parseSortSequence(String sequence) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(sequence);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new SortSequence(sequence);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Parses {@code String panelName} into a {@code PanelName}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static PanelName parsePanelName(String panelName) throws ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(panelName);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String trimmedPanelName \u003d panelName.trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!PanelName.isValidPanelName(trimmedPanelName)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new ParseException(PanelName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // TODO rewrite this"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // standardise panel names"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArrayList\u003cString\u003e aliasesForWishlist \u003d new ArrayList\u003c\u003e(Arrays.asList(\"wishlist\", \"wish\", \"wishes\", \"w\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (aliasesForWishlist.contains(trimmedPanelName)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            trimmedPanelName \u003d \"wishlist\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArrayList\u003cString\u003e aliasesForBudget \u003d new ArrayList\u003c\u003e(Arrays.asList(\"budget\", \"budgets\", \"b\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (aliasesForBudget.contains(trimmedPanelName)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            trimmedPanelName \u003d \"budget\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArrayList\u003cString\u003e aliasesForReminder \u003d new ArrayList\u003c\u003e(Arrays.asList(\"reminder\", \"reminders\", \"r\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (aliasesForReminder.contains(trimmedPanelName)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            trimmedPanelName \u003d \"reminder\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new PanelName(trimmedPanelName);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Parses {@code String fontName} into a {@code FontName}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static FontName parseFontName(String fontName) throws ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(fontName);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String trimmedFontName \u003d fontName.trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!FontManager.isValidFontName(trimmedFontName)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new ParseException(FontManager.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new FontName(fontName);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 37,
      "yuhongtay": 1,
      "Dandford": 38,
      "jessicax941": 66,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ARGUMENT_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEQUENCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortSequence;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public SortCommand parse(String args) throws ParseException, IllegalArgumentException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_SEQUENCE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_TYPE, PREFIX_SEQUENCE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            SortType type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            type \u003d ParserUtil.parseSortType(argMultimap.getValue(PREFIX_TYPE).get().toLowerCase());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            SortSequence seq \u003d ParserUtil.parseSortSequence(argMultimap.getValue(PREFIX_SEQUENCE).get().toLowerCase());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new SortCommand(type, seq);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (IllegalArgumentException iea) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new IllegalArgumentException(String.format(MESSAGE_INVALID_ARGUMENT_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                                                               SortType.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Dandford": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StatisticsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Parses input arguments and creates a new HistoryCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class StatisticsCommandParser implements Parser\u003cStatisticsCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HistoryCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * and returns a HistoryCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public StatisticsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_PERIOD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String type \u003d argMultimap.getValue(PREFIX_TYPE).get().toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_PERIOD).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ArrayList\u003cDate\u003e period \u003d ParserUtil.parsePeriod(argMultimap.getValue(PREFIX_PERIOD).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new StatisticsCommand(type, period);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new StatisticsCommand(type);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TogglePanelCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.logic.commands.TogglePanelCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.PanelName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Parses input arguments and creates a new TogglePanelCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class TogglePanelCommandParser implements Parser\u003cTogglePanelCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TogglePanelCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * and returns a TogglePanelCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public TogglePanelCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        PanelName panelName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            panelName \u003d ParserUtil.parsePanelName(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TogglePanelCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new TogglePanelCommand(panelName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXISTING_ENTRIES_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NONEXISTENT_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.AutoExpense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.AutoExpenseList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.BudgetList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.CategoryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.ExpenseList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseReminderList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseTracker;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseTrackerList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.IncomeList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.UniqueEntryList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.WishList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.WishReminder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.WishReminderList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * Wraps all data at the address-book level Duplicates are not allowed (by"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * .isSamePerson comparison)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final CategoryList categoryList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final UniqueEntryList entries;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final ExpenseList expenses;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final IncomeList incomes;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final BudgetList budgets;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final WishList wishes;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private final AutoExpenseList autoExpenses;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final ExpenseReminderList expenseReminders;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final ExpenseTrackerList expenseTrackers;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final WishReminderList wishReminders;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * sometimes used to avoid duplication between constructors. See"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * ways to avoid duplication among constructors."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        categoryList \u003d new CategoryList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        expenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        incomes \u003d new IncomeList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        budgets \u003d new BudgetList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        wishes \u003d new WishList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        autoExpenses \u003d new AutoExpenseList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseReminders \u003d new ExpenseReminderList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseTrackers \u003d new ExpenseTrackerList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        wishReminders \u003d new WishReminderList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Replaces the contents of entries with {@code entry}. {@code entry} must not"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * contain duplicate entries."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void setCategories(List\u003cCategory\u003e expenseCategories, List\u003cCategory\u003e incomeCategories) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.categoryList.setEntries(expenseCategories, incomeCategories);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.entries.setEntries(entries);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.expenses.setEntries(expenses);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setIncomes(List\u003cIncome\u003e incomes) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.incomes.setEntries(incomes);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setWishes(List\u003cWish\u003e wishes) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.wishes.setEntries(wishes);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void setAutoExpenses(List\u003cAutoExpense\u003e autoExpenses) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.autoExpenses.setEntries(autoExpenses);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setExpenseReminders(List\u003cExpenseReminder\u003e expenseReminders) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.expenseReminders.setEntries(expenseReminders);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setExpenseTrackers(List\u003cExpenseTracker\u003e trackers) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.expenseTrackers.setEntries(trackers);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        this.budgets.setEntries(budgets);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setWishReminders(List\u003cWishReminder\u003e wishReminders) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.wishReminders.setEntries(wishReminders);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * updates the status of all reminders in ExpenseReminderList"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void updateExpenseReminders() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseReminders.updateList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * When Wishes and WishReminders are read from list, new instances are created."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * As such editing a wish after loading a file may result in WishReminder not updating wish accordingly."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * This attempts to address that."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void mapWishToReminders() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (WishReminder reminder : wishReminders) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            for (Wish wish : wishes) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                if ((reminder.getWish()).equals(wish)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    reminder.setWish(wish);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        setCategories(newData.getExpenseCategoryList(), newData.getIncomeCategoryList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setEntries(newData.getEntryList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setIncomes(newData.getIncomeList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        setWishes(newData.getWishList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        setBudgets(newData.getBudgetList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        setAutoExpenses(newData.getAutoExpenseList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        setExpenseReminders(newData.getExpenseReminderList());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        setExpenseTrackers(newData.getExpenseTrackerList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        setWishReminders(newData.getWishReminderList());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        mapWishToReminders();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if a entry with the same identity as {@code entry} exists in the"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean hasCategory(Category category) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return categoryList.contains(category);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns true if a entry with the same identity as {@code entry} exists in the"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return entries.contains(entry);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns true if a reminder with the same identity as {@code reminder} exists"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean hasExpenseReminder(ExpenseReminder reminder) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return expenseReminders.contains(reminder);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Returns true if a reminder with the same identity as {@code reminder} exists in the address book."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean hasWishReminder(WishReminder reminder) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return wishReminders.contains(reminder);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void addCategory(Category category) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        categoryList.add(category);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entries.add(entry);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Adds a specified Expense to the finance app."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * * @param expense the specified Expense to be added."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        checkArgument(hasCategory(expense.getCategory()), MESSAGE_INVALID_CATEGORY);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entries.add(expense);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        expenses.add(expense);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Adds the specified Income to the finance app. Additional check for starting stage loading from data file."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param income the specified Income to be added."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void addIncome(Income income) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        checkArgument(hasCategory(income.getCategory()), MESSAGE_INVALID_CATEGORY);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entries.add(income);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        incomes.add(income);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Adds the specified Income to the finance app."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @param budget the specified Income to be added."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        checkArgument(hasCategory(budget.getCategory()), MESSAGE_INVALID_CATEGORY);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        entries.add(budget);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        budgets.add(budget);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Adds the specified Wish to the finance app."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * carries out check if category is valid here."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param wish the specified Wish to be added."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void addWish(Wish wish) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        checkArgument(hasCategory(wish.getCategory()), MESSAGE_INVALID_CATEGORY);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        entries.add(wish);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        wishes.add(wish);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void addExpenseTracker(ExpenseTracker tracker) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseTrackers.add(tracker);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Adds the specified ExpenseTrackerReminder to the app."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param expenseReminder the specified ExpenseTracker to be added."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void addExpenseReminder(ExpenseReminder expenseReminder) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseReminders.add(expenseReminder);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        addExpenseTracker(expenseReminder.getTracker());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Adds the specified ExpenseTrackerReminder to the app."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param wishReminder the specified ExpenseTracker to be added."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void addWishReminder(WishReminder wishReminder) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        wishReminders.add(wishReminder);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Adds the specified AutoExpense to the finance app."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param autoExpense the specified AutoExpense to be added."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void addAutoExpense(AutoExpense autoExpense) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        entries.add(autoExpense);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        autoExpenses.add(autoExpense);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    //TODO:(MC) Is there a better way about this? ALso update the rest"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param oldCategoryName is the original CategoryName which is about to be edited"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param newCategoryName is the new CategoryName which is about to replace the original"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param categoryType is the type of the Category"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Checks all the current entries for entries that have the same category and create an editedEntry."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void editCategoryNamesToNewName(String oldCategoryName, String newCategoryName, String categoryType) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (categoryType.equalsIgnoreCase(\"Income\")) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ObservableList\u003cIncome\u003e tocheckIncomeList \u003d this.getIncomeList();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            List\u003cIncome\u003e filteredListOfIncome \u003d tocheckIncomeList.stream().filter(t -\u003e t.getCategory().categoryName"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    .equalsIgnoreCase(oldCategoryName)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            filteredListOfIncome.stream().forEach(t -\u003e setIncome(t, t.modifiedCategory(newCategoryName)));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ObservableList\u003cExpense\u003e toCheckExpenseList \u003d this.getExpenseList();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            List\u003cExpense\u003e filteredListOfExpense \u003d toCheckExpenseList.stream().filter(t -\u003e t.getCategory().categoryName"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    .equalsIgnoreCase(oldCategoryName)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            filteredListOfExpense.stream().forEach(t -\u003e setExpense(t, t.modifiedCategory(newCategoryName)));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Replaces the given category with the new editedCategory. Modifies all the categories in the list of entries"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * that corresponds to changed category."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void setCategory(Category target, Category editedCategory) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(editedCategory);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String oldCategoryName \u003d target.categoryName;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String newCategoryName \u003d editedCategory.categoryName;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        categoryList.setCategory(target, editedCategory);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String categoryType \u003d target.categoryType;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        editCategoryNamesToNewName(oldCategoryName, newCategoryName, categoryType);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Replaces the given person {@code target} in the list with"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * {@code editedPerson}. {@code target} must exist in the address book. The"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * person identity of {@code editedPerson} must not be the same as another"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * existing person in the address book."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entries.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Replaces the given Expense {@code target} in the list with"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * {@code editedEntry}. {@code target} must exist in the address book. The"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * expense identity of {@code editedEntry} must not be the same as another"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * existing expense in the address book."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setExpense(Expense target, Expense editedEntry) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenses.setExpense(target, editedEntry);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entries.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Replaces the given Income {@code target} in the list with"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * {@code editedIncome}. {@code target} must exist in the address book. The"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * income identity of {@code editedEntry} must not be the same as another"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * existing income in the address book."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setIncome(Income target, Income editedEntry) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        incomes.setIncome(target, editedEntry);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entries.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Replaces the given Income {@code target} in the list with"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * {@code editedIncome}. {@code target} must exist in the address book. The"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * income identity of {@code editedEntry} must not be the same as another"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * existing income in the address book."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setWish(Wish target, Wish editedEntry) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        wishes.setWish(target, editedEntry);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entries.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void setExpenseTracker(ExpenseTracker target, ExpenseTracker editedEntry) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseTrackers.setTracker(target, editedEntry);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Replaces the given ExpenseTracker {@code target} in the list with {@code editedTracker}."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * The ExpenseTracer identity of {@code editedTracker}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * must not be the same as another existing ExpenseTracker in the address book."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setExpenseReminder(ExpenseReminder target, ExpenseReminder editedEntry) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseReminders.setExpenseReminder(target, editedEntry);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        setExpenseTracker(target.getTracker(), editedEntry.getTracker());"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Replaces the given Budget {@code target} in the list with {@code editedBudget}."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * {@code target} must exist in the finance tracker."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * The budget identity of {@code editedEntry} must not be the same as another existing budget"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * in the finance tracker."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void setBudget(Budget target, Budget editedEntry) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        budgets.setBudget(target, editedEntry);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Replaces the given ExpenseTracker {@code target} in the list with {@code editedTracker}."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * The ExpenseTracer identity of {@code editedTracker}"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * must not be the same as another existing ExpenseTracker in the address book."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setWishReminder(WishReminder target, WishReminder editedEntry) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        wishReminders.setWishReminder(target, editedEntry);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Replaces the given AutoExpense {@code target} in the list with"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * {@code editedIncome}. {@code target} must exist in the address book. The"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * income identity of {@code editedEntry} must not be the same as another"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * existing income in the address book."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void setAutoExpense(AutoExpense target, AutoExpense editedEntry) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        autoExpenses.setAutoExpense(target, editedEntry);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        entries.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns the truth value for whether the Category has any entries that currently exist in guiltTrip."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean categoryHasAnyEntries(Category category) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (category.categoryType.equalsIgnoreCase(\"Income\")) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ObservableList\u003cIncome\u003e tocheckIncomeList \u003d this.getIncomeList();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return tocheckIncomeList.stream().anyMatch(t -\u003e t.getCategory().categoryName"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    .equalsIgnoreCase(category.categoryName));"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ObservableList\u003cExpense\u003e toCheckExpenseList \u003d this.getExpenseList();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            boolean hasEntriesInExpenseList \u003d toCheckExpenseList.stream().anyMatch(t -\u003e t.getCategory().categoryName"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    .equalsIgnoreCase(category.categoryName));"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ObservableList\u003cBudget\u003e tocheckBudgetList \u003d this.getBudgetList();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            boolean hasEntriesInBudgetList \u003d tocheckBudgetList.stream().anyMatch(t -\u003e t.getCategory().categoryName"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    .equalsIgnoreCase(category.categoryName));"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ObservableList\u003cWish\u003e toCheckWish \u003d this.getWishList();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            boolean hasEntriesInWishList \u003d toCheckWish.stream().anyMatch(t -\u003e t.getCategory().categoryName"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    .equalsIgnoreCase(category.categoryName));"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ObservableList\u003cAutoExpense\u003e toCheckAutoExpense \u003d this.getAutoExpenseList();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            boolean hasEntriesInAutoList \u003d toCheckAutoExpense.stream().anyMatch(t -\u003e t.getCategory().categoryName"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    .equalsIgnoreCase(category.categoryName));"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return hasEntriesInBudgetList || hasEntriesInExpenseList || hasEntriesInWishList || hasEntriesInAutoList;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void removeCategory(Category category) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        checkArgument(!categoryHasAnyEntries(category), MESSAGE_EXISTING_ENTRIES_CATEGORY);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        categoryList.remove(category);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void removeEntry(Entry key) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Removes {@code key} from this {@code expenses}. {@code key} must exist in the"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Removes {@code key} from this {@code incomes}. {@code key} must exist in the"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void removeIncome(Income key) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        incomes.remove(key);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Removes {@code key} from this {@code wishes}. {@code key} must exist in the"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void removeWish(Wish key) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        checkArgument(hasCategory(key.getCategory()), MESSAGE_NONEXISTENT_CATEGORY);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        wishes.remove(key);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Removes {@code key} from this {@code budgets}."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void removeBudget(Budget key) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        budgets.remove(key);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Removes {@code key} from this {@code autoExpenses}. {@code key} must exist in"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * the address book."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void removeAutoExpense(AutoExpense key) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        autoExpenses.remove(key);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Removes {@code key} from this {@code expensetracker}."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void removeExpenseTracker(ExpenseTracker key) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseTrackers.remove(key);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Removes {@code key} from this {@code wishes}."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void removeExpenseReminder(ExpenseReminder key) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseReminders.remove(key);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        removeExpenseTracker(key.getTracker());"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void removeWishReminder(WishReminder key) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        wishReminders.remove(key);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Notifies listeners that the finance tracker has been modified."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return entries.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public CategoryList getCategoryList() {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return categoryList;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ObservableList\u003cCategory\u003e getIncomeCategoryList() {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return categoryList.getInternalListForIncome();"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ObservableList\u003cCategory\u003e getExpenseCategoryList() {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return categoryList.getInternalListForOtherEntries();"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ObservableList\u003cEntry\u003e getEntryList() {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return entries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cIncome\u003e getIncomeList() {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return incomes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cWish\u003e getWishList() {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return wishes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return budgets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public ObservableList\u003cAutoExpense\u003e getAutoExpenseList() {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return autoExpenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cExpenseReminder\u003e getExpenseReminderList() {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return expenseReminders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cExpenseTracker\u003e getExpenseTrackerList() {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return expenseTrackers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cWishReminder\u003e getWishReminderList() {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return wishReminders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                        \u0026\u0026 entries.equals(((AddressBook) other).entries));"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return entries.hashCode();"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 79,
      "yuhongtay": 200,
      "Dandford": 131,
      "rongrongrr": 91,
      "jessicax941": 55,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.AutoExpense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.CategoryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortSequence;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.WishReminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    Predicate\u003cEntry\u003e PREDICATE_SHOW_ALL_ENTRIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    Predicate\u003cIncome\u003e PREDICATE_SHOW_ALL_INCOMES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    Predicate\u003cWish\u003e PREDICATE_SHOW_ALL_WISHES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    Predicate\u003cBudget\u003e PREDICATE_SHOW_ALL_BUDGETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    Predicate\u003cAutoExpense\u003e PREDICATE_SHOW_ALL_AUTOEXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    Predicate\u003cExpenseReminder\u003e PREDICATE_SHOW_ALL_EXPENSE_REMINDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    boolean hasCategory(Category category);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    boolean hasEntry(Entry entry);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    boolean hasExpenseReminder(ExpenseReminder reminder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Deletes the given category. The category must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    void deleteCategory(Category target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Deletes the given entry. The entry must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    void deleteEntry(Entry target);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Deletes the given expense. The entry must exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void deleteExpense(Expense target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Deletes the given income. The income must exist in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void deleteIncome(Income target);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Deletes the given wish. The wish must exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void deleteWish(Wish target);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void deleteExpenseReminder(ExpenseReminder target);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Deletes the given budget."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * The budget must exist in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    void deleteBudget(Budget target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Deletes the given AutoExpense. The entry must exist in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    void deleteAutoExpense(AutoExpense target);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Adds the given person. {@code person} must not already exist in the address"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    void addEntry(Entry entry);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    void addCategory(Category category);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void addIncome(Income income);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void addWish(Wish wish);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    void addBudget(Budget budget);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    void addAutoExpense(AutoExpense autoExpense);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void addExpenseReminder(ExpenseReminder expenseReminder);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    void setCategory(Category target, Category editedCategory);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Replaces the given entry {@code target} with {@code editedEntry}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * {@code target} must exist in the address book. The entry identity of"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * {@code editedEntry} must not be the same as another existing entry in the"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    void setEntry(Entry target, Entry editedEntry);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void setExpenseReminder(ExpenseReminder target, ExpenseReminder editedEntry);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    CategoryList getCategoryList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /** Returns an unmodifiable view of the income category list */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    ObservableList\u003cCategory\u003e getIncomeCategoryList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /** Returns an unmodifiable view of the expense category list */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    ObservableList\u003cCategory\u003e getExpenseCategoryList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /** Returns an unmodifiable view of the filtered entry list */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredEntryList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expenditure list */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenses();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /** Returns an unmodifiable view of the filtered entry list */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ObservableList\u003cIncome\u003e getFilteredIncomes();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /** Returns an unmodifiable view of filtered expense and income list */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredExpensesAndIncomes();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /** Returns an unmodifiable view of the filtered entry list */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ObservableList\u003cWish\u003e getFilteredWishes();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /** Returns an unmodifiable view of the filtered budget list */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgets();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expenditure list */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    ObservableList\u003cAutoExpense\u003e getFilteredAutoExpenses();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense reminder list */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ObservableList\u003cExpenseReminder\u003e getFilteredExpenseReminders();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    ObservableList\u003cWishReminder\u003e getFilteredWishReminders();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Updates the filter of the filtered entry list to filter by the given"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * {@code predicate}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void updateFilteredExpenses(Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void updateFilteredIncomes(Predicate\u003cIncome\u003e predicate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void updateFilteredWishes(Predicate\u003cWish\u003e predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    void updateFilteredBudgets(Predicate\u003cBudget\u003e predicate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns true if the model has previous finance tracker states to restore."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns true if the model has undone finance tracker states to restore."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Restores the model\u0027s finance tracker to its previous state."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Restores the model\u0027s finance tracker to its previously undone state."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Saves the current finance tracker state for undo/redo"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    void updateFilteredAutoExpenses(Predicate\u003cAutoExpense\u003e predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    void sortFilteredEntry(SortType comparator, SortSequence sequence);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    void updateFilteredExpenseReminders(Predicate\u003cExpenseReminder\u003e predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void updateFilteredWishReminders(Predicate\u003cWishReminder\u003e predicate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 29,
      "yuhongtay": 53,
      "Dandford": 25,
      "rongrongrr": 43,
      "jessicax941": 11,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.AutoExpense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.CategoryList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseTrackerManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortSequence;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.WishReminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.util.EntryComparator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final SortType sortByTime \u003d new SortType(\"time\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final SortSequence sortByAsc \u003d new SortSequence(\"descending\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final ObservableList\u003cCategory\u003e incomeCategoryList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final ObservableList\u003cCategory\u003e expenseCategoryList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final FilteredList\u003cEntry\u003e filteredEntries;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final FilteredList\u003cIncome\u003e filteredIncomes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final FilteredList\u003cWish\u003e filteredWishes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final FilteredList\u003cBudget\u003e filteredBudgets;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private final FilteredList\u003cAutoExpense\u003e filteredAutoExpenses;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final SortedList\u003cEntry\u003e sortedEntryList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final FilteredList\u003cExpenseReminder\u003e filteredExpenseReminders;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final ExpenseTrackerManager expenseTrackers;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final FilteredList\u003cWishReminder\u003e filteredWishReminders;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        incomeCategoryList \u003d versionedAddressBook.getIncomeCategoryList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        expenseCategoryList \u003d versionedAddressBook.getExpenseCategoryList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(versionedAddressBook.getExpenseList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        filteredIncomes \u003d new FilteredList\u003c\u003e(versionedAddressBook.getIncomeList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        filteredWishes \u003d new FilteredList\u003c\u003e(versionedAddressBook.getWishList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        filteredBudgets \u003d new FilteredList\u003c\u003e(versionedAddressBook.getBudgetList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        filteredAutoExpenses \u003d new FilteredList\u003c\u003e(versionedAddressBook.getAutoExpenseList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        sortedEntryList \u003d new SortedList\u003c\u003e(versionedAddressBook.getEntryList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        sortedEntryList.setComparator(new EntryComparator(sortByTime, sortByAsc));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        filteredEntries \u003d new FilteredList\u003c\u003e(sortedEntryList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        filteredExpenseReminders \u003d new FilteredList\u003c\u003e(versionedAddressBook.getExpenseReminderList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        filteredWishReminders \u003d new FilteredList\u003c\u003e(versionedAddressBook.getWishReminderList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        expenseTrackers \u003d new ExpenseTrackerManager(versionedAddressBook.getExpenseTrackerList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseTrackers.track(filteredExpenses);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.updateExpenseReminders();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean hasCategory(Category category) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return versionedAddressBook.hasCategory(category);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return versionedAddressBook.hasEntry(entry);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean hasExpenseReminder(ExpenseReminder reminder) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return versionedAddressBook.hasExpenseReminder(reminder);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void deleteCategory(Category target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        versionedAddressBook.removeCategory(target);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void deleteEntry(Entry target) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.removeEntry(target);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (target instanceof Expense) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.removeExpense((Expense) target);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            expenseTrackers.track(filteredExpenses);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.updateExpenseReminders();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else if (target instanceof Income) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.removeIncome((Income) target);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else if (target instanceof Wish) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.removeWish((Wish) target);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        } else if (target instanceof Budget) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.removeBudget((Budget) target);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.removeEntry(target);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.removeExpense(target);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseTrackers.track(filteredExpenses);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.updateExpenseReminders();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void deleteIncome(Income target) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.removeEntry(target);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.removeIncome(target);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void deleteWish(Wish target) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.removeEntry(target);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.removeWish(target);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.removeEntry(target);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.removeBudget(target);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void deleteAutoExpense(AutoExpense target) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.removeEntry(target);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.removeAutoExpense(target);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void deleteExpenseReminder(ExpenseReminder target) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.removeExpenseReminder(target);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.addEntry(entry);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (entry instanceof Expense) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.addExpense((Expense) entry);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            expenseTrackers.track(filteredExpenses);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.updateExpenseReminders();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else if (entry instanceof Income) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.addIncome((Income) entry);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else if (entry instanceof Wish) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.addWish((Wish) entry);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        } else if (entry instanceof Budget) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.addBudget((Budget) entry);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        sortFilteredEntry(sortByTime, sortByAsc);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void addCategory(Category category) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        versionedAddressBook.addCategory(category);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.addExpense(expense);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        sortFilteredEntry(sortByTime, sortByAsc);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseTrackers.track(filteredExpenses);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.updateExpenseReminders();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void addIncome(Income income) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.addIncome(income);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        sortFilteredEntry(sortByTime, sortByAsc);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void addWish(Wish wish) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.addWish(wish);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        sortFilteredEntry(sortByTime, sortByAsc);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void addAutoExpense(AutoExpense autoExpense) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.addAutoExpense(autoExpense);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.addBudget(budget);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void addExpenseReminder(ExpenseReminder expenseReminder) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.addExpenseReminder(expenseReminder);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseTrackers.track(filteredExpenses);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.updateExpenseReminders();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void setCategory(Category target, Category editedCategory) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireAllNonNull(target, editedCategory);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        versionedAddressBook.setCategory(target, editedCategory);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (target instanceof Expense) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.setExpense((Expense) target, (Expense) editedEntry);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            expenseTrackers.track(filteredExpenses);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.updateExpenseReminders();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else if (target instanceof Income) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.setIncome((Income) target, (Income) editedEntry);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else if (target instanceof Wish) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.setWish((Wish) target, (Wish) editedEntry);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        } else if (target instanceof Budget) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            versionedAddressBook.setBudget((Budget) target, (Budget) editedEntry);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setExpenseReminder(ExpenseReminder target, ExpenseReminder editedEntry) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.setExpenseReminder(target, editedEntry);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseTrackers.track(filteredExpenses);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.updateExpenseReminders();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public CategoryList getCategoryList() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return versionedAddressBook.getCategoryList();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Entry} backed by the"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * internal list of {@code versionedAddressBook}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ObservableList\u003cCategory\u003e getExpenseCategoryList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return expenseCategoryList;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ObservableList\u003cCategory\u003e getIncomeCategoryList() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return incomeCategoryList;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return filteredEntries;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenses() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cIncome\u003e getFilteredIncomes() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return filteredIncomes;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredExpensesAndIncomes() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new FilteredList\u003c\u003e(filteredEntries,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            entry -\u003e entry instanceof Expense || entry instanceof Income);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cWish\u003e getFilteredWishes() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return filteredWishes;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgets() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return filteredBudgets;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public ObservableList\u003cAutoExpense\u003e getFilteredAutoExpenses() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return filteredAutoExpenses;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cExpenseReminder\u003e getFilteredExpenseReminders() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return filteredExpenseReminders;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ObservableList\u003cWishReminder\u003e getFilteredWishReminders() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return filteredWishReminders;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * return List of Entries matching condition."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param predicate predicate to filter"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        filteredEntries.setPredicate(predicate);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void sortFilteredEntry(SortType c, SortSequence sequence) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        sortedEntryList.setComparator(new EntryComparator(c, sequence));"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void updateFilteredExpenses(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void updateFilteredIncomes(Predicate\u003cIncome\u003e predicate) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        filteredIncomes.setPredicate(predicate);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void updateFilteredWishes(Predicate\u003cWish\u003e predicate) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        filteredWishes.setPredicate(predicate);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void updateFilteredBudgets(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        filteredBudgets.setPredicate(predicate);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * return list of reminders matching this condition."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @param predicate condition to be matched."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void updateFilteredAutoExpenses(Predicate\u003cAutoExpense\u003e predicate) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        filteredAutoExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * return list of reminders matching this condition."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param predicate condition to be matched."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void updateFilteredExpenseReminders(Predicate\u003cExpenseReminder\u003e predicate) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        filteredExpenseReminders.setPredicate(predicate);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void updateFilteredWishReminders(Predicate\u003cWishReminder\u003e predicate) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        filteredWishReminders.setPredicate(predicate);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook) \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 filteredEntries.equals(other.filteredEntries);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 21,
      "yuhongtay": 116,
      "Dandford": 64,
      "rongrongrr": 114,
      "jessicax941": 24,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.AutoExpense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.CategoryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.WishReminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns an unmodifiable view of the persons list. This list will not contain"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * any duplicate persons."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    void addCategory(Category category);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    CategoryList getCategoryList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    ObservableList\u003cCategory\u003e getExpenseCategoryList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    ObservableList\u003cCategory\u003e getIncomeCategoryList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    ObservableList\u003cEntry\u003e getEntryList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ObservableList\u003cIncome\u003e getIncomeList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ObservableList\u003cWish\u003e getWishList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    ObservableList\u003cBudget\u003e getBudgetList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    ObservableList\u003cAutoExpense\u003e getAutoExpenseList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ObservableList\u003cExpenseReminder\u003e getExpenseReminderList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ObservableList\u003cExpenseTracker\u003e getExpenseTrackerList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ObservableList\u003cWishReminder\u003e getWishReminderList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 5,
      "yuhongtay": 14,
      "Dandford": 11,
      "rongrongrr": 6,
      "jessicax941": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * {@code AddressBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class VersionedAddressBook extends AddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final List\u003cReadOnlyAddressBook\u003e addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public VersionedAddressBook(ReadOnlyAddressBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        addressBookStateList.add(new AddressBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Saves a copy of the current {@code AddressBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        addressBookStateList.add(new AddressBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!(other instanceof VersionedAddressBook)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        VersionedAddressBook otherVersionedAddressBook \u003d (VersionedAddressBook) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs an {@code Amount}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param amount A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Amount(double amount) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        //checkArgument(isValidPhone(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        value \u003d amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //public static boolean isValidAmount(int test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //    return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return value + \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                || (other instanceof Amount) // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Amount) other).value; // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/AutoExpense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.util.Frequency;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * An expense factory, basically."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class AutoExpense extends Entry {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static final String ENTRY_TYPE \u003d \"AutoExpense\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private final Frequency freq;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Date lastTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AutoExpense(Category category, Description desc, Amount amount, Set\u003cTag\u003e tags, Frequency freq, Date date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        super(category, desc, date, amount, tags);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.lastTime \u003d this.getDate();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.freq \u003d freq;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return this.ENTRY_TYPE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Get the next time it is supposed to but have not occurred yet."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Date getNextTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return lastTime.plus(freq);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Get the last time it created a Expense object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Date getLastTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return lastTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Gets the frequency."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Frequency getFrequency() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return freq;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param lastTime the lastTime to set"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void setLastTime(Date lastTime) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.lastTime \u003d lastTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns true if both expenses have the same data fields. This defines a"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * stronger notion of equality between two entries."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // if not (entry and entry.getType() \u003d\u003d \"AutoExpense\") then return false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (!(other instanceof Entry)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } else if (!(other instanceof AutoExpense)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        AutoExpense otherAutoExpense \u003d (AutoExpense) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return otherAutoExpense.getDesc().equals(getDesc()) \u0026\u0026 otherAutoExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                \u0026\u0026 otherAutoExpense.getTags().equals(getTags())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                \u0026\u0026 otherAutoExpense.getFrequency().equals(getFrequency())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                \u0026\u0026 otherAutoExpense.getDate().equals(getDate());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        builder.append(ENTRY_TYPE + \": \").append(getDesc()).append(\" Amount: \").append(getAmount()).append(\" Tags: \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        builder.append(\"( every \" + freq + \", last updated:\" + getLastTime() + \")\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 92,
      "yuhongtay": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/AutoExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * allow nulls. A person is considered unique by comparing using"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * {@code Person#isSamePerson(Person)}. As such, adding and updating of persons"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * uses Person#isSamePerson(Person) for equality so as to ensure that the person"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * UniquePersonList. However, the removal of a person uses Person#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * so as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class AutoExpenseList implements Iterable\u003cAutoExpense\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private final ObservableList\u003cAutoExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private final ObservableList\u003cAutoExpense\u003e internalUnmodifiableList \u003d FXCollections"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            .unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public boolean contains(AutoExpense toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Adds a person to the list. The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void add(AutoExpense toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * {@code target} must exist in the list. The person identity of"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * {@code editedPerson} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void setAutoExpense(AutoExpense target, AutoExpense editedAutoExpense) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        requireAllNonNull(target, editedAutoExpense);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (!target.equals(editedAutoExpense) \u0026\u0026 contains(editedAutoExpense)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        internalList.set(index, editedAutoExpense);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Removes the equivalent person from the list. The person must exist in the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void remove(AutoExpense toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void setEntries(AutoExpenseList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Replaces the contents of this list with {@code persons}. {@code persons} must"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * not contain duplicate persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void setEntries(List\u003cAutoExpense\u003e entries) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public ObservableList\u003cAutoExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Iterator\u003cAutoExpense\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                || (other instanceof AutoExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                        \u0026\u0026 internalList.equals(((AutoExpenseList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Represents a Budget."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class Budget extends Entry {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private static final String ENTRY_TYPE \u003d \"Budget\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private Amount spent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Budget(Category cat, Description desc, Date date, Amount amount, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(cat, desc, date, amount, tags);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        spent \u003d new Amount(0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns amount spent out of the budget."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * TODO: display on UI side panel"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @return amount Amount spent (calculated from expenses)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public Amount getSpent() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return spent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return this.ENTRY_TYPE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns true if both budgets have the same data fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * This defines a stronger notion of equality between two entries."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!(other instanceof Budget)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        Budget otherBudget \u003d (Budget) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return otherBudget.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 otherBudget.getDesc().equals(getDesc())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                \u0026\u0026 otherBudget.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                \u0026\u0026 otherBudget.getTags().equals(getTags())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                \u0026\u0026 otherBudget.getDate().equals(getDate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        builder.append(ENTRY_TYPE + \": \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .append(\" | Category: \")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                .append(getDesc())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        builder.append(\"(\" + getDate() + \")\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 7,
      "rongrongrr": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/BudgetDescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class BudgetDescriptionContainsKeywordsPredicate implements Predicate\u003cBudget\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public BudgetDescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean test(Budget entry) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(entry.getDesc().fullDesc, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                || (other instanceof BudgetDescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                \u0026\u0026 keywords.equals(((BudgetDescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/BudgetList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.person.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class BudgetList implements Iterable\u003cBudget\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean contains(Budget toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void add(Budget toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireAllNonNull(target, editedBudget);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!target.equals(editedBudget) \u0026\u0026 contains(editedBudget)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        internalList.set(index, editedBudget);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void remove(Budget toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void setEntries(BudgetList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void setEntries(List\u003cBudget\u003e entries) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public ObservableList\u003cBudget\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public Iterator\u003cBudget\u003e iterator() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                || (other instanceof BudgetList // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                \u0026\u0026 internalList.equals(((BudgetList) other).internalList));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/BudgetStub.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Temporary stub for Budget class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class BudgetStub extends Entry {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public BudgetStub() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(null, null, null, null, null);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 1,
      "jessicax941": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Category.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Represents a entry\u0027s Category in the guiltTrip."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_TYPE \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            \"Category Type should only be either Expense or Income\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String[] VALIDATIONLIST \u003d new String[] {\"Expense\", \"Income\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public final String categoryName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public final String categoryType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructs a {@code Name}. Validates that the categoryType is Expense or Income, and that the category"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * is not in the existing lists if its a new Category to be added, and that it is in the existing list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * if it\u0027s a Category created for Entry."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param desc A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Category(String categoryName, String categoryType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(categoryName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        checkArgument(isValidCategoryType(categoryType), MESSAGE_CONSTRAINTS_TYPE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.categoryType \u003d categoryType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns the truth value for whether the categoryType specified is in the Validation List."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static boolean isValidCategoryType(String categoryType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return Arrays.stream(VALIDATIONLIST).anyMatch(t -\u003e t.equalsIgnoreCase(categoryType));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns the truth value for whether the category to be edited is in the same category as the original."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean isSameCategory(Category otherCategory) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (otherCategory \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return otherCategory !\u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 otherCategory.categoryName.equals(otherCategory.categoryName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 categoryName.equalsIgnoreCase(((Category) other).categoryName) // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 categoryType.equalsIgnoreCase(((Category) other).categoryType)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return categoryName.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/CategoryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.exceptions.CategoryNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateCategoryException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * A list of categories that enforces uniqueness between its elements and does not"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class CategoryList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_IN_LIST \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            \"The category is already in the existing list of categories. \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_NOT_IN_LIST \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            \"The category is not in the existing list of categories. \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String LIST_IS_EMPTY \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            \"Unable to remove category from the category empty list!. \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * The first character of the address must not be a whitespace, otherwise \" \" (a"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * blank string) becomes a valid input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final ObservableList\u003cCategory\u003e internalListForIncome \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final ObservableList\u003cCategory\u003e internalListForOtherEntries \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Determines whether the category belongs to the expense list or the income category list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ObservableList\u003cCategory\u003e determineWhichList(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ObservableList\u003cCategory\u003e typeOfCategory;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (input.equalsIgnoreCase(\"Income\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            typeOfCategory \u003d internalListForIncome;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            typeOfCategory \u003d internalListForOtherEntries;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return typeOfCategory;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if the new Category to be added and created is not in the CategoryList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean isValidAndNotInList(Category category) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ObservableList\u003cCategory\u003e typeOfCategory \u003d determineWhichList(category.categoryType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return !typeOfCategory.stream().anyMatch(t -\u003e t.toString().equalsIgnoreCase(category.categoryName));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if the Category is in the CategoryList."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean contains(Category toCheck) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ObservableList\u003cCategory\u003e typeOfCategory \u003d determineWhichList(toCheck.categoryType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return typeOfCategory.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void setEntries(List\u003cCategory\u003e replacementExpenseList, List\u003cCategory\u003e replacementIncomeList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(replacementExpenseList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(replacementIncomeList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        internalListForOtherEntries.setAll(replacementExpenseList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        internalListForIncome.setAll(replacementIncomeList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ObservableList\u003cCategory\u003e getInternalListForIncome() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return internalListForIncome;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ObservableList\u003cCategory\u003e getInternalListForOtherEntries() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return internalListForOtherEntries;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void setCategory(Category target, Category editedCategory) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireAllNonNull(target, editedCategory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ObservableList internalList \u003d determineWhichList(target.categoryType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new CategoryNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!target.equals(editedCategory) \u0026\u0026 contains(editedCategory)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DuplicateCategoryException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        internalList.set(index, editedCategory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Adds a Category to the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * The Category must not exist in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void add(Category category) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        checkArgument(isValidAndNotInList(category), MESSAGE_CONSTRAINTS_IN_LIST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ObservableList\u003cCategory\u003e typeOfCategory;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (category.categoryType.equalsIgnoreCase(\"Income\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            typeOfCategory \u003d internalListForIncome;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            typeOfCategory \u003d internalListForOtherEntries;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        typeOfCategory.add(category);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Removes the equivalent Category from the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * The Category must exist in the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void remove(Category toRemove) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        //checks if it is in list. Also works for cases where List has 0 categories."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        checkArgument(!isValidAndNotInList(toRemove), MESSAGE_CONSTRAINTS_NOT_IN_LIST);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ObservableList internalList \u003d determineWhichList(toRemove.categoryType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new CategoryNotFoundException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private boolean categoriesAreUnique(List\u003cCategory\u003e categoryToCheck) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (int i \u003d 0; i \u003c categoryToCheck.size() - 1; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            for (int j \u003d i + 1; j \u003c categoryToCheck.size(); j++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                if (categoryToCheck.get(i).isSameCategory(categoryToCheck.get(j))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.util.Frequency;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * Represents a Person\u0027s name in the address book. Guarantees: immutable; is"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Names should only contain alphanumeric characters and spaces,\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            + \" and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * The first character of the address must not be a whitespace, otherwise \" \" (a"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * blank string) becomes a valid input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static final DateTimeFormatter INPUTFORMATTER \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy MM dd\"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy/MM/d\"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy-MM-d\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy.MM.dd\"))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy.MM.d\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d/MM/yyyy\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d-MM-yyyy\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd.MM.yyyy\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d.MM.yyyy\")).toFormatter();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static final DateTimeFormatter OUTPUTFORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private String fullTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Converts String to LocalDate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param date in the format yyyy mm dd."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        // checkArgument(isValidDescription(desc), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDate ldt \u003d LocalDate.parse(date, INPUTFORMATTER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.date \u003d ldt;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        parseDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Date(LocalDate date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // checkArgument(isValidDescription(desc), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        parseDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void parseDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        fullTime \u003d date.format(OUTPUTFORMATTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return test !\u003d null; // put this for now"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        // return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static Date now() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new Date(LocalDate.now());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Date plus(Frequency freq) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new Date(this.getDate().plus(freq.getPeriod()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return fullTime;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        //date.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                        \u0026\u0026 fullTime.equals(((Date) other).fullTime)); // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return fullTime.hashCode();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 18,
      "yuhongtay": 25,
      "Dandford": 53,
      "jessicax941": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * Represents a Person\u0027s name in the address book. Guarantees: immutable; is"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * The first character of the address must not be a whitespace, otherwise \" \" (a"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public final String fullDesc;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Description(String desc) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(desc);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        checkArgument(isValidDescription(desc), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        fullDesc \u003d desc;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return fullDesc;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                        \u0026\u0026 fullDesc.equals(((Description) other).fullDesc)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return fullDesc.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 7,
      "jessicax941": 12,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cEntry\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean test(Entry entry) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(entry.getDesc().fullDesc, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 6,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Entry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents an Entry in the finance app."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Entry {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final Description desc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final Amount amt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Entry(Category category, Description desc, Date date, Amount amount, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireAllNonNull(desc, date, amount, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.amt \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Description getDesc() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return amt;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return \"entry\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns true if both entries of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * This defines a weaker notion of equality between two entries."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Entry modifiedCategory(String newName) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Category newCategory \u003d new Category(newName, category.categoryType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Entry(newCategory, this.desc, this.date, this.amt, this.tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if both entries of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * This defines a weaker notion of equality between two entries."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean isSameEntry(Entry otherEntry) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (otherEntry \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return otherEntry !\u003d null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 otherEntry.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 otherEntry.getDesc().equals(getDesc())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 otherEntry.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 this.equals(otherEntry);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!(equalClass(other))) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (this instanceof Expense) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return ((Expense) this).equals((Expense) other);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } else if (this instanceof Income) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return ((Income) this).equals((Income) other);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } else if (this instanceof Wish) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return ((Wish) this).equals((Wish) other);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            } else if (this instanceof Budget) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                return ((Budget) this).equals((Budget) other);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Checks if children class of this instance is same as that of other."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param other object to compare to."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    protected boolean equalClass(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (this instanceof Expense \u0026\u0026 !(other instanceof Expense)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else if (this instanceof Income \u0026\u0026 !(other instanceof Income)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else if (this instanceof Wish \u0026\u0026 !(other instanceof Wish)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return !(this instanceof Budget) || other instanceof Budget;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        // use this method ford custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return Objects.hash(desc, amt, tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        builder.append(getDesc())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .append(amt)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "               .append(\" Tags: \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 32,
      "Dandford": 22,
      "jessicax941": 97,
      "rongrongrr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents an Expense."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Expense extends Entry {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static final String ENTRYTYPE \u003d \"Expense\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Expense(Category cat, Description desc, Date time, Amount amount, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(cat, desc, time, amount, tags);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.ENTRYTYPE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns a new Expense if and only if it\u0027s category is edited."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Expense modifiedCategory(String newName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Category newCategory \u003d new Category(newName, super.getCategory().categoryType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Expense(newCategory, super.getDesc(), super.getDate(), super.getAmount(), super.getTags());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns true if both expenses have the same data fields. This defines a"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * stronger notion of equality between two entries."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else if (!(other instanceof Wish)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return otherExpense.getCategory().equals(getCategory()) \u0026\u0026 otherExpense.getDesc().equals(getDesc())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 otherExpense.getAmount().equals(getAmount()) \u0026\u0026 otherExpense.getTags().equals(getTags())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 otherExpense.getDate().equals(getDate());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        builder.append(ENTRYTYPE + \": \")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .append(\" | Category: \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .append(\" | Description: \")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .append(getDesc())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .append(\" | Amount: \")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .append(\" | Tags: \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        builder.append(\" (Date: \" + this.getDate() + \") \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 2,
      "yuhongtay": 2,
      "Dandford": 34,
      "jessicax941": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ExpenseContainsTagPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ExpenseContainsTagPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ExpenseContainsTagPredicate(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean test(Expense entry) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return tags.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                .anyMatch(tag -\u003e entry.getTags().contains(tag));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || (other instanceof ExpenseContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 tags.equals(((ExpenseContainsTagPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class ExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList(toobserve -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Observable[] {new SimpleStringProperty(toobserve.getCategory().categoryName)});"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean contains(Expense toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!target.equals(editedExpense) \u0026\u0026 contains(editedExpense)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void setEntries(ExpenseList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void setEntries(List\u003cExpense\u003e entries) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                || (other instanceof ExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 internalList.equals(((ExpenseList) other).internalList));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 114,
      "jessicax941": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ExpenseReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Implement expense reminder"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ExpenseReminder extends Reminder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private long currSum;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private long quota;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private ExpenseTracker tracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ExpenseReminder(String message, long quota, ExpenseTracker tracker) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.tracker \u003d tracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.quota \u003d quota;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        currSum \u003d tracker.getAmount();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public long getSum() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return currSum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public long getQuota() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return quota;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ExpenseTracker getTracker() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return tracker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Checks status of reminder. i.e. should reminder trigger."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void updateStatus() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        currSum \u003d tracker.getAmount();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.setStatus(currSum \u003e\u003d quota);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Returns true if both ExpenseReminders have all identity fields that are the same."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param otherExpenseReminder ExpenseReminder to compare to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isSameReminder(Reminder otherReminder) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (otherReminder \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!(otherReminder instanceof ExpenseReminder)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ExpenseReminder otherExpenseReminder \u003d (ExpenseReminder) otherReminder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return otherExpenseReminder !\u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 otherExpenseReminder.getMessage().equals(getMessage())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 otherExpenseReminder.getTracker().equals(getTracker())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 otherExpenseReminder.getQuota() \u003d\u003d (getQuota());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 56,
      "jessicax941": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ExpenseReminderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ExpenseReminderList implements Iterable\u003cExpenseReminder\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final ObservableList\u003cExpenseReminder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final ObservableList\u003cExpenseReminder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean contains(ExpenseReminder toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameReminder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void add(ExpenseReminder toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setExpenseReminder(ExpenseReminder target, ExpenseReminder editedExpenseReminder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireAllNonNull(target, editedExpenseReminder);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!target.equals(editedExpenseReminder) \u0026\u0026 contains(editedExpenseReminder)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        internalList.set(index, editedExpenseReminder);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void remove(ExpenseReminder toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEntries(ExpenseReminderList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEntries(List\u003cExpenseReminder\u003e entries) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * updates the status of all reminders in ExpenseReminderList"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void updateList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (ExpenseReminder reminder : internalList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            reminder.updateStatus();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Get list of reminders to be displayed on main page."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cExpenseReminder\u003e getDisplay() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        FilteredList\u003cExpenseReminder\u003e displayList \u003d new FilteredList\u003c\u003e(this.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        displayList.setPredicate(new ExpenseReminderIsActive());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return displayList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cExpenseReminder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Iterator\u003cExpenseReminder\u003e iterator() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || (other instanceof ExpenseReminderList // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 internalList.equals(((ExpenseReminderList) other).internalList));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Predicate to filter reminders to be displayed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "class ExpenseReminderIsActive implements Predicate\u003cExpenseReminder\u003e {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean test(ExpenseReminder entry) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return entry.getStatus();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ExpenseTracker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Expense Tracker used by expense reminder to trigger reminder."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ExpenseTracker {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private long currAmount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private ExpenseContainsTagPredicate predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ExpenseTracker(ExpenseContainsTagPredicate predicate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        currAmount \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public long getAmount() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return currAmount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setAmount(long newAmt) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        currAmount \u003d newAmt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ExpenseContainsTagPredicate getPredicate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used to compare if one tracker does the same thing as another."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param otherTracker tracker to compare with"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return boolean value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isSameEntry(ExpenseTracker otherTracker) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (otherTracker \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return otherTracker !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 otherTracker.getPredicate().equals(getPredicate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ExpenseTrackerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ExpenseTrackerList implements Iterable\u003cExpenseTracker\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final ObservableList\u003cExpenseTracker\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean contains(ExpenseTracker toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void add(ExpenseTracker toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setTracker(ExpenseTracker target, ExpenseTracker editedTracker) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireAllNonNull(target, editedTracker);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (target.equals(editedTracker) || !contains(editedTracker)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            internalList.set(index, editedTracker);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void remove(ExpenseTracker toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEntries(ExpenseTrackerList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEntries(List\u003cExpenseTracker\u003e entries) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cExpenseTracker\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Iterator\u003cExpenseTracker\u003e iterator() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || (other instanceof ExpenseTrackerList // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 internalList.equals(((ExpenseTrackerList) other).internalList));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ExpenseTrackerManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Manages ExpenseTrackerList. Will be instantiated inside Object Manager and Address Book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ExpenseTrackerManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private FilteredList\u003cExpenseTracker\u003e trackerList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ExpenseTrackerManager(ObservableList\u003cExpenseTracker\u003e trackerList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.trackerList \u003d new FilteredList\u003c\u003e(trackerList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cExpenseTracker\u003e getList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return trackerList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Iterates through list of trackers, and see which tracker(s) are keeping track of this event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param filteredExpenses"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void track(FilteredList\u003cExpense\u003e filteredExpenses) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (ExpenseTracker tracker : trackerList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            long newAmt \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            filteredExpenses.setPredicate(tracker.getPredicate());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            for (Expense expense : filteredExpenses) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                newAmt +\u003d expense.getAmount().value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            tracker.setAmount(newAmt);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Income.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents an Income."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Income extends Entry {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String ENTRY_TYPE \u003d \"Income\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Income(Category cat, Description desc, Date time, Amount amt, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(cat, desc, time, amt, tags);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.ENTRY_TYPE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns a new Income if and only if it\u0027s category is edited."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Income modifiedCategory(String newName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Category newCategory \u003d new Category(newName, super.getCategory().categoryType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Income(newCategory, super.getDesc(), super.getDate(), super.getAmount(), super.getTags());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns true if both incomes have the same data fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * This defines a stronger notion of equality between two entries."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!(other instanceof Income)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else if (!(other instanceof Wish)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Income otherIncome \u003d (Income) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return otherIncome.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 otherIncome.getDesc().equals(getDesc())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 otherIncome.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 otherIncome.getTags().equals(getTags())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 otherIncome.getDate().equals(getDate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        builder.append(ENTRY_TYPE + \": \")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .append(\" | Category: \")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .append(getDesc())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        builder.append(\"(\" + getDate() + \")\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 4,
      "Dandford": 15,
      "jessicax941": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/IncomeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class IncomeList implements Iterable\u003cIncome\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final ObservableList\u003cIncome\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final ObservableList\u003cIncome\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean contains(Income toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void add(Income toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setIncome(Income target, Income editedIncome) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireAllNonNull(target, editedIncome);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!target.equals(editedIncome) \u0026\u0026 contains(editedIncome)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        internalList.set(index, editedIncome);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void remove(Income toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setEntries(IncomeList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setEntries(List\u003cIncome\u003e entries) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ObservableList\u003cIncome\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Iterator\u003cIncome\u003e iterator() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                || (other instanceof IncomeList // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 internalList.equals(((IncomeList) other).internalList));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PanelName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a PanelName."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class PanelName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Panel names should be one of the following: wishlist, budget or \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            + \"reminder\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public final String panelName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Construct a {@code PanelName} with the specified field."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public PanelName(String panelName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireAllNonNull(panelName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        checkArgument(isValidPanelName(panelName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.panelName \u003d panelName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.panelName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns true if a given string is a valid panel name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static boolean isValidPanelName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String testLowerCase \u003d test.toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        switch (testLowerCase) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"wishlist\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"wishes\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"wish\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"w\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"budget\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"budgets\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"b\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"reminders\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"reminder\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"r\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return true; // all the above cases are accepted arguments"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                || (other instanceof PanelName // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 panelName.equals(((PanelName) other).panelName)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return panelName.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return panelName;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final Description name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public Person(Description name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public Description getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .append(\" Phone: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .append(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .append(\" Email: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .append(getEmail())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .append(\" Address: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .append(getAddress())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .append(\" Tags: \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return builder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Basic reminder class with minimal functionality."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public abstract class Reminder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private boolean isActivated;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Reminder(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        isActivated \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return isActivated;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void setStatus(boolean bool) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        isActivated \u003d bool;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return \"(\" + isActivated + \") \" + message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    abstract boolean isSameReminder(Reminder reminder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/SortSequence.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Represents a SortSequence in the finance manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class SortSequence {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            \"SortSequence should only be ascending or descending\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public final String sequence;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param desc A valid name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public SortSequence(String sequence) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(sequence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        checkArgument(isValidDescription(sequence), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.sequence \u003d sequence;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return (test.equalsIgnoreCase(\"ascending\") || test.equalsIgnoreCase(\"descending\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public int getSequence() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (this.sequence.equalsIgnoreCase(\"ascending\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return sequence;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                || (other instanceof SortSequence // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 sequence.equals(((SortSequence) other).sequence)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return sequence.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/SortType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Represents a SortType in the finance manager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class SortType {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            \"Sort Type should only be either amount, description, time or tags\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String[] VALIDATIONLIST \u003d new String[]{\"amount\", \"description\" , \"time\" , \"tags\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public final String fullType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param desc A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public SortType(String fullType) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(fullType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        checkArgument(isValidDescription(fullType), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.fullType \u003d fullType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return Arrays.stream(VALIDATIONLIST).anyMatch(t -\u003e t.equalsIgnoreCase(test));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return fullType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                || (other instanceof SortType // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 fullType.equals(((SortType) other).fullType)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return fullType.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueEntryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class UniqueEntryList implements Iterable\u003cEntry\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean contains(Entry toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void add(Entry toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!target.isSameEntry(editedEntry) \u0026\u0026 contains(editedEntry)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        internalList.set(index, editedEntry);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void remove(Entry toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setEntries(UniqueEntryList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!entriesAreUnique(entries)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ObservableList\u003cEntry\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Iterator\u003cEntry\u003e iterator() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                || (other instanceof UniqueEntryList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueEntryList) other).internalList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private boolean entriesAreUnique(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (int i \u003d 0; i \u003c entries.size() - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            for (int j \u003d i + 1; j \u003c entries.size(); j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                if (entries.get(i).isSameEntry(entries.get(j))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 1,
      "jessicax941": 30,
      "-": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Wish.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Represents an Expense."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Wish extends Entry {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static final String ENTRY_TYPE \u003d \"Wish\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Wish(Category cat, Description desc, Date date, Amount amount, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(cat, desc, date, amount, tags);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return this.ENTRY_TYPE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Returns true if both expenses have the same data fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * This defines a stronger notion of equality between two entries."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!(other instanceof Wish)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Wish otherWish \u003d (Wish) other;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return otherWish.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 otherWish.getDesc().equals(getDesc())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 otherWish.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 otherWish.getTags().equals(getTags())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 otherWish.getDate().equals(getDate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        builder.append(ENTRY_TYPE + \": \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .append(\" | Category: \")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                .append(getDesc())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        builder.append(\" (\" + getDate() + \")\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 53,
      "Dandford": 7,
      "jessicax941": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/WishDescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class WishDescriptionContainsKeywordsPredicate implements Predicate\u003cWish\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public WishDescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean test(Wish entry) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(entry.getDesc().fullDesc, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || (other instanceof WishDescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 keywords.equals(((WishDescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/WishList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class WishList implements Iterable\u003cWish\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final ObservableList\u003cWish\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final ObservableList\u003cWish\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean contains(Wish toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void add(Wish toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setWish(Wish target, Wish editedWish) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireAllNonNull(target, editedWish);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!target.equals(editedWish) \u0026\u0026 contains(editedWish)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        internalList.set(index, editedWish);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void remove(Wish toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEntries(WishList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEntries(List\u003cWish\u003e entries) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cWish\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Iterator\u003cWish\u003e iterator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || (other instanceof WishList // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 internalList.equals(((WishList) other).internalList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 16,
      "jessicax941": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/WishReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Implements wish reminder"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class WishReminder extends Reminder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Wish wish;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public WishReminder(String desc, Wish wish) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.wish \u003d wish;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Wish getWish() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return wish;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *checks status of reminder. i.e. should reminder trigger."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void updateStatus() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Date date \u003d wish.getDate();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.setStatus(!LocalDate.now().isBefore(date.getDate()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setWish(Wish wish) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assert (wish.equals(wish));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.wish \u003d wish;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Returns true if both WishReminders have all identity fields that are the same."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param otherReminder WishReminder to compare to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isSameReminder(Reminder otherReminder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (otherReminder \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!(otherReminder instanceof WishReminder)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        WishReminder otherWishReminder \u003d (WishReminder) otherReminder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return otherWishReminder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 otherWishReminder.getMessage().equals(getMessage())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 otherWishReminder.getWish().equals(getWish());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 47,
      "jessicax941": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/WishReminderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class WishReminderList implements Iterable\u003cWishReminder\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final ObservableList\u003cWishReminder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final ObservableList\u003cWishReminder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean contains(WishReminder toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameReminder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void add(WishReminder toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setWishReminder(WishReminder target, WishReminder editedWishReminder) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireAllNonNull(target, editedWishReminder);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!target.equals(editedWishReminder) \u0026\u0026 contains(editedWishReminder)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        internalList.set(index, editedWishReminder);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void remove(WishReminder toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEntries(WishReminderList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEntries(List\u003cWishReminder\u003e entries) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * updates the status of all reminders in ExpenseReminderList"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void updateList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (WishReminder reminder : internalList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            reminder.updateStatus();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Get list of reminders to be displayed on main page."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cWishReminder\u003e getDisplay() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        FilteredList\u003cWishReminder\u003e displayList \u003d new FilteredList\u003c\u003e(this.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        displayList.setPredicate(new WishReminderIsActive());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return displayList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ObservableList\u003cWishReminder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Iterator\u003cWishReminder\u003e iterator() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || (other instanceof WishReminderList // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                \u0026\u0026 internalList.equals(((WishReminderList) other).internalList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Predicate to filter reminders to be displayed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "class WishReminderIsActive implements Predicate\u003cWishReminder\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean test(WishReminder entry) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return entry.getStatus();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/CategoryNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Signals that the operation will result in unfound Categories."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class CategoryNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateCategoryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Signals that the operation will result in duplicate Entries (Entries are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DuplicateCategoryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DuplicateCategoryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(\"Operation would result in duplicate categories\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateEntryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Signals that the operation will result in duplicate Entries (Entries are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class DuplicateEntryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public DuplicateEntryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(\"Operation would result in duplicate entries\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/EntryNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Signals that the operation is unable to find the specified entry."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class EntryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/DailyList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Represents a SortType in the finance manager."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Guarantees: dateOfList cannot be changed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DailyList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private FilteredList\u003cEntry\u003e listOfExpenses;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private ObservableList\u003cIncome\u003e listOfIncomes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final LocalDate dateOfRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private double totalExpense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private double totalIncome;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DailyList(FilteredList\u003cEntry\u003e retrievedExpenseList, LocalDate date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        listOfExpenses \u003d retrievedExpenseList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        listOfIncomes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        dateOfRecord \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        totalExpense \u003d 0.00;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        totalIncome \u003d 0.00;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        initLoadFromFilteredList(retrievedExpenseList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DailyList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        listOfExpenses \u003d new FilteredList(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        listOfIncomes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        dateOfRecord \u003d LocalDate.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        totalExpense \u003d 0.00;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        totalIncome \u003d 0.00;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private void initLoadFromFilteredList(FilteredList\u003cEntry\u003e entryList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (int i \u003d 0; i \u003c entryList.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            totalExpense \u003d totalExpense + entryList.get(i).getAmount().value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ObservableList\u003cEntry\u003e getListOfExpenses() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return listOfExpenses;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ObservableList\u003cIncome\u003e getListOfIncomes() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return listOfIncomes;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public double getTotalExpense() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return totalExpense;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public double getTotalIncome() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return totalIncome;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return dateOfRecord, the date in which the DailyList was created."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return dateOfRecord;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * adds the recorded Expense into the listOfExpenses."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void addExpense(Expense expenseCreated) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(expenseCreated);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.listOfExpenses.add(expenseCreated);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.totalExpense \u003d this.totalExpense + expenseCreated.getAmount().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * adds the recorded Income into the listOfExpenses."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void addIncome(Income incomeCreated) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        requireNonNull(incomeCreated);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.listOfIncomes.add(incomeCreated);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.totalIncome \u003d this.totalIncome + incomeCreated.getAmount().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/EntryContainsDayPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Filters the entrylist predicates based on the int day."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class EntryContainsDayPredicate implements Predicate\u003cEntry\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private int dayFromUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Filters the entrylist based on the int day."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public EntryContainsDayPredicate(int dayFromUser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.dayFromUser \u003d dayFromUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean test(Entry entry) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return dayFromUser \u003d\u003d (entry.getDate().getDate().getDayOfMonth());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                || (other instanceof EntryContainsDayPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 dayFromUser \u003d\u003d ((((EntryContainsDayPredicate) other).dayFromUser))); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/EntryTimeContainsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Filters the entrylist predicates based on the int month."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class EntryTimeContainsPredicate implements Predicate\u003cEntry\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private int monthFromUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Filters the entrylist based on the int monthFromUser."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public EntryTimeContainsPredicate(int monthFromUser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.monthFromUser \u003d monthFromUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean test(Entry entry) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return monthFromUser \u003d\u003d (entry.getDate().getDate().getMonth().getValue());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                || (other instanceof EntryTimeContainsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 monthFromUser \u003d\u003d ((((EntryTimeContainsPredicate) other).monthFromUser))); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/MonthList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortSequence;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.util.EntryComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Contains the entries for the current Month in the idea."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class MonthList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private ObservableMap\u003cInteger, DailyList\u003e dailyRecord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private FilteredList\u003cEntry\u003e filteredListForMonth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private SortType sortByTime \u003d new SortType(\"Time\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private SortSequence sortByDesc \u003d new SortSequence(\"Descending\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private double monthExpenseTotal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Contains the FilteredList of entries for the month."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public MonthList(FilteredList\u003cEntry\u003e filteredList, Month month, int year) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.filteredListForMonth \u003d filteredList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        initRecords();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private void initRecords() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        filteredListForMonth.sort(new EntryComparator(sortByTime, sortByDesc));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        createObsMap();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Creates an ObservableMap of Dailylists"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private void createObsMap() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (int i \u003d 0; i \u003c 31; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                LocalDate.of(year, month.getValue(), i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            FilteredList\u003cEntry\u003e filteredListByDay \u003d filteredListForMonth.filtered(new EntryContainsDayPredicate(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            DailyList dailyList \u003d new DailyList(filteredListByDay, LocalDate.of(year, month.getValue(), i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            monthExpenseTotal \u003d monthExpenseTotal + dailyList.getTotalExpense();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            dailyRecord.put(i, dailyList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "//package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "//public interface Statistics {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/StatisticsManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Handles calculation of statistics."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class StatisticsManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private double lastMonthExpenses;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private ObservableMap\u003cInteger, MonthList\u003e monthlyRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private DailyList currentDailyList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Manages the general Statistics."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public StatisticsManager(FilteredList\u003cEntry\u003e filteredList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        int currentMonth \u003d LocalDate.now().getMonth().getValue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        int currentDay \u003d LocalDate.now().getDayOfMonth();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        int currentYear \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        initRecords(filteredList, currentMonth, currentYear);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Loads the Records from scratch."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private void initRecords(FilteredList\u003cEntry\u003e filteredList, int month, int currentYear) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d month; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            FilteredList\u003cEntry\u003e filteredByMonth \u003d filteredList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            filteredByMonth.setPredicate(new EntryTimeContainsPredicate(i));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            MonthList monthToCompare \u003d new MonthList(filteredByMonth, Month.of(month), currentYear);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            monthlyRecord.put(i, monthToCompare);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void getTagsForTimePeriod() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Tag implements Comparable\u003cTag\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 tagName.toLowerCase().equals(((Tag) other).tagName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public int compareTo(Tag t) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return tagName.toLowerCase().compareTo(t.tagName.toLowerCase());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 7,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/EntryComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortSequence;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.SortType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Represents a EntryComparator in the finance manager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * SortType specifies the type of sorting and SortSequence specifies the direction of sorting."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class EntryComparator implements Comparator\u003cEntry\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private SortType typeOfComparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private SortSequence sequence;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public EntryComparator(SortType typeOfComparator, SortSequence sequence) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.typeOfComparator \u003d typeOfComparator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.sequence \u003d sequence;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public int compare(Entry e1, Entry e2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        switch(typeOfComparator.toString()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"amount\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return (Double.valueOf(e1.getAmount().value)).compareTo(e2.getAmount().value) * this.sequence.getSequence();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"description\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return (e1.getDesc().fullDesc.toLowerCase()).compareTo(e2.getDesc().fullDesc.toLowerCase())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    * this.sequence.getSequence();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return (e1.getDate().getDate()).compareTo(e2.getDate().getDate()) * this.sequence.getSequence();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"tags\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Set\u003cTag\u003e firstEntryTags \u003d e1.getTags();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Set\u003cTag\u003e secondEntryTags \u003d e2.getTags();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            List\u003cTag\u003e firstEntryListTags \u003d new ArrayList\u003cTag\u003e(firstEntryTags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            List\u003cTag\u003e secondEntryListTags \u003d new ArrayList\u003cTag\u003e(secondEntryTags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Collections.sort(firstEntryListTags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Collections.sort(secondEntryListTags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String firstEntryStringofTags \u003d firstEntryListTags.stream().map(n -\u003e n.tagName)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    .collect(Collectors.joining());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String secondEntryStringofTags \u003d secondEntryListTags.stream().map(n -\u003e n.tagName)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    .collect(Collectors.joining());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return firstEntryStringofTags.toLowerCase()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    .compareToIgnoreCase(secondEntryStringofTags.toLowerCase()) * this.sequence.getSequence();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            //TODO"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Frequency.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * An enum containing commonly used time periods as frequency."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public enum Frequency {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    DAILY(Period.ofDays(1)), WEEKLY(Period.ofDays(7)), FORTNIGHTLY(Period.ofDays(14)), MONTHLY("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            Period.ofMonths(1)), QUARTERLY(Period.ofMonths(3)), ANUALLY(Period.ofYears(1));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private final TemporalAmount period;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    Frequency(TemporalAmount period) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public TemporalAmount getPeriod() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return period;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Quasi-NLP superpowers using switch cases."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * TODO: daily: daily, every day, everyday, every night weekly: weekly, every"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * week, every wk, wkly, wk fortnightly: fortnightly, every 2 weeks, every 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * wks, every two weeks, every two wks, fortnight, fortnite monthly: monthly,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * mthly, mth quarterly: quarterly, qtrly anually: anually, yearly, every year,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * every yr"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param stringFreq"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static Frequency parse(String stringFreq) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String sanitized \u003d stringFreq.trim().toLowerCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        switch (sanitized) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        case \"daily\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return DAILY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        case \"fortnightly\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return FORTNIGHTLY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        case \"monthly\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return MONTHLY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        case \"quarterly\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return QUARTERLY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        case \"yearly\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        case \"anually\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return ANUALLY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        case \"weekly\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return WEEKLY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static Entry[] getSampleEntries() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new Entry[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Expense(new Category(\"Food\", \"Expense\"), new Description(\"mala at deck\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    new Date(\"2019 09 09\"), new Amount(5.40), getTagSet(\"mala\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Expense(new Category(\"Food\", \"Expense\"), new Description(\"chicken rice\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    new Date(\"2019 09 09\"), new Amount(3.50), getTagSet(\"mala\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Income(new Category(\"Work\", \"Income\"), new Description(\"october salary\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    new Date(\"2019 10 11\"), new Amount(3000), getTagSet(\"salary\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static Category[] getSampleCategories() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Category[] {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Food\", \"Expense\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Travel\", \"Expense\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Family\", \"Expense\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Bills\", \"Expense\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Entertainment\", \"Expense\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Transport\", \"Expense\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Shopping\", \"Expense\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"HealthCare\", \"Expense\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Groceries\", \"Expense\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Rent\", \"Expense\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Business\", \"Income\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Salary\", \"Income\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Gifts\", \"Income\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            new Category(\"Loans\", \"Income\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        addCategories(sampleAb);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (Entry sampleEntry : getSampleEntries()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            sampleAb.addEntry(sampleEntry);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Adds a default set of Categories if the addressBook is empty."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static void addCategories(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (Category sampleCategory : getSampleCategories()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            addressBook.addCategory(sampleCategory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 40,
      "jessicax941": 4,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Budget\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final String desc;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final double amt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given person details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"category\") String category, @JsonProperty(\"desc\") String desc,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                             @JsonProperty(\"amt\") double amt, @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        this.amt \u003d amt;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.date \u003d time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        category \u003d source.getCategory().categoryName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        desc \u003d source.getDesc().fullDesc;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        amt \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Converts this Jackson-friendly adapted budget object into the model\u0027s {@code Budget} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted budget."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public Budget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        final List\u003cTag\u003e entryTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            entryTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (desc \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!Description.isValidDescription(desc)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        final Category modelCategory \u003d new Category(category, \"Expense\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        final Description modelDesc \u003d new Description(desc);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        final Amount modelAmt \u003d new Amount(amt);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(entryTags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Budget(modelCategory, modelDesc, modelDate, modelAmt, modelTags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 16,
      "rongrongrr": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCategory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "class JsonAdaptedCategory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String WRONG_CATEGORY_TYPE_MESSAGE_FORMAT \u003d \"Category Type of %s is not Income or Expense!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final String categoryType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public JsonAdaptedCategory(@JsonProperty(\"categoryName\") String categoryName,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                               @JsonProperty(\"categoryType\") String categoryType) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.categoryType \u003d categoryType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public JsonAdaptedCategory(Category source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        categoryName \u003d source.categoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        categoryType \u003d source.categoryType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Category toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!Category.isValidCategoryType(categoryType)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new IllegalValueException(String.format(WRONG_CATEGORY_TYPE_MESSAGE_FORMAT, categoryName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Category(categoryName, categoryType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "class JsonAdaptedEntry {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Entry\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final String desc;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final double amt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public JsonAdaptedEntry(@JsonProperty(\"category\") String category, @JsonProperty(\"desc\") String desc,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                            @JsonProperty(\"amt\") double amt, @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.amt \u003d amt;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public JsonAdaptedEntry(Entry source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        category \u003d source.getCategory().categoryName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc \u003d source.getDesc().fullDesc;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        time \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        amt \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Entry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        final List\u003cTag\u003e entryTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            entryTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (desc \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!Description.isValidDescription(desc)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        final Category modelCategory \u003d new Category(category, \"Expense\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        final Description modelDesc \u003d new Description(desc);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final Date modelTime \u003d new Date(time);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        final Amount modelAmt \u003d new Amount(amt);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(entryTags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Entry(modelCategory, modelDesc, modelTime, modelAmt, modelTags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 2,
      "Dandford": 14,
      "jessicax941": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final String desc;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final double amt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"category\") String category, @JsonProperty(\"desc\") String desc,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                              @JsonProperty(\"amt\") double amt, @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.amt \u003d amt;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.date \u003d time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        category \u003d source.getCategory().categoryName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        desc \u003d source.getDesc().fullDesc;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        amt \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        final List\u003cTag\u003e entryTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            entryTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (desc \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!Description.isValidDescription(desc)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        final Category modelCategory \u003d new Category(category, \"Expense\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        final Description modelDesc \u003d new Description(desc);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final Date modelTime \u003d new Date(date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        final Amount modelAmt \u003d new Amount(amt);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(entryTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Expense(modelCategory, modelDesc, modelTime, modelAmt, modelTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 3,
      "Dandford": 91,
      "jessicax941": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpenseReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseContainsTagPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.ExpenseTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "class JsonAdaptedExpenseReminder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private long quota;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public JsonAdaptedExpenseReminder(@JsonProperty(\"desc\") String desc,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                                      @JsonProperty(\"quota\") long quota,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                                      @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.message \u003d desc;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.quota \u003d quota;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public JsonAdaptedExpenseReminder(ExpenseReminder source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        message \u003d source.getMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        quota \u003d source.getQuota();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        tagged.addAll(source.getTracker().getPredicate().getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ExpenseReminder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final List\u003cTag\u003e entryTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            entryTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (message \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final String modelMessage \u003d message;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final long modelQuota \u003d quota;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(entryTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final ExpenseContainsTagPredicate predicate \u003d new ExpenseContainsTagPredicate(modelTags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final ExpenseTracker tracker \u003d new ExpenseTracker(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new ExpenseReminder(modelMessage, modelQuota, tracker);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIncome.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "class JsonAdaptedIncome {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final String desc;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final double amt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public JsonAdaptedIncome(@JsonProperty(\"category\") String category, @JsonProperty(\"desc\") String desc,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                             @JsonProperty(\"amt\") double amt, @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.amt \u003d amt;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public JsonAdaptedIncome(Income source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        category \u003d source.getCategory().categoryName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc \u003d source.getDesc().fullDesc;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        amt \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        time \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Income toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        final List\u003cTag\u003e entryTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            entryTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (desc \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!Description.isValidDescription(desc)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        final Category modelCategory \u003d new Category(category, \"Income\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        final Description modelDesc \u003d new Description(desc);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final Date modelTime \u003d new Date(time);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        final Amount modelAmt \u003d new Amount(amt);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(entryTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Income(modelCategory, modelDesc, modelTime, modelAmt, modelTags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 2,
      "Dandford": 14,
      "jessicax941": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedWish.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Jackson-friendly version of {@link Wish}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "class JsonAdaptedWish {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Wish\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final String desc;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final double amt;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public JsonAdaptedWish(@JsonProperty(\"category\") String category, @JsonProperty(\"desc\") String desc,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                           @JsonProperty(\"amt\") double amt, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.amt \u003d amt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public JsonAdaptedWish(Wish source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        category \u003d source.getCategory().categoryName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        desc \u003d source.getDesc().fullDesc;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        amt \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Wish toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final List\u003cTag\u003e entryTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            entryTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (desc \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (!Description.isValidDescription(desc)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final Description modelDesc \u003d new Description(desc);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        /*if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new IllegalValueException((Date.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        final Category modelCategory \u003d new Category(category, \"Expense\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final Amount modelAmt \u003d new Amount(amt);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(entryTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Wish(modelCategory, modelDesc, modelDate, modelAmt, modelTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 76,
      "Dandford": 8,
      "jessicax941": 13,
      "rongrongrr": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedWishReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.WishReminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "class JsonAdaptedWishReminder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Wish wish;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public JsonAdaptedWishReminder(@JsonProperty(\"desc\") String desc,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                                      @JsonProperty(\"wish\") Wish wish) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.message \u003d desc;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.wish \u003d wish;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public JsonAdaptedWishReminder(WishReminder source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        message \u003d source.getMessage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        wish \u003d source.getWish();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public WishReminder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (message \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final String modelMessage \u003d message;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        final Wish modelWish \u003d wish;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new WishReminder(modelMessage, modelWish);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.WishReminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String MESSAGE_WRONG_CATEGORY \u003d \"Data file load error due to non existent category. \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e listofExpenseCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e listofIncomeCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final List\u003cJsonAdaptedIncome\u003e incomes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final List\u003cJsonAdaptedWish\u003e wishes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final List\u003cJsonAdaptedExpenseReminder\u003e expenseReminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private final List\u003cJsonAdaptedWishReminder\u003e wishReminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                                       @JsonProperty(\"listofExpenseCategories\") List\u003cJsonAdaptedCategory\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                                               listofExpenseCategories,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                                       @JsonProperty(\"listofIncomeCategories\") List\u003cJsonAdaptedCategory\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                                               listofIncomeCategories) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.listofExpenseCategories.addAll(listofExpenseCategories);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.listofIncomeCategories.addAll(listofIncomeCategories);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *               {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        listofExpenseCategories.addAll(source.getExpenseCategoryList().stream().map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        listofIncomeCategories.addAll(source.getIncomeCategoryList().stream().map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        incomes.addAll(source.getIncomeList().stream().map(JsonAdaptedIncome::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        wishes.addAll(source.getWishList().stream().map(JsonAdaptedWish::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        budgets.addAll(source.getBudgetList().stream().map(JsonAdaptedBudget::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        expenseReminders.addAll(source.getExpenseReminderList().stream().map(JsonAdaptedExpenseReminder::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        expenseReminders.addAll("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                source.getExpenseReminderList().stream().map("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                        JsonAdaptedExpenseReminder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        wishReminders.addAll("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                source.getWishReminderList().stream().map(JsonAdaptedWishReminder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (JsonAdaptedCategory jsonAdaptedCategory : listofExpenseCategories) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Category category \u003d jsonAdaptedCategory.toModelType();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            addressBook.addCategory(category);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (JsonAdaptedCategory jsonAdaptedCategory : listofIncomeCategories) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Category category \u003d jsonAdaptedCategory.toModelType();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            addressBook.addCategory(category);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (!addressBook.getCategoryList().contains(expense.getCategory())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new IllegalValueException(MESSAGE_WRONG_CATEGORY);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            addressBook.addExpense(expense);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (JsonAdaptedIncome jsonAdaptedIncome : incomes) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            Income income \u003d jsonAdaptedIncome.toModelType();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (!addressBook.getCategoryList().contains(income.getCategory())) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new IllegalValueException(MESSAGE_WRONG_CATEGORY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            addressBook.addIncome(income);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (JsonAdaptedWish jsonAdaptedWish : wishes) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            Wish wish \u003d jsonAdaptedWish.toModelType();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (!addressBook.getCategoryList().contains(wish.getCategory())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new IllegalValueException(MESSAGE_WRONG_CATEGORY);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            addressBook.addWish(wish);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        for (JsonAdaptedBudget jsonAdaptedBudget: budgets) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            Budget budget \u003d jsonAdaptedBudget.toModelType();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (!addressBook.getCategoryList().contains(budget.getCategory())) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new IllegalValueException(MESSAGE_WRONG_CATEGORY);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            addressBook.addBudget(budget);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        for (JsonAdaptedExpenseReminder jsonAdaptedExpenseReminder : expenseReminders) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            ExpenseReminder reminder \u003d jsonAdaptedExpenseReminder.toModelType();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            addressBook.addExpenseReminder(reminder);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        for (JsonAdaptedWishReminder jsonAdaptedWishReminder : wishReminders) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            WishReminder reminder \u003d jsonAdaptedWishReminder.toModelType();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            addressBook.addWishReminder(reminder);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 4,
      "yuhongtay": 15,
      "Dandford": 46,
      "jessicax941": 14,
      "rongrongrr": 12,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class BudgetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String FXML \u003d \"BudgetListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public final Budget budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label desc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label spent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public BudgetCard(Budget budget, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String type \u003d budget.getType().toLowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String descWithType \u003d budget.getDesc().fullDesc;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc.setText(descWithType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        date.setText(budget.getDate().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        spent.setText(\"spent: $\" + budget.getSpent().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        budget.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!(other instanceof EntryCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        BudgetCard card \u003d (BudgetCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 budget.equals(card.budget);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jessicax941": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Side panel for budgets."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class BudgetPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String FXML \u003d \"BudgetListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BudgetPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private ListView\u003cBudget\u003e budgetListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public BudgetPanel(ObservableList\u003cBudget\u003e budgetList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        budgetListView.setItems(budgetList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        budgetListView.setCellFactory(listView -\u003e new BudgetListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    class BudgetListViewCell extends ListCell\u003cBudget\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        protected void updateItem(Budget entry, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                setGraphic(new BudgetCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (CommandException | ParseException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 1,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntryCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class EntryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String FXML \u003d \"EntryListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public final Entry entry;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label desc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Label amt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public EntryCard(Entry entry, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String descWithType \u003d entry.getDesc().fullDesc;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc.setText(descWithType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        date.setText(entry.getDate().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        amt.setText(\"$\" + entry.getAmount().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        category.setText(entry.getCategory().categoryName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entry.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!(other instanceof EntryCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        EntryCard card \u003d (EntryCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 entry.equals(card.entry);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 6,
      "jessicax941": 18,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntryListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Panel containing the list of entries."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class EntryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String FXML \u003d \"EntryListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EntryListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private ListView\u003cEntry\u003e entryListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public EntryListPanel(ObservableList\u003cEntry\u003e entryList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entryListView.setItems(entryList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entryListView.setCellFactory(listView -\u003e new EntryListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    class EntryListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        protected void updateItem(Entry entry, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                if (entry instanceof Expense) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    Expense expense \u003d (Expense) entry;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                } else if (entry instanceof Income) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    Income income \u003d (Income) entry;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    setGraphic(new IncomeCard(income, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    setGraphic(new EntryCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String FXML \u003d \"ExpenseCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label desc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label amt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String descWithType \u003d expense.getDesc().fullDesc;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc.setText(descWithType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        date.setText(expense.getDate().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        amt.setText(\"$\" + expense.getAmount().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        expense.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 19,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseReminderCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * An UI component that displays information of a {@code Reminder}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class ExpenseReminderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String FXML \u003d \"ExpenseReminderListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public final ExpenseReminder expenseReminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label desc;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label amt;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ExpenseReminderCard(ExpenseReminder expenseReminder, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.expenseReminder \u003d expenseReminder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc.setText(expenseReminder.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        amt.setText(expenseReminder.getSum() + \" / \" + expenseReminder.getQuota());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        /*String type \u003d reminder.getType().toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String descWithType \u003d \"[\" + type + \"] \" + entry.getDesc().fullDesc;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc.setText(descWithType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        date.setText(entry.getDate().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        amt.setText(\"$\" + entry.getAmount().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entry.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));*/"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!(other instanceof ExpenseReminderCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ExpenseReminderCard card \u003d (ExpenseReminderCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 expenseReminder.equals(card.expenseReminder);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FontManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Font Manager to manage fonts."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class FontManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final List\u003cFontName\u003e FONTS \u003d generateFontNames();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Font name should be one of the following: \" + FONTS.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private FontName currentFontName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Empty constructor for FontManager class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public FontManager() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /*public FontManager(FontName currentFontName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireAllNonNull(fonts, currentFontName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        checkArgument(isValidFontName(currentFontName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.currentFontName \u003d currentFontName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Generates a list of {@code FontName} from their string equivalents."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static List\u003cFontName\u003e generateFontNames() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        List\u003cString\u003e fontNameStrings \u003d new ArrayList\u003c\u003e(Arrays.asList(\"arial\", \"calibri\", \"cambria\", \"candara\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \"garamond\", \"georgia\", \"rockwell\", \"segoe UI\", \"serif\", \"verdana\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        List\u003cFontName\u003e fontNames \u003d new ArrayList\u003c\u003e(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (String fontNameString : fontNameStrings) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fontNames.add(new FontName(fontNameString));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return fontNames;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public List\u003cFontName\u003e getFonts() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return FONTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public FontName getCurrentFontName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.currentFontName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setCurrentFontName(FontName newFontName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireAllNonNull(newFontName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        checkArgument(isValidFontName(newFontName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.currentFontName \u003d newFontName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns true if specified font name exists in the list of valid font names."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static boolean isValidFontName(FontName test) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return FONTS.contains(test);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns true if specified font name exists in the list of valid font names."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static boolean isValidFontName(String test) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return FONTS.contains(new FontName(test));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                || (other instanceof FontManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 currentFontName.equals(((FontManager) other).getCurrentFontName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return Objects.hash(FONTS, currentFontName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FontName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a FontName."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class FontName {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public final String fontName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public FontName(String fontName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        requireAllNonNull(fontName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.fontName \u003d fontName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                || (other instanceof FontName // instanceof handles nulls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 fontName.equals(((FontName) other).fontName)); // state check"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return fontName.hashCode();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return fontName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IncomeCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Income;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class IncomeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String FXML \u003d \"IncomeCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public final Income income;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label desc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label amt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public IncomeCard(Income income, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String descWithType \u003d income.getDesc().fullDesc;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc.setText(descWithType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        date.setText(income.getDate().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        amt.setText(\"$\" + income.getAmount().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        income.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!(other instanceof IncomeCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        IncomeCard card \u003d (IncomeCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 income.equals(card.income);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ListElementPointer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw a {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw a {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw a {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rongrongrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongrongrr": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.PanelName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private EntryListPanel entryListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private WishListPanel wishListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private StackPane entryListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private HBox window;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private VBox sidePanelsPlaceHolder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private VBox wishesPlaceHolder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private VBox budgetsPlaceHolder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private VBox remindersPlaceHolder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entryListPanel \u003d new EntryListPanel(logic.getFilteredExpenseAndIncomeList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entryListPanelPlaceholder.getChildren().add(entryListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        WishListPanel wishListPanel \u003d new WishListPanel(logic.getFilteredWishList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        wishesPlaceHolder.getChildren().add(wishListPanel.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        BudgetPanel budgetsPanel \u003d new BudgetPanel(logic.getFilteredBudgetList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        budgetsPlaceHolder.getChildren().add(budgetsPanel.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // TODO: add wish reminders to the panel as well"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ReminderPanel reminderPanel \u003d new ReminderPanel(logic.getFilteredExpenseReminderList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        remindersPlaceHolder.getChildren().add(reminderPanel.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Toggles the isVisible and isManaged property for the specified panel."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Checks if the entire side panel needs to be toggled as well."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private void handleTogglePanel(String panelNameString) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        togglePanel(panelNameString);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        toggleEntireSidePanelIfNecessary();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Calls the togglePlaceHolder method with the place holder of the specified panel."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param panelName name of the specified panel to be toggled."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private void togglePanel(String panelName) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        switch (panelName) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"wishlist\":"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            togglePlaceHolder(wishesPlaceHolder);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"budget\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            togglePlaceHolder(budgetsPlaceHolder);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"reminder\":"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            togglePlaceHolder(remindersPlaceHolder);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        logger.info(\"Toggled \" + panelName + \" side panel\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Toggles the isVisible and isManaged properties of the specified place holder."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param placeHolder specified place holder to be toggled."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private void togglePlaceHolder(VBox placeHolder) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        boolean isManaged \u003d placeHolder.isManaged();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        placeHolder.setManaged(!isManaged);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        boolean isVisible \u003d placeHolder.isVisible();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        placeHolder.setVisible(!isVisible);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Sets both the isVisible and isManaged properties the side panel place holder to false if none of the side panels"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * are visible and managed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Otherwise, both of those properties are set to true."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private void toggleEntireSidePanelIfNecessary() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!wishesPlaceHolder.isManaged() \u0026\u0026 !budgetsPlaceHolder.isManaged() \u0026\u0026 !remindersPlaceHolder.isManaged()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            sidePanelsPlaceHolder.setManaged(false);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            sidePanelsPlaceHolder.setVisible(false);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } else { // any one of the side panels are managed and visible"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            sidePanelsPlaceHolder.setManaged(true);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            sidePanelsPlaceHolder.setVisible(true);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        logger.info(\"Toggled entire side panel\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns a {@code String} for the updated feedback to user that includes a list of all the fonts."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private String handleListFonts(String oldFeedbackToUser) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        FontManager fontManager \u003d new FontManager();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String feedbackToUserWithFontList \u003d oldFeedbackToUser + \": \""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                + Arrays.toString(fontManager.getFonts().toArray());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        logger.info(\"Listed all fonts\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return feedbackToUserWithFontList;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Changes font in the application to the specified font."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private void handleChangeFont(String font) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String style \u003d \"-fx-font-family: \" + font;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        window.setStyle(style);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public EntryListPanel getEntryListPanel() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return entryListPanel;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ParseException, IllegalArgumentException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (commandResult.isTogglePanel()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                PanelName panelName \u003d commandResult.getPanelName();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String panelNameString \u003d panelName.getName();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                handleTogglePanel(panelNameString);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (commandResult.isListFonts()) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String feedbackToUser \u003d commandResult.getFeedbackToUser();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String feedbackToUserWithFontList \u003d handleListFonts(feedbackToUser);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                resultDisplay.setFeedbackToUser(feedbackToUserWithFontList);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (commandResult.isChangeFont()) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String fontNameString \u003d commandResult.getFontName().toString();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                handleChangeFont(fontNameString);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (CommandException | ParseException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 4,
      "jessicax941": 128,
      "-": 185
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.ExpenseReminder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Side panel for budgets."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class ReminderPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private ListView\u003cExpenseReminder\u003e reminderListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ReminderPanel(ObservableList\u003cExpenseReminder\u003e remindersList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        reminderListView.setItems(remindersList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cExpenseReminder\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        protected void updateItem(ExpenseReminder entry, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                setGraphic(new ExpenseReminderCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jessicax941": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/guiltTrip()_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        //primaryStage.set"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WishCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class WishCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String FXML \u003d \"WishListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public final Wish wish;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label desc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label amt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public WishCard(Wish wish, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.wish \u003d wish;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String descWithType \u003d wish.getDesc().fullDesc;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc.setText(descWithType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        date.setText(wish.getDate().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        amt.setText(\"$\" + wish.getAmount().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        wish.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!(other instanceof EntryCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        WishCard card \u003d (WishCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 wish.equals(card.wish);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jessicax941": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WishListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class WishListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static final String FXML \u003d \"WishListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public final Wish wish;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Label desc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Label amt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public WishListCard(Wish wish, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.wish \u003d wish;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String descWithType \u003d wish.getDesc().fullDesc;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        desc.setText(descWithType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        time.setText(wish.getDate().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        amt.setText(\"$\" + wish.getAmount().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        wish.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (!(other instanceof WishListCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        WishListCard card \u003d (WishListCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u0026\u0026 wish.equals(card.wish);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WishListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Wish;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Side panel for wishes in wishlist."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class WishListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String FXML \u003d \"WishListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WishListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private ListView\u003cWish\u003e wishListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public WishListPanel(ObservableList\u003cWish\u003e wishList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        wishListView.setItems(wishList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        wishListView.setCellFactory(listView -\u003e new WishListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    class WishListViewCell extends ListCell\u003cWish\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        protected void updateItem(Wish wish, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            super.updateItem(wish, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (empty || wish \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                setGraphic(new WishCard(wish, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WishReminderCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.WishReminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * An UI component that displays information of a {@code Reminder}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class WishReminderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static final String FXML \u003d \"WishReminderListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public final WishReminder wishReminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label desc;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label amt;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public WishReminderCard(WishReminder wishReminder, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.wishReminder \u003d wishReminder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc.setText(wishReminder.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        //date.setText(wishReminder.getDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        //amt.setText(wishReminder.getSum() + \" / \" + wishReminder.getQuota());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        /*String type \u003d reminder.getType().toLowerCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String descWithType \u003d \"[\" + type + \"] \" + entry.getDesc().fullDesc;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc.setText(descWithType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        date.setText(entry.getDate().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        amt.setText(\"$\" + entry.getAmount().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        entry.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));*/"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (!(other instanceof WishReminderCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        WishReminderCard card \u003d (WishReminderCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u0026\u0026 wishReminder.equals(card.wishReminder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 1,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 1,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 1,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_FOOD_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_FOOD_EXPENSE + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person expectedPerson \u003d new EntryBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person validPerson \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getEntryList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person validPerson \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person validPerson \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_ENTRY, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person alice \u003d new EntryBuilder().withDesc(\"Alice\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person bob \u003d new EntryBuilder().withDesc(\"Bob\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        private final Person person;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            this.person \u003d person;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            personsAdded.add(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            return new AddressBook();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String VALID_DESC_FOOD_EXPENSE \u003d \"deck mala\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String VALID_DESC_CLOTHING_EXPENSE \u003d \"cotton on jeans\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String VALID_TAG_FOOD \u003d \"food\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String VALID_TAG_CLOTHING \u003d \"clothing\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String NAME_DESC_FOOD_EXPENSE \u003d \" \" + PREFIX_DESC + VALID_DESC_FOOD_EXPENSE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String NAME_DESC_CLOTHING_EXPENSE \u003d \" \" + PREFIX_DESC + VALID_DESC_CLOTHING_EXPENSE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String TAG_DESC_FOOD \u003d \" \" + PREFIX_TAG + VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String TAG_DESC_CLOTHING \u003d \" \" + PREFIX_TAG + VALID_TAG_CLOTHING;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_DESC + \"deck mala\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"food*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final EditCommand.EditEntryDescriptor DESC_FOOD_EXPENSE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final EditCommand.EditEntryDescriptor DESC_CLOTHING_EXPENSE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        DESC_FOOD_EXPENSE \u003d new EditEntryDescriptorBuilder().withDescription(VALID_DESC_FOOD_EXPENSE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                .withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        DESC_CLOTHING_EXPENSE \u003d new EditEntryDescriptorBuilder().withDescription(VALID_DESC_CLOTHING_EXPENSE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                .withTags(VALID_TAG_CLOTHING).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            Model expectedModel, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            Model expectedModel, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        List\u003cEntry\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEntryList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel, commandHistory));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredEntryList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Entry person \u003d model.getFilteredEntryList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        final String[] splitDesc \u003d person.getDesc().fullDesc.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        model.updateFilteredEntryList(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitDesc[0])));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        assertEquals(1, model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 38,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENTRY_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENTRY_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEntryList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_FOOD_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_CLOTHING_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_CLOTHING_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person editedPerson \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditEntryDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ENTRY_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EntryBuilder personInList \u003d new EntryBuilder(lastPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person editedPerson \u003d personInList.withDesc(VALID_DESC_CLOTHING_EXPENSE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                  .withDescription(VALID_DESC_CLOTHING_EXPENSE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ENTRY_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ENTRY_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person editedPerson \u003d new EntryBuilder(personInFilteredList).withDesc(VALID_DESC_CLOTHING_EXPENSE).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new EditEntryDescriptorBuilder().withDescription(VALID_DESC_CLOTHING_EXPENSE).build());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ENTRY_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditEntryDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getEntryList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new EditEntryDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        .withDescription(VALID_DESC_CLOTHING_EXPENSE).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEntryList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new EditEntryDescriptorBuilder().withDescription(VALID_DESC_CLOTHING_EXPENSE).build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_FOOD_EXPENSE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_FOOD_EXPENSE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_FOOD_EXPENSE)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_CLOTHING_EXPENSE)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_FOOD_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_CLOTHING_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_CLOTHING_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_FOOD_EXPENSE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(DESC_FOOD_EXPENSE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(DESC_FOOD_EXPENSE.equals(DESC_FOOD_EXPENSE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(DESC_FOOD_EXPENSE.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(DESC_FOOD_EXPENSE.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(DESC_FOOD_EXPENSE.equals(DESC_CLOTHING_EXPENSE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor editedAmy \u003d new EditEntryDescriptorBuilder(DESC_FOOD_EXPENSE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        .withDescription(VALID_DESC_CLOTHING_EXPENSE).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(DESC_FOOD_EXPENSE.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        editedAmy \u003d new EditEntryDescriptorBuilder(DESC_FOOD_EXPENSE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(DESC_FOOD_EXPENSE.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        editedAmy \u003d new EditEntryDescriptorBuilder(DESC_FOOD_EXPENSE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(DESC_FOOD_EXPENSE.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        editedAmy \u003d new EditEntryDescriptorBuilder(DESC_FOOD_EXPENSE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(DESC_FOOD_EXPENSE.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        editedAmy \u003d new EditEntryDescriptorBuilder(DESC_FOOD_EXPENSE).withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(DESC_FOOD_EXPENSE.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_FOOD_EXPENSE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CLOTHING_EXPENSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CLOTHING;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_CLOTHING_EXPENSE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CLOTHING;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class AddCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person expectedPerson \u003d new EntryBuilder(BOB).withTags(VALID_TAG_CLOTHING).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_CLOTHING_EXPENSE + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_CLOTHING, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_FOOD_EXPENSE + NAME_DESC_CLOTHING_EXPENSE + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_CLOTHING, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_CLOTHING_EXPENSE + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_CLOTHING, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_CLOTHING_EXPENSE + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_CLOTHING, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_CLOTHING_EXPENSE + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_CLOTHING, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // multiple tags - all accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person expectedPersonMultipleTags \u003d new EntryBuilder(BOB).withTags(VALID_TAG_CLOTHING, VALID_TAG_FOOD)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_CLOTHING_EXPENSE + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + TAG_DESC_FOOD + TAG_DESC_CLOTHING, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // zero tags"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person expectedPerson \u003d new EntryBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_FOOD_EXPENSE + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // missing name prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, VALID_DESC_CLOTHING_EXPENSE + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // missing phone prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_CLOTHING_EXPENSE + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // missing email prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_CLOTHING_EXPENSE + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // missing address prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_CLOTHING_EXPENSE + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // all prefixes missing"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, VALID_DESC_CLOTHING_EXPENSE + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + TAG_DESC_FOOD + TAG_DESC_CLOTHING, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // invalid phone"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_CLOTHING_EXPENSE + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + TAG_DESC_FOOD + TAG_DESC_CLOTHING, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // invalid email"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_CLOTHING_EXPENSE + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + TAG_DESC_FOOD + TAG_DESC_CLOTHING, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // invalid address"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_CLOTHING_EXPENSE + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + TAG_DESC_FOOD + TAG_DESC_CLOTHING, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // invalid tag"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_CLOTHING_EXPENSE + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + INVALID_TAG_DESC + VALID_TAG_CLOTHING, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // non-empty preamble"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_CLOTHING_EXPENSE + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FOOD + TAG_DESC_CLOTHING,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person person \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person person \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditEntryDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(new FindCommand(new DescriptionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_FOOD_EXPENSE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CLOTHING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_FOOD_EXPENSE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CLOTHING;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, VALID_DESC_FOOD_EXPENSE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"-5\" + NAME_DESC_FOOD_EXPENSE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"0\" + NAME_DESC_FOOD_EXPENSE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Description.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_CLOTHING + TAG_DESC_FOOD + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_CLOTHING + TAG_EMPTY + TAG_DESC_FOOD, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_CLOTHING + TAG_DESC_FOOD, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_FOOD"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_FOOD_EXPENSE + TAG_DESC_CLOTHING;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withDescription(VALID_DESC_FOOD_EXPENSE)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .withTags(VALID_TAG_FOOD, VALID_TAG_CLOTHING).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_FOOD_EXPENSE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        .withDescription(VALID_DESC_FOOD_EXPENSE).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // phone"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        descriptor \u003d new EditEntryDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // email"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        descriptor \u003d new EditEntryDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // address"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        descriptor \u003d new EditEntryDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // tags"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + TAG_DESC_CLOTHING;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        descriptor \u003d new EditEntryDescriptorBuilder().withTags(VALID_TAG_CLOTHING).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + TAG_DESC_CLOTHING + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_CLOTHING"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .withTags(VALID_TAG_CLOTHING, VALID_TAG_FOOD)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // no other valid values specified"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // other valid values specified"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        descriptor \u003d new EditEntryDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 213
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Description expectedName \u003d new Description(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedName, ParserUtil.parseDescription(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Description expectedName \u003d new Description(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedName, ParserUtil.parseDescription(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(Collections.emptyList(), addressBook.getEntryList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person editedAlice \u003d new EntryBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FOOD)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(DuplicateEntryException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person editedAlice \u003d new EntryBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FOOD)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getEntryList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        public ObservableList\u003cPerson\u003e getEntryList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String[] keywords \u003d ALICE.getName().fullDesc.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        modelManager.updateFilteredPersonList(new DescriptionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AutoExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import static seedu.address.testutil.TypicalAutoExpenses.FOOD_AUTO_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import com.github.javafaker.Faker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.testutil.AutoExpenseBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class AutoExpenseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static final Faker faker \u003d new Faker();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        AutoExpense autoExpense \u003d new AutoExpenseBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e autoExpense.getTags().remove(VALID_TAG_FOOD));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void isSameAutoExpense() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        assertTrue(FOOD_AUTO_EXPENSE.equals(FOOD_AUTO_EXPENSE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        assertFalse(FOOD_AUTO_EXPENSE.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // different desc -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        AutoExpense editedFoodAutoExp \u003d new AutoExpenseBuilder(FOOD_AUTO_EXPENSE).withDesc(faker.lorem().sentence())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        assertFalse(FOOD_AUTO_EXPENSE.equals(editedFoodAutoExp));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // editedFoodAutoExp \u003d new AutoExpenseBuilder(FOOD_AUTO_EXPENSE).withDesc(VALID_DESC_CLOTHING_EXPENSE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertFalse(FOOD_AUTO_EXPENSE.isSamePerson(editedFoodAutoExp));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // editedFoodAutoExp \u003d new AutoExpenseBuilder(FOOD_AUTO_EXPENSE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        //         .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertTrue(FOOD_AUTO_EXPENSE.isSamePerson(editedFoodAutoExp));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // editedFoodAutoExp \u003d new AutoExpenseBuilder(FOOD_AUTO_EXPENSE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        //         .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertTrue(FOOD_AUTO_EXPENSE.isSamePerson(editedFoodAutoExp));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // editedFoodAutoExp \u003d new AutoExpenseBuilder(FOOD_AUTO_EXPENSE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        //         .withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertTrue(FOOD_AUTO_EXPENSE.isSamePerson(editedFoodAutoExp));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // Person FOOD_AUTO_EXPENSECopy \u003d new AutoExpenseBuilder(FOOD_AUTO_EXPENSE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertTrue(FOOD_AUTO_EXPENSE.equals(FOOD_AUTO_EXPENSECopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertTrue(FOOD_AUTO_EXPENSE.equals(FOOD_AUTO_EXPENSE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertFalse(FOOD_AUTO_EXPENSE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertFalse(FOOD_AUTO_EXPENSE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertFalse(FOOD_AUTO_EXPENSE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // Person editedFOOD_AUTO_EXPENSE \u003d new AutoExpenseBuilder(FOOD_AUTO_EXPENSE)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // .withDesc(VALID_DESC_CLOTHING_EXPENSE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        //         .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertFalse(FOOD_AUTO_EXPENSE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // different phone -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // editedFOOD_AUTO_EXPENSE \u003d new AutoExpenseBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertFalse(FOOD_AUTO_EXPENSE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // different email -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // editedAlice \u003d new AutoExpenseBuilder(FOOD_AUTO_EXPENSE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertFalse(FOOD_AUTO_EXPENSE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // different address -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // editedAlice \u003d new AutoExpenseBuilder(FOOD_AUTO_EXPENSE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertFalse(FOOD_AUTO_EXPENSE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // // different tags -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // editedAlice \u003d new AutoExpenseBuilder(FOOD_AUTO_EXPENSE).withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // assertFalse(FOOD_AUTO_EXPENSE.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        new DescriptionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(predicate.test(new EntryBuilder().withDesc(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(predicate.test(new EntryBuilder().withDesc(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(predicate.test(new EntryBuilder().withDesc(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(predicate.test(new EntryBuilder().withDesc(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        new DescriptionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(predicate.test(new EntryBuilder().withDesc(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(predicate.test(new EntryBuilder().withDesc(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        predicate \u003d new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(predicate.test(new EntryBuilder().withDesc(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(Description.isValidDescription(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Description.isValidDescription(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Description.isValidDescription(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Description.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Description.isValidDescription(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(Description.isValidDescription(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Description.isValidDescription(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Description.isValidDescription(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Description.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(Description.isValidDescription(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_CLOTHING_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person person \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person editedAlice \u003d new EntryBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        editedAlice \u003d new EntryBuilder(ALICE).withDesc(VALID_DESC_CLOTHING_EXPENSE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        editedAlice \u003d new EntryBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        editedAlice \u003d new EntryBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        editedAlice \u003d new EntryBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person aliceCopy \u003d new EntryBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person editedAlice \u003d new EntryBuilder(ALICE).withDesc(VALID_DESC_CLOTHING_EXPENSE).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        editedAlice \u003d new EntryBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        editedAlice \u003d new EntryBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        editedAlice \u003d new EntryBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        editedAlice \u003d new EntryBuilder(ALICE).withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueEntryListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class UniqueEntryListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final UniqueEntryList uniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person editedAlice \u003d new EntryBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(DuplicateEntryException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(EntryNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UniqueEntryList expectedUniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c Updated upstream:src/test/java/seedu/address/model/person/UniquePersonListTest.java"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person editedAlice \u003d new EntryBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Entry editedAlice \u003d new EntryBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Stashed changes:src/test/java/seedu/address/model/person/UniqueEntryListTest.java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UniqueEntryList expectedUniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UniqueEntryList expectedUniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(DuplicateEntryException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(EntryNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UniqueEntryList expectedUniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setEntries((UniqueEntryList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UniqueEntryList expectedUniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.setEntries(expectedUniquePersonList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setEntries((List\u003cEntry\u003e) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cEntry\u003e entryList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.setEntries(entryList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UniqueEntryList expectedUniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cEntry\u003e listWithDuplicateEntries \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(DuplicateEntryException.class, () -\u003e uniquePersonList.setEntries(listWithDuplicateEntries));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class UniqueEntryListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private final UniqueEntryList uniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person editedAlice \u003d new EntryBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FOOD)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(DuplicateEntryException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(EntryNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UniqueEntryList expectedUniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Person editedAlice \u003d new EntryBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FOOD)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UniqueEntryList expectedUniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UniqueEntryList expectedUniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(DuplicateEntryException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(EntryNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UniqueEntryList expectedUniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setEntries((UniqueEntryList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UniqueEntryList expectedUniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.setEntries(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setEntries((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        uniquePersonList.setEntries(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        UniqueEntryList expectedUniquePersonList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(DuplicateEntryException.class, () -\u003e uniquePersonList.setEntries(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedEntryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.storage.JsonAdaptedEntry.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class JsonAdaptedEntryTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    //private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    //private static final String VALID_NAME \u003d BENSON.getDesc().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    //private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    //private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    //private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonAdaptedEntry person \u003d new JsonAdaptedEntry(BENSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonAdaptedEntry person \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c Updated upstream:src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new JsonAdaptedEntry(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new JsonAdaptedEntry(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Stashed changes:src/test/java/seedu/address/storage/JsonAdaptedEntryTest.java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c Updated upstream:src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonAdaptedEntry person \u003d new JsonAdaptedEntry(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonAdaptedEntry person \u003d new JsonAdaptedEntry(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Stashed changes:src/test/java/seedu/address/storage/JsonAdaptedEntryTest.java"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        JsonAdaptedEntry person \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////                new JsonAdaptedEntry(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        JsonAdaptedEntry person \u003d new JsonAdaptedEntry(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        JsonAdaptedEntry person \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////                new JsonAdaptedEntry(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        JsonAdaptedEntry person \u003d new JsonAdaptedEntry(VALID_NAME, VALID_PHONE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonAdaptedEntry person \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new JsonAdaptedEntry(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.storage.JsonAdaptedEntry.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class JsonAdaptedEntryTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonAdaptedEntry person \u003d new JsonAdaptedEntry(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonAdaptedEntry person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new JsonAdaptedEntry(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonAdaptedEntry person \u003d new JsonAdaptedEntry(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        JsonAdaptedEntry person \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////                new JsonAdaptedEntry(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        JsonAdaptedEntry person \u003d new JsonAdaptedEntry(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        JsonAdaptedEntry person \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////                new JsonAdaptedEntry(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        JsonAdaptedEntry person \u003d new JsonAdaptedEntry(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        JsonAdaptedEntry person \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////                new JsonAdaptedEntry(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        JsonAdaptedEntry person \u003d new JsonAdaptedEntry(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonAdaptedEntry person \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                new JsonAdaptedEntry(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        original.removeEntry(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalEntries.getTypicalAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 11,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.testutil.TypicalEntries.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 6,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AutoExpenseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.AutoExpense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.util.Frequency;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * A utility class to help with building AutoExpense objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class AutoExpenseBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final double DEFAULT_AMOUNT \u003d 5.60;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"2019-09-09\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String DEFAULT_FREQ \u003d \"weekly\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"Foods and Drinks\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Description desc;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Amount amt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Frequency freq;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AutoExpenseBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY, \"Expense\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        desc \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        amt \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        date \u003d new Date(DEFAULT_TIME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        freq \u003d Frequency.parse(DEFAULT_FREQ);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Initializes the AutoExpenseBuilder with the data of {@code AutoExpenseToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AutoExpenseBuilder(AutoExpense autoExpenseToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        category \u003d autoExpenseToCopy.getCategory();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        desc \u003d autoExpenseToCopy.getDesc();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        amt \u003d autoExpenseToCopy.getAmount();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        date \u003d autoExpenseToCopy.getDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(autoExpenseToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        freq \u003d autoExpenseToCopy.getFrequency();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AutoExpenseBuilder withDesc(String desc) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.desc \u003d new Description(desc);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AutoExpenseBuilder withTime(String time) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.date \u003d new Date(time);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AutoExpenseBuilder withAmt(double amt) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.amt \u003d new Amount(amt);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AutoExpenseBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Sets the {@code Freq} of the {@code AutoExpense} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AutoExpenseBuilder withFreq(String freqString) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.freq \u003d Frequency.parse(freqString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Sets the {@code Category} of the {@code AutoExpense} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AutoExpenseBuilder withCategory(String categoryString) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.category \u003d new Category(categoryString, \"Expense\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AutoExpense build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new AutoExpense(category, desc, amt, tags, freq, date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditEntryDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class EditEntryDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private EditEntryDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public EditEntryDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        descriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public EditEntryDescriptorBuilder(EditEntryDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.descriptor \u003d new EditEntryDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public EditEntryDescriptorBuilder(Entry entry) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        descriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        descriptor.setDesc(entry.getDesc());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        descriptor.setAmount(entry.getAmount());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        //        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        //        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        //        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        descriptor.setTags(entry.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public EditEntryDescriptorBuilder withDescription(String desc) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        descriptor.setDesc(new Description(desc));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Sets the Amount of the EditEntryDescriptor that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param amt amount to be added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public EditEntryDescriptorBuilder withAmount(double amt) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        descriptor.setAmount(new Amount(amt));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    //     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    //    public EditEntryDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    //        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    //        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    //     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    //    public EditEntryDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    //        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    //     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    //    public EditEntryDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    //        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public EditEntryDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public EditEntryDescriptor build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 84,
      "jessicax941": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EntryBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import seedu.address.model.person.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import seedu.address.model.person.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * A utility class to help with building Entry objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class EntryBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"FOOD\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final double DEFAULT_AMOUNT \u003d 5.60;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"2019-09-09\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Category cat;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Description desc;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Amount amt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public EntryBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        cat \u003d new Category(DEFAULT_CATEGORY, \"Expense\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        amt \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        date \u003d new Date(DEFAULT_TIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public EntryBuilder(Entry entryToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        desc \u003d entryToCopy.getDesc();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        amt \u003d entryToCopy.getAmount();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(entryToCopy.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public EntryBuilder withDesc(String desc) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d new Description(desc);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public EntryBuilder withTime(String time) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.date \u003d new Date(time);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public EntryBuilder withAmt(double amt) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.amt \u003d new Amount(amt);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public EntryBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Entry build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new Entry(cat, desc, date, amt, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 4,
      "Dandford": 14,
      "jessicax941": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        sb.append(PREFIX_DESC + person.getName().fullDesc + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_DESC).append(name.fullDesc).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "///**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "// */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAutoExpenses.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.address.model.person.AutoExpense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class TypicalAutoExpenses {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final AutoExpense FOOD_AUTO_EXPENSE \u003d new AutoExpenseBuilder().withDesc(\"pgp mala\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            .withTime(\"2019-09-09\").withAmt(5.50).withTags(\"food\").withFreq(\"daily\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static final AutoExpense BBT_AUTO_EXPENSE \u003d new AutoExpenseBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            .withDesc(\"UTown gongcha passion fruit tea with 70% sugar\").withAmt(4.38)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            .withTags(\"food\", \"luxury\", \"drinks\").withFreq(\"daily\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private TypicalAutoExpenses() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static List\u003cAutoExpense\u003e getTypicalAutoExpenses() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FOOD_AUTO_EXPENSE, BBT_AUTO_EXPENSE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEntries.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import seedu.address.model.person.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class TypicalEntries {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final Entry FOOD_EXPENSE \u003d new EntryBuilder().withDesc(\"pgp mala\").withTime(\"2019-09-09\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .withAmt(5.50).withTags(\"food\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static final Entry CLOTHING_EXPENSE \u003d new EntryBuilder().withDesc(\"cotton on jeans on sale\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .withTime(\"2019-09-09\").withAmt(14.90).withTags(\"want\", \"clothes\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private TypicalEntries() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (Entry entry : getTypicalEntries()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            ab.addEntry(entry);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static List\u003cEntry\u003e getTypicalEntries() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FOOD_EXPENSE, CLOTHING_EXPENSE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 2,
      "Dandford": 4,
      "jessicax941": 33
    }
  }
]
